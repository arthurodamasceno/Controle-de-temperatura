
controle_temperatura_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008918  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08008a28  08008a28  00018a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bf4  08008bf4  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08008bf4  08008bf4  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008bf4  08008bf4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bf4  08008bf4  00018bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bf8  08008bf8  00018bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b94  20000088  08008c84  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c1c  08008c84  00022c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019572  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034d9  00000000  00000000  00039623  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001540  00000000  00000000  0003cb00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013a8  00000000  00000000  0003e040  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b36f  00000000  00000000  0003f3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000130e9  00000000  00000000  0005a757  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009cd04  00000000  00000000  0006d840  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010a544  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e08  00000000  00000000  0010a5c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08008a10 	.word	0x08008a10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08008a10 	.word	0x08008a10

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	; 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	20002b70 	.word	0x20002b70

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032a:	f1a4 0401 	sub.w	r4, r4, #1
 800032e:	d1e9      	bne.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__aeabi_d2f>:
 8000988:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800098c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000990:	bf24      	itt	cs
 8000992:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000996:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800099a:	d90d      	bls.n	80009b8 <__aeabi_d2f+0x30>
 800099c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009bc:	d121      	bne.n	8000a02 <__aeabi_d2f+0x7a>
 80009be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009c2:	bfbc      	itt	lt
 80009c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009c8:	4770      	bxlt	lr
 80009ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d2:	f1c2 0218 	rsb	r2, r2, #24
 80009d6:	f1c2 0c20 	rsb	ip, r2, #32
 80009da:	fa10 f30c 	lsls.w	r3, r0, ip
 80009de:	fa20 f002 	lsr.w	r0, r0, r2
 80009e2:	bf18      	it	ne
 80009e4:	f040 0001 	orrne.w	r0, r0, #1
 80009e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f4:	ea40 000c 	orr.w	r0, r0, ip
 80009f8:	fa23 f302 	lsr.w	r3, r3, r2
 80009fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a00:	e7cc      	b.n	800099c <__aeabi_d2f+0x14>
 8000a02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a06:	d107      	bne.n	8000a18 <__aeabi_d2f+0x90>
 8000a08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a0c:	bf1e      	ittt	ne
 8000a0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a16:	4770      	bxne	lr
 8000a18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_frsub>:
 8000a28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a2c:	e002      	b.n	8000a34 <__addsf3>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_fsub>:
 8000a30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a34 <__addsf3>:
 8000a34:	0042      	lsls	r2, r0, #1
 8000a36:	bf1f      	itttt	ne
 8000a38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a3c:	ea92 0f03 	teqne	r2, r3
 8000a40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a48:	d06a      	beq.n	8000b20 <__addsf3+0xec>
 8000a4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a52:	bfc1      	itttt	gt
 8000a54:	18d2      	addgt	r2, r2, r3
 8000a56:	4041      	eorgt	r1, r0
 8000a58:	4048      	eorgt	r0, r1
 8000a5a:	4041      	eorgt	r1, r0
 8000a5c:	bfb8      	it	lt
 8000a5e:	425b      	neglt	r3, r3
 8000a60:	2b19      	cmp	r3, #25
 8000a62:	bf88      	it	hi
 8000a64:	4770      	bxhi	lr
 8000a66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a72:	bf18      	it	ne
 8000a74:	4240      	negne	r0, r0
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a82:	bf18      	it	ne
 8000a84:	4249      	negne	r1, r1
 8000a86:	ea92 0f03 	teq	r2, r3
 8000a8a:	d03f      	beq.n	8000b0c <__addsf3+0xd8>
 8000a8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a90:	fa41 fc03 	asr.w	ip, r1, r3
 8000a94:	eb10 000c 	adds.w	r0, r0, ip
 8000a98:	f1c3 0320 	rsb	r3, r3, #32
 8000a9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000aa0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aa4:	d502      	bpl.n	8000aac <__addsf3+0x78>
 8000aa6:	4249      	negs	r1, r1
 8000aa8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ab0:	d313      	bcc.n	8000ada <__addsf3+0xa6>
 8000ab2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ab6:	d306      	bcc.n	8000ac6 <__addsf3+0x92>
 8000ab8:	0840      	lsrs	r0, r0, #1
 8000aba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000abe:	f102 0201 	add.w	r2, r2, #1
 8000ac2:	2afe      	cmp	r2, #254	; 0xfe
 8000ac4:	d251      	bcs.n	8000b6a <__addsf3+0x136>
 8000ac6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ace:	bf08      	it	eq
 8000ad0:	f020 0001 	biceq.w	r0, r0, #1
 8000ad4:	ea40 0003 	orr.w	r0, r0, r3
 8000ad8:	4770      	bx	lr
 8000ada:	0049      	lsls	r1, r1, #1
 8000adc:	eb40 0000 	adc.w	r0, r0, r0
 8000ae0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ae4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ae8:	d1ed      	bne.n	8000ac6 <__addsf3+0x92>
 8000aea:	fab0 fc80 	clz	ip, r0
 8000aee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000af2:	ebb2 020c 	subs.w	r2, r2, ip
 8000af6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000afa:	bfaa      	itet	ge
 8000afc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b00:	4252      	neglt	r2, r2
 8000b02:	4318      	orrge	r0, r3
 8000b04:	bfbc      	itt	lt
 8000b06:	40d0      	lsrlt	r0, r2
 8000b08:	4318      	orrlt	r0, r3
 8000b0a:	4770      	bx	lr
 8000b0c:	f092 0f00 	teq	r2, #0
 8000b10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b14:	bf06      	itte	eq
 8000b16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b1a:	3201      	addeq	r2, #1
 8000b1c:	3b01      	subne	r3, #1
 8000b1e:	e7b5      	b.n	8000a8c <__addsf3+0x58>
 8000b20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b28:	bf18      	it	ne
 8000b2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b2e:	d021      	beq.n	8000b74 <__addsf3+0x140>
 8000b30:	ea92 0f03 	teq	r2, r3
 8000b34:	d004      	beq.n	8000b40 <__addsf3+0x10c>
 8000b36:	f092 0f00 	teq	r2, #0
 8000b3a:	bf08      	it	eq
 8000b3c:	4608      	moveq	r0, r1
 8000b3e:	4770      	bx	lr
 8000b40:	ea90 0f01 	teq	r0, r1
 8000b44:	bf1c      	itt	ne
 8000b46:	2000      	movne	r0, #0
 8000b48:	4770      	bxne	lr
 8000b4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b4e:	d104      	bne.n	8000b5a <__addsf3+0x126>
 8000b50:	0040      	lsls	r0, r0, #1
 8000b52:	bf28      	it	cs
 8000b54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b58:	4770      	bx	lr
 8000b5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b5e:	bf3c      	itt	cc
 8000b60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bxcc	lr
 8000b66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	4770      	bx	lr
 8000b74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b78:	bf16      	itet	ne
 8000b7a:	4608      	movne	r0, r1
 8000b7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b80:	4601      	movne	r1, r0
 8000b82:	0242      	lsls	r2, r0, #9
 8000b84:	bf06      	itte	eq
 8000b86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b8a:	ea90 0f01 	teqeq	r0, r1
 8000b8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b92:	4770      	bx	lr

08000b94 <__aeabi_ui2f>:
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e004      	b.n	8000ba4 <__aeabi_i2f+0x8>
 8000b9a:	bf00      	nop

08000b9c <__aeabi_i2f>:
 8000b9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	bf48      	it	mi
 8000ba2:	4240      	negmi	r0, r0
 8000ba4:	ea5f 0c00 	movs.w	ip, r0
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bb0:	4601      	mov	r1, r0
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	e01c      	b.n	8000bf2 <__aeabi_l2f+0x2a>

08000bb8 <__aeabi_ul2f>:
 8000bb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bbc:	bf08      	it	eq
 8000bbe:	4770      	bxeq	lr
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	e00a      	b.n	8000bdc <__aeabi_l2f+0x14>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_l2f>:
 8000bc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bcc:	bf08      	it	eq
 8000bce:	4770      	bxeq	lr
 8000bd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__aeabi_l2f+0x14>
 8000bd6:	4240      	negs	r0, r0
 8000bd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bdc:	ea5f 0c01 	movs.w	ip, r1
 8000be0:	bf02      	ittt	eq
 8000be2:	4684      	moveq	ip, r0
 8000be4:	4601      	moveq	r1, r0
 8000be6:	2000      	moveq	r0, #0
 8000be8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bec:	bf08      	it	eq
 8000bee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bf6:	fabc f28c 	clz	r2, ip
 8000bfa:	3a08      	subs	r2, #8
 8000bfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c00:	db10      	blt.n	8000c24 <__aeabi_l2f+0x5c>
 8000c02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c06:	4463      	add	r3, ip
 8000c08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c0c:	f1c2 0220 	rsb	r2, r2, #32
 8000c10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c14:	fa20 f202 	lsr.w	r2, r0, r2
 8000c18:	eb43 0002 	adc.w	r0, r3, r2
 8000c1c:	bf08      	it	eq
 8000c1e:	f020 0001 	biceq.w	r0, r0, #1
 8000c22:	4770      	bx	lr
 8000c24:	f102 0220 	add.w	r2, r2, #32
 8000c28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c2c:	f1c2 0220 	rsb	r2, r2, #32
 8000c30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c34:	fa21 f202 	lsr.w	r2, r1, r2
 8000c38:	eb43 0002 	adc.w	r0, r3, r2
 8000c3c:	bf08      	it	eq
 8000c3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_fmul>:
 8000c44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c52:	ea92 0f0c 	teqne	r2, ip
 8000c56:	ea93 0f0c 	teqne	r3, ip
 8000c5a:	d06f      	beq.n	8000d3c <__aeabi_fmul+0xf8>
 8000c5c:	441a      	add	r2, r3
 8000c5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c62:	0240      	lsls	r0, r0, #9
 8000c64:	bf18      	it	ne
 8000c66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c6a:	d01e      	beq.n	8000caa <__aeabi_fmul+0x66>
 8000c6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c78:	fba0 3101 	umull	r3, r1, r0, r1
 8000c7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c84:	bf3e      	ittt	cc
 8000c86:	0049      	lslcc	r1, r1, #1
 8000c88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c8c:	005b      	lslcc	r3, r3, #1
 8000c8e:	ea40 0001 	orr.w	r0, r0, r1
 8000c92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c96:	2afd      	cmp	r2, #253	; 0xfd
 8000c98:	d81d      	bhi.n	8000cd6 <__aeabi_fmul+0x92>
 8000c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca2:	bf08      	it	eq
 8000ca4:	f020 0001 	biceq.w	r0, r0, #1
 8000ca8:	4770      	bx	lr
 8000caa:	f090 0f00 	teq	r0, #0
 8000cae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cb2:	bf08      	it	eq
 8000cb4:	0249      	lsleq	r1, r1, #9
 8000cb6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cbe:	3a7f      	subs	r2, #127	; 0x7f
 8000cc0:	bfc2      	ittt	gt
 8000cc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cca:	4770      	bxgt	lr
 8000ccc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	dc5d      	bgt.n	8000d94 <__aeabi_fmul+0x150>
 8000cd8:	f112 0f19 	cmn.w	r2, #25
 8000cdc:	bfdc      	itt	le
 8000cde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ce2:	4770      	bxle	lr
 8000ce4:	f1c2 0200 	rsb	r2, r2, #0
 8000ce8:	0041      	lsls	r1, r0, #1
 8000cea:	fa21 f102 	lsr.w	r1, r1, r2
 8000cee:	f1c2 0220 	rsb	r2, r2, #32
 8000cf2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cfa:	f140 0000 	adc.w	r0, r0, #0
 8000cfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d02:	bf08      	it	eq
 8000d04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d08:	4770      	bx	lr
 8000d0a:	f092 0f00 	teq	r2, #0
 8000d0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d12:	bf02      	ittt	eq
 8000d14:	0040      	lsleq	r0, r0, #1
 8000d16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d1a:	3a01      	subeq	r2, #1
 8000d1c:	d0f9      	beq.n	8000d12 <__aeabi_fmul+0xce>
 8000d1e:	ea40 000c 	orr.w	r0, r0, ip
 8000d22:	f093 0f00 	teq	r3, #0
 8000d26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d2a:	bf02      	ittt	eq
 8000d2c:	0049      	lsleq	r1, r1, #1
 8000d2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d32:	3b01      	subeq	r3, #1
 8000d34:	d0f9      	beq.n	8000d2a <__aeabi_fmul+0xe6>
 8000d36:	ea41 010c 	orr.w	r1, r1, ip
 8000d3a:	e78f      	b.n	8000c5c <__aeabi_fmul+0x18>
 8000d3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d40:	ea92 0f0c 	teq	r2, ip
 8000d44:	bf18      	it	ne
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d00a      	beq.n	8000d62 <__aeabi_fmul+0x11e>
 8000d4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d50:	bf18      	it	ne
 8000d52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d56:	d1d8      	bne.n	8000d0a <__aeabi_fmul+0xc6>
 8000d58:	ea80 0001 	eor.w	r0, r0, r1
 8000d5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d60:	4770      	bx	lr
 8000d62:	f090 0f00 	teq	r0, #0
 8000d66:	bf17      	itett	ne
 8000d68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	f091 0f00 	teqne	r1, #0
 8000d72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d76:	d014      	beq.n	8000da2 <__aeabi_fmul+0x15e>
 8000d78:	ea92 0f0c 	teq	r2, ip
 8000d7c:	d101      	bne.n	8000d82 <__aeabi_fmul+0x13e>
 8000d7e:	0242      	lsls	r2, r0, #9
 8000d80:	d10f      	bne.n	8000da2 <__aeabi_fmul+0x15e>
 8000d82:	ea93 0f0c 	teq	r3, ip
 8000d86:	d103      	bne.n	8000d90 <__aeabi_fmul+0x14c>
 8000d88:	024b      	lsls	r3, r1, #9
 8000d8a:	bf18      	it	ne
 8000d8c:	4608      	movne	r0, r1
 8000d8e:	d108      	bne.n	8000da2 <__aeabi_fmul+0x15e>
 8000d90:	ea80 0001 	eor.w	r0, r0, r1
 8000d94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da0:	4770      	bx	lr
 8000da2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_fdiv>:
 8000dac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000db4:	bf1e      	ittt	ne
 8000db6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dba:	ea92 0f0c 	teqne	r2, ip
 8000dbe:	ea93 0f0c 	teqne	r3, ip
 8000dc2:	d069      	beq.n	8000e98 <__aeabi_fdiv+0xec>
 8000dc4:	eba2 0203 	sub.w	r2, r2, r3
 8000dc8:	ea80 0c01 	eor.w	ip, r0, r1
 8000dcc:	0249      	lsls	r1, r1, #9
 8000dce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dd2:	d037      	beq.n	8000e44 <__aeabi_fdiv+0x98>
 8000dd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dd8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ddc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000de0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de4:	428b      	cmp	r3, r1
 8000de6:	bf38      	it	cc
 8000de8:	005b      	lslcc	r3, r3, #1
 8000dea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000df2:	428b      	cmp	r3, r1
 8000df4:	bf24      	itt	cs
 8000df6:	1a5b      	subcs	r3, r3, r1
 8000df8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dfc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e00:	bf24      	itt	cs
 8000e02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e0e:	bf24      	itt	cs
 8000e10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e1c:	bf24      	itt	cs
 8000e1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	bf18      	it	ne
 8000e2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e2e:	d1e0      	bne.n	8000df2 <__aeabi_fdiv+0x46>
 8000e30:	2afd      	cmp	r2, #253	; 0xfd
 8000e32:	f63f af50 	bhi.w	8000cd6 <__aeabi_fmul+0x92>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e4c:	327f      	adds	r2, #127	; 0x7f
 8000e4e:	bfc2      	ittt	gt
 8000e50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e58:	4770      	bxgt	lr
 8000e5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	3a01      	subs	r2, #1
 8000e64:	e737      	b.n	8000cd6 <__aeabi_fmul+0x92>
 8000e66:	f092 0f00 	teq	r2, #0
 8000e6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e6e:	bf02      	ittt	eq
 8000e70:	0040      	lsleq	r0, r0, #1
 8000e72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e76:	3a01      	subeq	r2, #1
 8000e78:	d0f9      	beq.n	8000e6e <__aeabi_fdiv+0xc2>
 8000e7a:	ea40 000c 	orr.w	r0, r0, ip
 8000e7e:	f093 0f00 	teq	r3, #0
 8000e82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	bf02      	ittt	eq
 8000e88:	0049      	lsleq	r1, r1, #1
 8000e8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e8e:	3b01      	subeq	r3, #1
 8000e90:	d0f9      	beq.n	8000e86 <__aeabi_fdiv+0xda>
 8000e92:	ea41 010c 	orr.w	r1, r1, ip
 8000e96:	e795      	b.n	8000dc4 <__aeabi_fdiv+0x18>
 8000e98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e9c:	ea92 0f0c 	teq	r2, ip
 8000ea0:	d108      	bne.n	8000eb4 <__aeabi_fdiv+0x108>
 8000ea2:	0242      	lsls	r2, r0, #9
 8000ea4:	f47f af7d 	bne.w	8000da2 <__aeabi_fmul+0x15e>
 8000ea8:	ea93 0f0c 	teq	r3, ip
 8000eac:	f47f af70 	bne.w	8000d90 <__aeabi_fmul+0x14c>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e776      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000eb4:	ea93 0f0c 	teq	r3, ip
 8000eb8:	d104      	bne.n	8000ec4 <__aeabi_fdiv+0x118>
 8000eba:	024b      	lsls	r3, r1, #9
 8000ebc:	f43f af4c 	beq.w	8000d58 <__aeabi_fmul+0x114>
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e76e      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1ca      	bne.n	8000e66 <__aeabi_fdiv+0xba>
 8000ed0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ed4:	f47f af5c 	bne.w	8000d90 <__aeabi_fmul+0x14c>
 8000ed8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000edc:	f47f af3c 	bne.w	8000d58 <__aeabi_fmul+0x114>
 8000ee0:	e75f      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000ee2:	bf00      	nop

08000ee4 <__gesf2>:
 8000ee4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ee8:	e006      	b.n	8000ef8 <__cmpsf2+0x4>
 8000eea:	bf00      	nop

08000eec <__lesf2>:
 8000eec:	f04f 0c01 	mov.w	ip, #1
 8000ef0:	e002      	b.n	8000ef8 <__cmpsf2+0x4>
 8000ef2:	bf00      	nop

08000ef4 <__cmpsf2>:
 8000ef4:	f04f 0c01 	mov.w	ip, #1
 8000ef8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000efc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f08:	bf18      	it	ne
 8000f0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f0e:	d011      	beq.n	8000f34 <__cmpsf2+0x40>
 8000f10:	b001      	add	sp, #4
 8000f12:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f16:	bf18      	it	ne
 8000f18:	ea90 0f01 	teqne	r0, r1
 8000f1c:	bf58      	it	pl
 8000f1e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f22:	bf88      	it	hi
 8000f24:	17c8      	asrhi	r0, r1, #31
 8000f26:	bf38      	it	cc
 8000f28:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f2c:	bf18      	it	ne
 8000f2e:	f040 0001 	orrne.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f38:	d102      	bne.n	8000f40 <__cmpsf2+0x4c>
 8000f3a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f3e:	d105      	bne.n	8000f4c <__cmpsf2+0x58>
 8000f40:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f44:	d1e4      	bne.n	8000f10 <__cmpsf2+0x1c>
 8000f46:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f4a:	d0e1      	beq.n	8000f10 <__cmpsf2+0x1c>
 8000f4c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <__aeabi_cfrcmple>:
 8000f54:	4684      	mov	ip, r0
 8000f56:	4608      	mov	r0, r1
 8000f58:	4661      	mov	r1, ip
 8000f5a:	e7ff      	b.n	8000f5c <__aeabi_cfcmpeq>

08000f5c <__aeabi_cfcmpeq>:
 8000f5c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f5e:	f7ff ffc9 	bl	8000ef4 <__cmpsf2>
 8000f62:	2800      	cmp	r0, #0
 8000f64:	bf48      	it	mi
 8000f66:	f110 0f00 	cmnmi.w	r0, #0
 8000f6a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f6c <__aeabi_fcmpeq>:
 8000f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f70:	f7ff fff4 	bl	8000f5c <__aeabi_cfcmpeq>
 8000f74:	bf0c      	ite	eq
 8000f76:	2001      	moveq	r0, #1
 8000f78:	2000      	movne	r0, #0
 8000f7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7e:	bf00      	nop

08000f80 <__aeabi_fcmplt>:
 8000f80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f84:	f7ff ffea 	bl	8000f5c <__aeabi_cfcmpeq>
 8000f88:	bf34      	ite	cc
 8000f8a:	2001      	movcc	r0, #1
 8000f8c:	2000      	movcs	r0, #0
 8000f8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f92:	bf00      	nop

08000f94 <__aeabi_fcmple>:
 8000f94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f98:	f7ff ffe0 	bl	8000f5c <__aeabi_cfcmpeq>
 8000f9c:	bf94      	ite	ls
 8000f9e:	2001      	movls	r0, #1
 8000fa0:	2000      	movhi	r0, #0
 8000fa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_fcmpge>:
 8000fa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fac:	f7ff ffd2 	bl	8000f54 <__aeabi_cfrcmple>
 8000fb0:	bf94      	ite	ls
 8000fb2:	2001      	movls	r0, #1
 8000fb4:	2000      	movhi	r0, #0
 8000fb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fba:	bf00      	nop

08000fbc <__aeabi_fcmpgt>:
 8000fbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc0:	f7ff ffc8 	bl	8000f54 <__aeabi_cfrcmple>
 8000fc4:	bf34      	ite	cc
 8000fc6:	2001      	movcc	r0, #1
 8000fc8:	2000      	movcs	r0, #0
 8000fca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fce:	bf00      	nop

08000fd0 <__aeabi_f2iz>:
 8000fd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fd8:	d30f      	bcc.n	8000ffa <__aeabi_f2iz+0x2a>
 8000fda:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fde:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fe2:	d90d      	bls.n	8001000 <__aeabi_f2iz+0x30>
 8000fe4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fe8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ff0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff4:	bf18      	it	ne
 8000ff6:	4240      	negne	r0, r0
 8000ff8:	4770      	bx	lr
 8000ffa:	f04f 0000 	mov.w	r0, #0
 8000ffe:	4770      	bx	lr
 8001000:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001004:	d101      	bne.n	800100a <__aeabi_f2iz+0x3a>
 8001006:	0242      	lsls	r2, r0, #9
 8001008:	d105      	bne.n	8001016 <__aeabi_f2iz+0x46>
 800100a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800100e:	bf08      	it	eq
 8001010:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001014:	4770      	bx	lr
 8001016:	f04f 0000 	mov.w	r0, #0
 800101a:	4770      	bx	lr

0800101c <__aeabi_f2uiz>:
 800101c:	0042      	lsls	r2, r0, #1
 800101e:	d20e      	bcs.n	800103e <__aeabi_f2uiz+0x22>
 8001020:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001024:	d30b      	bcc.n	800103e <__aeabi_f2uiz+0x22>
 8001026:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800102e:	d409      	bmi.n	8001044 <__aeabi_f2uiz+0x28>
 8001030:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001038:	fa23 f002 	lsr.w	r0, r3, r2
 800103c:	4770      	bx	lr
 800103e:	f04f 0000 	mov.w	r0, #0
 8001042:	4770      	bx	lr
 8001044:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001048:	d101      	bne.n	800104e <__aeabi_f2uiz+0x32>
 800104a:	0242      	lsls	r2, r0, #9
 800104c:	d102      	bne.n	8001054 <__aeabi_f2uiz+0x38>
 800104e:	f04f 30ff 	mov.w	r0, #4294967295
 8001052:	4770      	bx	lr
 8001054:	f04f 0000 	mov.w	r0, #0
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <FIRFilter_Init>:
#include "FIRFilter.h"

/* Designed filter coefficients*/
static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {-0.01238356f, 0.10332170f, 0.81812371f, 0.10332170f, -0.01238356f};

void FIRFilter_Init(FIRFilter *fir){
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	
	/* Clear filter buffer */
	for(uint8_t n=0; n<FIR_FILTER_LENGTH;n++){
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e008      	b.n	800107c <FIRFilter_Init+0x20>
		
		fir->buf[n] = 0.0f;
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f04f 0100 	mov.w	r1, #0
 8001072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t n=0; n<FIR_FILTER_LENGTH;n++){
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	3301      	adds	r3, #1
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	2b04      	cmp	r3, #4
 8001080:	d9f3      	bls.n	800106a <FIRFilter_Init+0xe>
	
	}
	
	/* Reset buffer index */
	fir->bufindex = 0;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	751a      	strb	r2, [r3, #20]
	
	/* Clear filter output */
	fir->out = 0.0f;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
	...

0800109c <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter *fir, float inp){
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	
	/* Store latest sample in buffer */
	fir->buf[fir->bufindex] = inp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7d1b      	ldrb	r3, [r3, #20]
 80010aa:	4619      	mov	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	
	/* Increment buffer index and wrap around if necessary */
	fir->bufindex++;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7d1b      	ldrb	r3, [r3, #20]
 80010b8:	3301      	adds	r3, #1
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	751a      	strb	r2, [r3, #20]
	
	if(fir->bufindex == FIR_FILTER_LENGTH){
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	7d1b      	ldrb	r3, [r3, #20]
 80010c4:	2b05      	cmp	r3, #5
 80010c6:	d102      	bne.n	80010ce <FIRFilter_Update+0x32>
		
		fir->bufindex = 0;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	751a      	strb	r2, [r3, #20]
		
	}
	
	/* Compute new output sample (via convolution) */
	fir->out = 0.0f;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
	
	uint8_t sumIndex = fir->bufindex;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7d1b      	ldrb	r3, [r3, #20]
 80010da:	73fb      	strb	r3, [r7, #15]
	
	for(uint8_t n=0; n<FIR_FILTER_LENGTH;n++){
 80010dc:	2300      	movs	r3, #0
 80010de:	73bb      	strb	r3, [r7, #14]
 80010e0:	e021      	b.n	8001126 <FIRFilter_Update+0x8a>
		
		/* Decrement index and wrap if necessary */
		if(sumIndex>0){
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <FIRFilter_Update+0x54>
			
			sumIndex--;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	73fb      	strb	r3, [r7, #15]
 80010ee:	e001      	b.n	80010f4 <FIRFilter_Update+0x58>
			
		}else{
			
			sumIndex = FIR_FILTER_LENGTH -1;
 80010f0:	2304      	movs	r3, #4
 80010f2:	73fb      	strb	r3, [r7, #15]
			
		}
		
		/* Multiply impulse response with shifted input sample and add to output */
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	699c      	ldr	r4, [r3, #24]
 80010f8:	7bbb      	ldrb	r3, [r7, #14]
 80010fa:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <FIRFilter_Update+0x9c>)
 80010fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001100:	7bfa      	ldrb	r2, [r7, #15]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fd9b 	bl	8000c44 <__aeabi_fmul>
 800110e:	4603      	mov	r3, r0
 8001110:	4619      	mov	r1, r3
 8001112:	4620      	mov	r0, r4
 8001114:	f7ff fc8e 	bl	8000a34 <__addsf3>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	619a      	str	r2, [r3, #24]
	for(uint8_t n=0; n<FIR_FILTER_LENGTH;n++){
 8001120:	7bbb      	ldrb	r3, [r7, #14]
 8001122:	3301      	adds	r3, #1
 8001124:	73bb      	strb	r3, [r7, #14]
 8001126:	7bbb      	ldrb	r3, [r7, #14]
 8001128:	2b04      	cmp	r3, #4
 800112a:	d9da      	bls.n	80010e2 <FIRFilter_Update+0x46>
	}
	
	/* Return filtered output */
	return fir->out;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	699b      	ldr	r3, [r3, #24]
	
}
 8001130:	4618      	mov	r0, r3
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	bd90      	pop	{r4, r7, pc}
 8001138:	20000000 	.word	0x20000000

0800113c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4a06      	ldr	r2, [pc, #24]	; (8001164 <vApplicationGetIdleTaskMemory+0x28>)
 800114c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	4a05      	ldr	r2, [pc, #20]	; (8001168 <vApplicationGetIdleTaskMemory+0x2c>)
 8001152:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	200000a4 	.word	0x200000a4
 8001168:	200000f8 	.word	0x200000f8

0800116c <main>:

/**
 * @brief  ponto de entrada da aplicação.
 * @retval int
 */
int main(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af02      	add	r7, sp, #8
	/* Reinicia todos os periféricos, inicializa a interface flash e o systick */
	HAL_Init();
 8001172:	f000 fe81 	bl	8001e78 <HAL_Init>

	/* Configura o clock do sistema */
	SystemClock_Config();
 8001176:	f000 f891 	bl	800129c <SystemClock_Config>

	/* Inicializa todos os periféricos configurados */
	MX_GPIO_Init();
 800117a:	f000 f9d7 	bl	800152c <MX_GPIO_Init>
	MX_ADC1_Init();
 800117e:	f000 f8e9 	bl	8001354 <MX_ADC1_Init>
	MX_TIM1_Init();
 8001182:	f000 f925 	bl	80013d0 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8001186:	f000 f9a7 	bl	80014d8 <MX_USART1_UART_Init>

	DWT_CTRL |= (1<<0);
 800118a:	4b32      	ldr	r3, [pc, #200]	; (8001254 <main+0xe8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a31      	ldr	r2, [pc, #196]	; (8001254 <main+0xe8>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6013      	str	r3, [r2, #0]

	/* Inicializa o conversor AD */
	if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 8001196:	4830      	ldr	r0, [pc, #192]	; (8001258 <main+0xec>)
 8001198:	f000 ff78 	bl	800208c <HAL_ADC_Start>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <main+0x3a>
		Error_Handler();
 80011a2:	f000 fc77 	bl	8001a94 <Error_Handler>
	}

	/* Inicializa o timer1 em modo PWM */
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) {
 80011a6:	2100      	movs	r1, #0
 80011a8:	482c      	ldr	r0, [pc, #176]	; (800125c <main+0xf0>)
 80011aa:	f002 fbe5 	bl	8003978 <HAL_TIM_PWM_Start>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <main+0x4c>
		Error_Handler();
 80011b4:	f000 fc6e 	bl	8001a94 <Error_Handler>
	}

	/* Inicializa o filtro FIR */
	FIRFilter_Init(&tempFilter);
 80011b8:	4829      	ldr	r0, [pc, #164]	; (8001260 <main+0xf4>)
 80011ba:	f7ff ff4f 	bl	800105c <FIRFilter_Init>

	SEGGER_SYSVIEW_Conf();
 80011be:	f005 faf3 	bl	80067a8 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 80011c2:	f006 fa07 	bl	80075d4 <SEGGER_SYSVIEW_Start>

	/* Cria a fila de leituras de temperatura bruta */
	tempQueue = xQueueCreate(1, sizeof(float));
 80011c6:	2200      	movs	r2, #0
 80011c8:	2104      	movs	r1, #4
 80011ca:	2001      	movs	r0, #1
 80011cc:	f003 fbfe 	bl	80049cc <xQueueGenericCreate>
 80011d0:	4602      	mov	r2, r0
 80011d2:	4b24      	ldr	r3, [pc, #144]	; (8001264 <main+0xf8>)
 80011d4:	601a      	str	r2, [r3, #0]
	if (tempQueue == 0) {
 80011d6:	4b23      	ldr	r3, [pc, #140]	; (8001264 <main+0xf8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <main+0x76>
		Error_Handler();
 80011de:	f000 fc59 	bl	8001a94 <Error_Handler>
	}

	/* Cria a fila de leituras de temperatura filtrada */
	filteredTempQueue = xQueueCreate(1, sizeof(float));
 80011e2:	2200      	movs	r2, #0
 80011e4:	2104      	movs	r1, #4
 80011e6:	2001      	movs	r0, #1
 80011e8:	f003 fbf0 	bl	80049cc <xQueueGenericCreate>
 80011ec:	4602      	mov	r2, r0
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <main+0xfc>)
 80011f0:	601a      	str	r2, [r3, #0]
	if (tempQueue == 0) {
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <main+0xf8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <main+0x92>
		Error_Handler();
 80011fa:	f000 fc4b 	bl	8001a94 <Error_Handler>
	}

	/* Cria tasks na pilha do sistema */
	xTaskCreate(Temp_taskF, "TempTask", 128, NULL, 3, &Temp_Task);
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <main+0x100>)
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	2303      	movs	r3, #3
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2300      	movs	r3, #0
 8001208:	2280      	movs	r2, #128	; 0x80
 800120a:	4919      	ldr	r1, [pc, #100]	; (8001270 <main+0x104>)
 800120c:	4819      	ldr	r0, [pc, #100]	; (8001274 <main+0x108>)
 800120e:	f003 ffde 	bl	80051ce <xTaskCreate>
	xTaskCreate(Filter_taskF, "FilterTask", 128, NULL, 2, &Filter_Task);
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <main+0x10c>)
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	2302      	movs	r3, #2
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	4917      	ldr	r1, [pc, #92]	; (800127c <main+0x110>)
 8001220:	4817      	ldr	r0, [pc, #92]	; (8001280 <main+0x114>)
 8001222:	f003 ffd4 	bl	80051ce <xTaskCreate>
	xTaskCreate(Control_taskF, "ControlTask", 128, NULL, 4, &Control_Task);
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <main+0x118>)
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	2304      	movs	r3, #4
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2300      	movs	r3, #0
 8001230:	2280      	movs	r2, #128	; 0x80
 8001232:	4915      	ldr	r1, [pc, #84]	; (8001288 <main+0x11c>)
 8001234:	4815      	ldr	r0, [pc, #84]	; (800128c <main+0x120>)
 8001236:	f003 ffca 	bl	80051ce <xTaskCreate>
	xTaskCreate(Display_taskF, "DisplayTask", 128, NULL, 1, &Display_Task);
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <main+0x124>)
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	2301      	movs	r3, #1
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2300      	movs	r3, #0
 8001244:	2280      	movs	r2, #128	; 0x80
 8001246:	4913      	ldr	r1, [pc, #76]	; (8001294 <main+0x128>)
 8001248:	4813      	ldr	r0, [pc, #76]	; (8001298 <main+0x12c>)
 800124a:	f003 ffc0 	bl	80051ce <xTaskCreate>

	/* Inicializa o escalonador */
	vTaskStartScheduler();
 800124e:	f004 f941 	bl	80054d4 <vTaskStartScheduler>

	/* Loop infinito */
	while (1) {
 8001252:	e7fe      	b.n	8001252 <main+0xe6>
 8001254:	e0001000 	.word	0xe0001000
 8001258:	20002a38 	.word	0x20002a38
 800125c:	20002ad0 	.word	0x20002ad0
 8001260:	20002ab4 	.word	0x20002ab4
 8001264:	20002a34 	.word	0x20002a34
 8001268:	20002a68 	.word	0x20002a68
 800126c:	20002b1c 	.word	0x20002b1c
 8001270:	08008a28 	.word	0x08008a28
 8001274:	0800163d 	.word	0x0800163d
 8001278:	20002b20 	.word	0x20002b20
 800127c:	08008a34 	.word	0x08008a34
 8001280:	08001719 	.word	0x08001719
 8001284:	20002b18 	.word	0x20002b18
 8001288:	08008a40 	.word	0x08008a40
 800128c:	08001781 	.word	0x08001781
 8001290:	20002ab0 	.word	0x20002ab0
 8001294:	08008a4c 	.word	0x08008a4c
 8001298:	0800193d 	.word	0x0800193d

0800129c <SystemClock_Config>:

/**
 * @brief Configuração do clock do sistema
 * @retval None
 */
void SystemClock_Config(void) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b094      	sub	sp, #80	; 0x50
 80012a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a6:	2228      	movs	r2, #40	; 0x28
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f006 ffa0 	bl	80081f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012cc:	2301      	movs	r3, #1
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012da:	2301      	movs	r3, #1
 80012dc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012de:	2302      	movs	r3, #2
 80012e0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f2:	4618      	mov	r0, r3
 80012f4:	f001 fc88 	bl	8002c08 <HAL_RCC_OscConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <SystemClock_Config+0x66>
		Error_Handler();
 80012fe:	f000 fbc9 	bl	8001a94 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001302:	230f      	movs	r3, #15
 8001304:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001306:	2302      	movs	r3, #2
 8001308:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800130e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001312:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2102      	movs	r1, #2
 800131e:	4618      	mov	r0, r3
 8001320:	f001 fef2 	bl	8003108 <HAL_RCC_ClockConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <SystemClock_Config+0x92>
		Error_Handler();
 800132a:	f000 fbb3 	bl	8001a94 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800132e:	2302      	movs	r3, #2
 8001330:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001336:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	4618      	mov	r0, r3
 800133c:	f002 f8b0 	bl	80034a0 <HAL_RCCEx_PeriphCLKConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <SystemClock_Config+0xae>
		Error_Handler();
 8001346:	f000 fba5 	bl	8001a94 <Error_Handler>
	}
}
 800134a:	bf00      	nop
 800134c:	3750      	adds	r7, #80	; 0x50
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <MX_ADC1_Init>:
/**
 * @brief Função de inicialização do conversor AD
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]

	hadc1.Instance = ADC1;
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <MX_ADC1_Init+0x74>)
 8001366:	4a19      	ldr	r2, [pc, #100]	; (80013cc <MX_ADC1_Init+0x78>)
 8001368:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <MX_ADC1_Init+0x74>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <MX_ADC1_Init+0x74>)
 8001372:	2201      	movs	r2, #1
 8001374:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <MX_ADC1_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <MX_ADC1_Init+0x74>)
 800137e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001382:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001384:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <MX_ADC1_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_ADC1_Init+0x74>)
 800138c:	2201      	movs	r2, #1
 800138e:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001390:	480d      	ldr	r0, [pc, #52]	; (80013c8 <MX_ADC1_Init+0x74>)
 8001392:	f000 fda3 	bl	8001edc <HAL_ADC_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_ADC1_Init+0x4c>
		Error_Handler();
 800139c:	f000 fb7a 	bl	8001a94 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80013a8:	2303      	movs	r3, #3
 80013aa:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_ADC1_Init+0x74>)
 80013b2:	f001 f82b 	bl	800240c <HAL_ADC_ConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_ADC1_Init+0x6c>
		Error_Handler();
 80013bc:	f000 fb6a 	bl	8001a94 <Error_Handler>
	}
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20002a38 	.word	0x20002a38
 80013cc:	40012400 	.word	0x40012400

080013d0 <MX_TIM1_Init>:
/**
 * @brief Função de inicialização do timer 1
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b092      	sub	sp, #72	; 0x48
 80013d4:	af00      	add	r7, sp, #0

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80013e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
 80013f0:	615a      	str	r2, [r3, #20]
 80013f2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2220      	movs	r2, #32
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f006 fef8 	bl	80081f0 <memset>

	htim1.Instance = TIM1;
 8001400:	4b33      	ldr	r3, [pc, #204]	; (80014d0 <MX_TIM1_Init+0x100>)
 8001402:	4a34      	ldr	r2, [pc, #208]	; (80014d4 <MX_TIM1_Init+0x104>)
 8001404:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1;
 8001406:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <MX_TIM1_Init+0x100>)
 8001408:	2201      	movs	r2, #1
 800140a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140c:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <MX_TIM1_Init+0x100>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 18000 - 1;
 8001412:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <MX_TIM1_Init+0x100>)
 8001414:	f244 624f 	movw	r2, #17999	; 0x464f
 8001418:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141a:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <MX_TIM1_Init+0x100>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001420:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <MX_TIM1_Init+0x100>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001426:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <MX_TIM1_Init+0x100>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800142c:	4828      	ldr	r0, [pc, #160]	; (80014d0 <MX_TIM1_Init+0x100>)
 800142e:	f002 fa53 	bl	80038d8 <HAL_TIM_PWM_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM1_Init+0x6c>
		Error_Handler();
 8001438:	f000 fb2c 	bl	8001a94 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143c:	2300      	movs	r3, #0
 800143e:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001444:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001448:	4619      	mov	r1, r3
 800144a:	4821      	ldr	r0, [pc, #132]	; (80014d0 <MX_TIM1_Init+0x100>)
 800144c:	f002 ff2e 	bl	80042ac <HAL_TIMEx_MasterConfigSynchronization>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001456:	f000 fb1d 	bl	8001a94 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145a:	2360      	movs	r3, #96	; 0x60
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001462:	2300      	movs	r3, #0
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001466:	2300      	movs	r3, #0
 8001468:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	2200      	movs	r2, #0
 800147c:	4619      	mov	r1, r3
 800147e:	4814      	ldr	r0, [pc, #80]	; (80014d0 <MX_TIM1_Init+0x100>)
 8001480:	f002 fc24 	bl	8003ccc <HAL_TIM_PWM_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 800148a:	f000 fb03 	bl	8001a94 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a6:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	4619      	mov	r1, r3
 80014b0:	4807      	ldr	r0, [pc, #28]	; (80014d0 <MX_TIM1_Init+0x100>)
 80014b2:	f002 ff59 	bl	8004368 <HAL_TIMEx_ConfigBreakDeadTime>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM1_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 80014bc:	f000 faea 	bl	8001a94 <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim1);
 80014c0:	4803      	ldr	r0, [pc, #12]	; (80014d0 <MX_TIM1_Init+0x100>)
 80014c2:	f000 fb7f 	bl	8001bc4 <HAL_TIM_MspPostInit>
}
 80014c6:	bf00      	nop
 80014c8:	3748      	adds	r7, #72	; 0x48
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20002ad0 	.word	0x20002ad0
 80014d4:	40012c00 	.word	0x40012c00

080014d8 <MX_USART1_UART_Init>:
/**
 * @brief Função de inicialização UART1
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <MX_USART1_UART_Init+0x50>)
 80014e0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX;
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014fe:	2208      	movs	r2, #8
 8001500:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 8001510:	f002 ff8d 	bl	800442e <HAL_UART_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800151a:	f000 fabb 	bl	8001a94 <Error_Handler>
	}
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20002a6c 	.word	0x20002a6c
 8001528:	40013800 	.word	0x40013800

0800152c <MX_GPIO_Init>:
/**
 * @brief Função de inicialização das portas gerais
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001532:	f107 0310 	add.w	r3, r7, #16
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001540:	4b3b      	ldr	r3, [pc, #236]	; (8001630 <MX_GPIO_Init+0x104>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4a3a      	ldr	r2, [pc, #232]	; (8001630 <MX_GPIO_Init+0x104>)
 8001546:	f043 0310 	orr.w	r3, r3, #16
 800154a:	6193      	str	r3, [r2, #24]
 800154c:	4b38      	ldr	r3, [pc, #224]	; (8001630 <MX_GPIO_Init+0x104>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001558:	4b35      	ldr	r3, [pc, #212]	; (8001630 <MX_GPIO_Init+0x104>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4a34      	ldr	r2, [pc, #208]	; (8001630 <MX_GPIO_Init+0x104>)
 800155e:	f043 0320 	orr.w	r3, r3, #32
 8001562:	6193      	str	r3, [r2, #24]
 8001564:	4b32      	ldr	r3, [pc, #200]	; (8001630 <MX_GPIO_Init+0x104>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f003 0320 	and.w	r3, r3, #32
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001570:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <MX_GPIO_Init+0x104>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a2e      	ldr	r2, [pc, #184]	; (8001630 <MX_GPIO_Init+0x104>)
 8001576:	f043 0304 	orr.w	r3, r3, #4
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <MX_GPIO_Init+0x104>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001588:	4b29      	ldr	r3, [pc, #164]	; (8001630 <MX_GPIO_Init+0x104>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a28      	ldr	r2, [pc, #160]	; (8001630 <MX_GPIO_Init+0x104>)
 800158e:	f043 0308 	orr.w	r3, r3, #8
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b26      	ldr	r3, [pc, #152]	; (8001630 <MX_GPIO_Init+0x104>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015a6:	4823      	ldr	r0, [pc, #140]	; (8001634 <MX_GPIO_Init+0x108>)
 80015a8:	f001 fb15 	bl	8002bd6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2108      	movs	r1, #8
 80015b0:	4821      	ldr	r0, [pc, #132]	; (8001638 <MX_GPIO_Init+0x10c>)
 80015b2:	f001 fb10 	bl	8002bd6 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015ba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	4619      	mov	r1, r3
 80015ce:	4819      	ldr	r0, [pc, #100]	; (8001634 <MX_GPIO_Init+0x108>)
 80015d0:	f001 f990 	bl	80028f4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015d4:	2308      	movs	r3, #8
 80015d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2302      	movs	r3, #2
 80015e2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	4619      	mov	r1, r3
 80015ea:	4813      	ldr	r0, [pc, #76]	; (8001638 <MX_GPIO_Init+0x10c>)
 80015ec:	f001 f982 	bl	80028f4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015f0:	2310      	movs	r3, #16
 80015f2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	4619      	mov	r1, r3
 8001602:	480d      	ldr	r0, [pc, #52]	; (8001638 <MX_GPIO_Init+0x10c>)
 8001604:	f001 f976 	bl	80028f4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800160c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2302      	movs	r3, #2
 8001618:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_GPIO_Init+0x10c>)
 8001622:	f001 f967 	bl	80028f4 <HAL_GPIO_Init>
}
 8001626:	bf00      	nop
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000
 8001634:	40010800 	.word	0x40010800
 8001638:	40010c00 	.word	0x40010c00

0800163c <Temp_taskF>:
 * 	      MAX6675 atravez de um bitbanging do protocolo SPI, ao fim da conversão o valor
 * 	      é adicionado a fila tempQueue
 * @param *pvParameters: (não utilizado) permite iniciar a função com valor inical
 * @retval None
 */
void Temp_taskF(void *pvParameters) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	while (1) {
		uint8_t tempdata[16];
		uint16_t temp16 = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	84fb      	strh	r3, [r7, #38]	; 0x26

		/* bitbanging protocolo SPI */
		CSen
 8001648:	2200      	movs	r2, #0
 800164a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800164e:	482f      	ldr	r0, [pc, #188]	; (800170c <Temp_taskF+0xd0>)
 8001650:	f001 fac1 	bl	8002bd6 <HAL_GPIO_WritePin>
		for (int i = 0; i < 16; i++) {
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
 8001658:	e018      	b.n	800168c <Temp_taskF+0x50>
			SCK_H
 800165a:	2200      	movs	r2, #0
 800165c:	2108      	movs	r1, #8
 800165e:	482c      	ldr	r0, [pc, #176]	; (8001710 <Temp_taskF+0xd4>)
 8001660:	f001 fab9 	bl	8002bd6 <HAL_GPIO_WritePin>
			tempdata[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8001664:	2110      	movs	r1, #16
 8001666:	482a      	ldr	r0, [pc, #168]	; (8001710 <Temp_taskF+0xd4>)
 8001668:	f001 fa9e 	bl	8002ba8 <HAL_GPIO_ReadPin>
 800166c:	4603      	mov	r3, r0
 800166e:	4619      	mov	r1, r3
 8001670:	f107 020c 	add.w	r2, r7, #12
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	4413      	add	r3, r2
 8001678:	460a      	mov	r2, r1
 800167a:	701a      	strb	r2, [r3, #0]
			SCK_L
 800167c:	2201      	movs	r2, #1
 800167e:	2108      	movs	r1, #8
 8001680:	4823      	ldr	r0, [pc, #140]	; (8001710 <Temp_taskF+0xd4>)
 8001682:	f001 faa8 	bl	8002bd6 <HAL_GPIO_WritePin>
		for (int i = 0; i < 16; i++) {
 8001686:	6a3b      	ldr	r3, [r7, #32]
 8001688:	3301      	adds	r3, #1
 800168a:	623b      	str	r3, [r7, #32]
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	2b0f      	cmp	r3, #15
 8001690:	dde3      	ble.n	800165a <Temp_taskF+0x1e>
		}
		CSdis
 8001692:	2201      	movs	r2, #1
 8001694:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001698:	481c      	ldr	r0, [pc, #112]	; (800170c <Temp_taskF+0xd0>)
 800169a:	f001 fa9c 	bl	8002bd6 <HAL_GPIO_WritePin>

		/* Conversão temperatura */
		if (tempdata[13] == 0) {
 800169e:	7e7b      	ldrb	r3, [r7, #25]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d11b      	bne.n	80016dc <Temp_taskF+0xa0>

			for (int n = 1; n < 13; n++) {
 80016a4:	2301      	movs	r3, #1
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	e015      	b.n	80016d6 <Temp_taskF+0x9a>
				temp16 += tempdata[n] * (2048 / (1 << (n - 1)));
 80016aa:	f107 020c 	add.w	r2, r7, #12
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	4413      	add	r3, r2
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	3a01      	subs	r2, #1
 80016ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016be:	fa41 f202 	asr.w	r2, r1, r2
 80016c2:	b292      	uxth	r2, r2
 80016c4:	fb02 f303 	mul.w	r3, r2, r3
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016cc:	4413      	add	r3, r2
 80016ce:	84fb      	strh	r3, [r7, #38]	; 0x26
			for (int n = 1; n < 13; n++) {
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	3301      	adds	r3, #1
 80016d4:	61fb      	str	r3, [r7, #28]
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	2b0c      	cmp	r3, #12
 80016da:	dde6      	ble.n	80016aa <Temp_taskF+0x6e>
			}

		}

		float temp = (float) temp16 / 4;
 80016dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fa58 	bl	8000b94 <__aeabi_ui2f>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fb5e 	bl	8000dac <__aeabi_fdiv>
 80016f0:	4603      	mov	r3, r0
 80016f2:	60bb      	str	r3, [r7, #8]

		/* Adiciona a fila tempQueue */
		if (xQueueSend(tempQueue, &temp, 10) == pdPASS) {
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <Temp_taskF+0xd8>)
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	f107 0108 	add.w	r1, r7, #8
 80016fc:	2300      	movs	r3, #0
 80016fe:	220a      	movs	r2, #10
 8001700:	f003 f9c6 	bl	8004a90 <xQueueGenericSend>
		}

		/* Atraso para definição do período da tarefa */
		vTaskDelay(200); /*5Hz frequency*/
 8001704:	20c8      	movs	r0, #200	; 0xc8
 8001706:	f003 fead 	bl	8005464 <vTaskDelay>
	while (1) {
 800170a:	e79b      	b.n	8001644 <Temp_taskF+0x8>
 800170c:	40010800 	.word	0x40010800
 8001710:	40010c00 	.word	0x40010c00
 8001714:	20002a34 	.word	0x20002a34

08001718 <Filter_taskF>:
 * 	      após 5 atualizações o valor é adicionado a fila filteredTempQueue
 *
 * @param *pvParameters: (não utilizado) permite iniciar a função com valor inical
 * @retval None
 */
void Filter_taskF(void *pvParameters) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	uint8_t aux = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]
	while (1) {
		float rx_temp;
		/* Recebe da fila filteredTempQueue */
		if (xQueueReceive(tempQueue, &rx_temp, 10)) {
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <Filter_taskF+0x54>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f107 0108 	add.w	r1, r7, #8
 800172c:	220a      	movs	r2, #10
 800172e:	4618      	mov	r0, r3
 8001730:	f003 fad0 	bl	8004cd4 <xQueueReceive>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00a      	beq.n	8001750 <Filter_taskF+0x38>
			aux++;
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	3301      	adds	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
			/* Chamada do filtro FIR */
			filteredTemp = FIRFilter_Update(&tempFilter, rx_temp);
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	4619      	mov	r1, r3
 8001744:	480a      	ldr	r0, [pc, #40]	; (8001770 <Filter_taskF+0x58>)
 8001746:	f7ff fca9 	bl	800109c <FIRFilter_Update>
 800174a:	4602      	mov	r2, r0
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <Filter_taskF+0x5c>)
 800174e:	601a      	str	r2, [r3, #0]

		}
		if (aux == 5) {
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	2b05      	cmp	r3, #5
 8001754:	d1e6      	bne.n	8001724 <Filter_taskF+0xc>

			aux = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	73fb      	strb	r3, [r7, #15]
			/* Adiciona a fila filteredTempQueue */
			if (xQueueSend(filteredTempQueue, &filteredTemp, 10) == pdPASS) {
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <Filter_taskF+0x60>)
 800175c:	6818      	ldr	r0, [r3, #0]
 800175e:	2300      	movs	r3, #0
 8001760:	220a      	movs	r2, #10
 8001762:	4904      	ldr	r1, [pc, #16]	; (8001774 <Filter_taskF+0x5c>)
 8001764:	f003 f994 	bl	8004a90 <xQueueGenericSend>
	while (1) {
 8001768:	e7dc      	b.n	8001724 <Filter_taskF+0xc>
 800176a:	bf00      	nop
 800176c:	20002a34 	.word	0x20002a34
 8001770:	20002ab4 	.word	0x20002ab4
 8001774:	200002f8 	.word	0x200002f8
 8001778:	20002a68 	.word	0x20002a68
 800177c:	00000000 	.word	0x00000000

08001780 <Control_taskF>:
 * 	      setando a razão cíclica da chave de saída ou ativando a ventoinha de resfrianmento
 *
 * @param *pvParameters: (não utilizado) permite iniciar a função com valor inical
 * @retval None
 */
void Control_taskF(void *pvParameters) {
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	while (1) {
		float rx_filteredTemp;
		/* Recebe da fila filteredTempQueue */
		if (xQueueReceive(filteredTempQueue, &rx_filteredTemp, 10)) {
 8001788:	4b5d      	ldr	r3, [pc, #372]	; (8001900 <Control_taskF+0x180>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f107 0108 	add.w	r1, r7, #8
 8001790:	220a      	movs	r2, #10
 8001792:	4618      	mov	r0, r3
 8001794:	f003 fa9e 	bl	8004cd4 <xQueueReceive>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f4      	beq.n	8001788 <Control_taskF+0x8>
			/* Leitura da entrada analógica para calculo de referencia */
			HAL_ADC_PollForConversion(&hadc1, 10);
 800179e:	210a      	movs	r1, #10
 80017a0:	4858      	ldr	r0, [pc, #352]	; (8001904 <Control_taskF+0x184>)
 80017a2:	f000 fd21 	bl	80021e8 <HAL_ADC_PollForConversion>
			ref = (float) HAL_ADC_GetValue(&hadc1) / 27.3; // leitura do potenciometro convertido em ref até 150°C
 80017a6:	4857      	ldr	r0, [pc, #348]	; (8001904 <Control_taskF+0x184>)
 80017a8:	f000 fe24 	bl	80023f4 <HAL_ADC_GetValue>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff f9f0 	bl	8000b94 <__aeabi_ui2f>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fe7c 	bl	80004b4 <__aeabi_f2d>
 80017bc:	a34e      	add	r3, pc, #312	; (adr r3, 80018f8 <Control_taskF+0x178>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	f7fe fff9 	bl	80007b8 <__aeabi_ddiv>
 80017c6:	4603      	mov	r3, r0
 80017c8:	460c      	mov	r4, r1
 80017ca:	4618      	mov	r0, r3
 80017cc:	4621      	mov	r1, r4
 80017ce:	f7ff f8db 	bl	8000988 <__aeabi_d2f>
 80017d2:	4602      	mov	r2, r0
 80017d4:	4b4c      	ldr	r3, [pc, #304]	; (8001908 <Control_taskF+0x188>)
 80017d6:	601a      	str	r2, [r3, #0]

			/* Lei de controle */
			float u;
			static float up, uint;
			int flag_sat;
			float ek = ref - rx_filteredTemp;
 80017d8:	4b4b      	ldr	r3, [pc, #300]	; (8001908 <Control_taskF+0x188>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68ba      	ldr	r2, [r7, #8]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff f925 	bl	8000a30 <__aeabi_fsub>
 80017e6:	4603      	mov	r3, r0
 80017e8:	60fb      	str	r3, [r7, #12]

			/* Controlador bang-bang ventoinha */
			if (ek < -15.0) {
 80017ea:	4948      	ldr	r1, [pc, #288]	; (800190c <Control_taskF+0x18c>)
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f7ff fbc7 	bl	8000f80 <__aeabi_fcmplt>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d006      	beq.n	8001806 <Control_taskF+0x86>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80017f8:	2201      	movs	r2, #1
 80017fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017fe:	4844      	ldr	r0, [pc, #272]	; (8001910 <Control_taskF+0x190>)
 8001800:	f001 f9e9 	bl	8002bd6 <HAL_GPIO_WritePin>
 8001804:	e005      	b.n	8001812 <Control_taskF+0x92>
			} else {
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800180c:	4840      	ldr	r0, [pc, #256]	; (8001910 <Control_taskF+0x190>)
 800180e:	f001 f9e2 	bl	8002bd6 <HAL_GPIO_WritePin>
			}

			/* Anti-windup integrador */
			if (!flag_sat) {
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d110      	bne.n	800183a <Control_taskF+0xba>
				uint = uint * p1 + r1 * ek;
 8001818:	493e      	ldr	r1, [pc, #248]	; (8001914 <Control_taskF+0x194>)
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f7ff fa12 	bl	8000c44 <__aeabi_fmul>
 8001820:	4603      	mov	r3, r0
 8001822:	461a      	mov	r2, r3
 8001824:	4b3c      	ldr	r3, [pc, #240]	; (8001918 <Control_taskF+0x198>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	4610      	mov	r0, r2
 800182c:	f7ff f902 	bl	8000a34 <__addsf3>
 8001830:	4603      	mov	r3, r0
 8001832:	461a      	mov	r2, r3
 8001834:	4b38      	ldr	r3, [pc, #224]	; (8001918 <Control_taskF+0x198>)
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	e017      	b.n	800186a <Control_taskF+0xea>

			} else if (flag_sat) {
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d014      	beq.n	800186a <Control_taskF+0xea>
				uint = (uint * p1 + r1 * ek) * ksat;
 8001840:	4934      	ldr	r1, [pc, #208]	; (8001914 <Control_taskF+0x194>)
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f7ff f9fe 	bl	8000c44 <__aeabi_fmul>
 8001848:	4603      	mov	r3, r0
 800184a:	461a      	mov	r2, r3
 800184c:	4b32      	ldr	r3, [pc, #200]	; (8001918 <Control_taskF+0x198>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	4610      	mov	r0, r2
 8001854:	f7ff f8ee 	bl	8000a34 <__addsf3>
 8001858:	4603      	mov	r3, r0
 800185a:	4930      	ldr	r1, [pc, #192]	; (800191c <Control_taskF+0x19c>)
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff f9f1 	bl	8000c44 <__aeabi_fmul>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <Control_taskF+0x198>)
 8001868:	601a      	str	r2, [r3, #0]
			}

			/* Proporcional */
			up = k * ek;
 800186a:	492d      	ldr	r1, [pc, #180]	; (8001920 <Control_taskF+0x1a0>)
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f7ff f9e9 	bl	8000c44 <__aeabi_fmul>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <Control_taskF+0x1a4>)
 8001878:	601a      	str	r2, [r3, #0]


			/* Ação de controle */
			u = up + uint;
 800187a:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <Control_taskF+0x1a4>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b26      	ldr	r3, [pc, #152]	; (8001918 <Control_taskF+0x198>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4619      	mov	r1, r3
 8001884:	4610      	mov	r0, r2
 8001886:	f7ff f8d5 	bl	8000a34 <__addsf3>
 800188a:	4603      	mov	r3, r0
 800188c:	617b      	str	r3, [r7, #20]

			/* Conversão período PWM */
			u = u * 4500.0;
 800188e:	4926      	ldr	r1, [pc, #152]	; (8001928 <Control_taskF+0x1a8>)
 8001890:	6978      	ldr	r0, [r7, #20]
 8001892:	f7ff f9d7 	bl	8000c44 <__aeabi_fmul>
 8001896:	4603      	mov	r3, r0
 8001898:	617b      	str	r3, [r7, #20]

			/* Limites de saturação de PWM */
			if (u > 18000.0) {
 800189a:	4924      	ldr	r1, [pc, #144]	; (800192c <Control_taskF+0x1ac>)
 800189c:	6978      	ldr	r0, [r7, #20]
 800189e:	f7ff fb8d 	bl	8000fbc <__aeabi_fcmpgt>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d004      	beq.n	80018b2 <Control_taskF+0x132>
				u = 18000.0;
 80018a8:	4b20      	ldr	r3, [pc, #128]	; (800192c <Control_taskF+0x1ac>)
 80018aa:	617b      	str	r3, [r7, #20]
				flag_sat = 1;
 80018ac:	2301      	movs	r3, #1
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	e00f      	b.n	80018d2 <Control_taskF+0x152>
			} else if (u < 0.0) {
 80018b2:	f04f 0100 	mov.w	r1, #0
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7ff fb62 	bl	8000f80 <__aeabi_fcmplt>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d005      	beq.n	80018ce <Control_taskF+0x14e>
				u = 0.0;
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
				flag_sat = 1;
 80018c8:	2301      	movs	r3, #1
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	e001      	b.n	80018d2 <Control_taskF+0x152>
			} else {
				u = u;
				flag_sat = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
			}

			/* Converte periodo do timer em razão cíclica */
			dutyCycle = u / 180.0;
 80018d2:	4917      	ldr	r1, [pc, #92]	; (8001930 <Control_taskF+0x1b0>)
 80018d4:	6978      	ldr	r0, [r7, #20]
 80018d6:	f7ff fa69 	bl	8000dac <__aeabi_fdiv>
 80018da:	4603      	mov	r3, r0
 80018dc:	461a      	mov	r2, r3
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <Control_taskF+0x1b4>)
 80018e0:	601a      	str	r2, [r3, #0]

			/* Seta periférico PWM */
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint32_t ) u);
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <Control_taskF+0x1b8>)
 80018e4:	681c      	ldr	r4, [r3, #0]
 80018e6:	6978      	ldr	r0, [r7, #20]
 80018e8:	f7ff fb98 	bl	800101c <__aeabi_f2uiz>
 80018ec:	4603      	mov	r3, r0
 80018ee:	6363      	str	r3, [r4, #52]	; 0x34
	while (1) {
 80018f0:	e74a      	b.n	8001788 <Control_taskF+0x8>
 80018f2:	bf00      	nop
 80018f4:	f3af 8000 	nop.w
 80018f8:	cccccccd 	.word	0xcccccccd
 80018fc:	403b4ccc 	.word	0x403b4ccc
 8001900:	20002a68 	.word	0x20002a68
 8001904:	20002a38 	.word	0x20002a38
 8001908:	200002fc 	.word	0x200002fc
 800190c:	c1700000 	.word	0xc1700000
 8001910:	40010c00 	.word	0x40010c00
 8001914:	395c53a8 	.word	0x395c53a8
 8001918:	20000304 	.word	0x20000304
 800191c:	3dcccccd 	.word	0x3dcccccd
 8001920:	3d82b533 	.word	0x3d82b533
 8001924:	20000308 	.word	0x20000308
 8001928:	458ca000 	.word	0x458ca000
 800192c:	468ca000 	.word	0x468ca000
 8001930:	43340000 	.word	0x43340000
 8001934:	20000300 	.word	0x20000300
 8001938:	20002ad0 	.word	0x20002ad0

0800193c <Display_taskF>:
 * 		  variável manipulada(razão cíclica) e variável de processo (temperatura)
 *
 * @param *pvParameters: (não utilizado) permite iniciar a função com valor inical
 * @retval None
 */
void Display_taskF(void *pvParameters) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b09e      	sub	sp, #120	; 0x78
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	while (1) {
		char str[100];
		/* Fim de comando definido pela API do display */
		uint8_t Cmd_End[3] = { 0xFF, 0xFF, 0xFF };
 8001944:	4a41      	ldr	r2, [pc, #260]	; (8001a4c <Display_taskF+0x110>)
 8001946:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	4611      	mov	r1, r2
 800194e:	8019      	strh	r1, [r3, #0]
 8001950:	3302      	adds	r3, #2
 8001952:	0c12      	lsrs	r2, r2, #16
 8001954:	701a      	strb	r2, [r3, #0]

		/* Atualiza valor do setpoint */
		int32_t number = ref * 100;
 8001956:	4b3e      	ldr	r3, [pc, #248]	; (8001a50 <Display_taskF+0x114>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	493e      	ldr	r1, [pc, #248]	; (8001a54 <Display_taskF+0x118>)
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff f971 	bl	8000c44 <__aeabi_fmul>
 8001962:	4603      	mov	r3, r0
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fb33 	bl	8000fd0 <__aeabi_f2iz>
 800196a:	4603      	mov	r3, r0
 800196c:	677b      	str	r3, [r7, #116]	; 0x74
		sprintf(str, "setPoint.val=%ld", number);
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001974:	4938      	ldr	r1, [pc, #224]	; (8001a58 <Display_taskF+0x11c>)
 8001976:	4618      	mov	r0, r3
 8001978:	f006 fc42 	bl	8008200 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 10);
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fc2b 	bl	80001dc <strlen>
 8001986:	4603      	mov	r3, r0
 8001988:	b29a      	uxth	r2, r3
 800198a:	f107 010c 	add.w	r1, r7, #12
 800198e:	230a      	movs	r3, #10
 8001990:	4832      	ldr	r0, [pc, #200]	; (8001a5c <Display_taskF+0x120>)
 8001992:	f002 fd99 	bl	80044c8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, Cmd_End, 3, 10);
 8001996:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800199a:	230a      	movs	r3, #10
 800199c:	2203      	movs	r2, #3
 800199e:	482f      	ldr	r0, [pc, #188]	; (8001a5c <Display_taskF+0x120>)
 80019a0:	f002 fd92 	bl	80044c8 <HAL_UART_Transmit>

		/* Atualiza valor da variável de processo */
		number = filteredTemp * 100;
 80019a4:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <Display_taskF+0x124>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	492a      	ldr	r1, [pc, #168]	; (8001a54 <Display_taskF+0x118>)
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff f94a 	bl	8000c44 <__aeabi_fmul>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fb0c 	bl	8000fd0 <__aeabi_f2iz>
 80019b8:	4603      	mov	r3, r0
 80019ba:	677b      	str	r3, [r7, #116]	; 0x74
		sprintf(str, "filteredTemp.val=%ld", number);
 80019bc:	f107 030c 	add.w	r3, r7, #12
 80019c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80019c2:	4928      	ldr	r1, [pc, #160]	; (8001a64 <Display_taskF+0x128>)
 80019c4:	4618      	mov	r0, r3
 80019c6:	f006 fc1b 	bl	8008200 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 10);
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fc04 	bl	80001dc <strlen>
 80019d4:	4603      	mov	r3, r0
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	f107 010c 	add.w	r1, r7, #12
 80019dc:	230a      	movs	r3, #10
 80019de:	481f      	ldr	r0, [pc, #124]	; (8001a5c <Display_taskF+0x120>)
 80019e0:	f002 fd72 	bl	80044c8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, Cmd_End, 3, 10);
 80019e4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80019e8:	230a      	movs	r3, #10
 80019ea:	2203      	movs	r2, #3
 80019ec:	481b      	ldr	r0, [pc, #108]	; (8001a5c <Display_taskF+0x120>)
 80019ee:	f002 fd6b 	bl	80044c8 <HAL_UART_Transmit>

		/* Atualiza valor da variável manipulada */
		number = dutyCycle * 100;
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <Display_taskF+0x12c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4917      	ldr	r1, [pc, #92]	; (8001a54 <Display_taskF+0x118>)
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff f923 	bl	8000c44 <__aeabi_fmul>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fae5 	bl	8000fd0 <__aeabi_f2iz>
 8001a06:	4603      	mov	r3, r0
 8001a08:	677b      	str	r3, [r7, #116]	; 0x74
		sprintf(str, "dutyCycle.val=%ld", number);
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001a10:	4916      	ldr	r1, [pc, #88]	; (8001a6c <Display_taskF+0x130>)
 8001a12:	4618      	mov	r0, r3
 8001a14:	f006 fbf4 	bl	8008200 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 10);
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fbdd 	bl	80001dc <strlen>
 8001a22:	4603      	mov	r3, r0
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	f107 010c 	add.w	r1, r7, #12
 8001a2a:	230a      	movs	r3, #10
 8001a2c:	480b      	ldr	r0, [pc, #44]	; (8001a5c <Display_taskF+0x120>)
 8001a2e:	f002 fd4b 	bl	80044c8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, Cmd_End, 3, 10);
 8001a32:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001a36:	230a      	movs	r3, #10
 8001a38:	2203      	movs	r2, #3
 8001a3a:	4808      	ldr	r0, [pc, #32]	; (8001a5c <Display_taskF+0x120>)
 8001a3c:	f002 fd44 	bl	80044c8 <HAL_UART_Transmit>

		/* Atraso para definição do período da tarefa */
		vTaskDelay(1000); /*1Hz frequency*/
 8001a40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a44:	f003 fd0e 	bl	8005464 <vTaskDelay>
	while (1) {
 8001a48:	e77c      	b.n	8001944 <Display_taskF+0x8>
 8001a4a:	bf00      	nop
 8001a4c:	08008a98 	.word	0x08008a98
 8001a50:	200002fc 	.word	0x200002fc
 8001a54:	42c80000 	.word	0x42c80000
 8001a58:	08008a58 	.word	0x08008a58
 8001a5c:	20002a6c 	.word	0x20002a6c
 8001a60:	200002f8 	.word	0x200002f8
 8001a64:	08008a6c 	.word	0x08008a6c
 8001a68:	20000300 	.word	0x20000300
 8001a6c:	08008a84 	.word	0x08008a84

08001a70 <HAL_TIM_PeriodElapsedCallback>:
 * @brief  chamada da função de período
 * @note   Esta função atualiza o valor de "uwTick" utilizado como base de tempo do sistema
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001a82:	f000 fa0f 	bl	8001ea4 <HAL_IncTick>
	}
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40000800 	.word	0x40000800

08001a94 <Error_Handler>:

/**
 * @brief  Função executada em caso de erro na aplicação
 * @retval None
 */
void Error_Handler(void) {
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
	__disable_irq();
	while (1) {
 8001a9a:	e7fe      	b.n	8001a9a <Error_Handler+0x6>

08001a9c <HAL_MspInit>:
/* USER CODE END 0 */
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aa2:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <HAL_MspInit+0x68>)
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	4a17      	ldr	r2, [pc, #92]	; (8001b04 <HAL_MspInit+0x68>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6193      	str	r3, [r2, #24]
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <HAL_MspInit+0x68>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_MspInit+0x68>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	4a11      	ldr	r2, [pc, #68]	; (8001b04 <HAL_MspInit+0x68>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	61d3      	str	r3, [r2, #28]
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_MspInit+0x68>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	210f      	movs	r1, #15
 8001ad6:	f06f 0001 	mvn.w	r0, #1
 8001ada:	f000 fee0 	bl	800289e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <HAL_MspInit+0x6c>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <HAL_MspInit+0x6c>)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40010000 	.word	0x40010000

08001b0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a14      	ldr	r2, [pc, #80]	; (8001b78 <HAL_ADC_MspInit+0x6c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d121      	bne.n	8001b70 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <HAL_ADC_MspInit+0x70>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <HAL_ADC_MspInit+0x70>)
 8001b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b36:	6193      	str	r3, [r2, #24]
 8001b38:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <HAL_ADC_MspInit+0x70>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b44:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <HAL_ADC_MspInit+0x70>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4a0c      	ldr	r2, [pc, #48]	; (8001b7c <HAL_ADC_MspInit+0x70>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	6193      	str	r3, [r2, #24]
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <HAL_ADC_MspInit+0x70>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b60:	2303      	movs	r3, #3
 8001b62:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4805      	ldr	r0, [pc, #20]	; (8001b80 <HAL_ADC_MspInit+0x74>)
 8001b6c:	f000 fec2 	bl	80028f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b70:	bf00      	nop
 8001b72:	3720      	adds	r7, #32
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40012400 	.word	0x40012400
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40010800 	.word	0x40010800

08001b84 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <HAL_TIM_PWM_MspInit+0x38>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d10d      	bne.n	8001bb2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	4a09      	ldr	r2, [pc, #36]	; (8001bc0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ba0:	6193      	str	r3, [r2, #24]
 8001ba2:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */
    vInitPrioGroupValue();
 8001bae:	f004 fac3 	bl	8006138 <vInitPrioGroupValue>
  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40012c00 	.word	0x40012c00
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0310 	add.w	r3, r7, #16
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a10      	ldr	r2, [pc, #64]	; (8001c20 <HAL_TIM_MspPostInit+0x5c>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d118      	bne.n	8001c16 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be4:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <HAL_TIM_MspPostInit+0x60>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <HAL_TIM_MspPostInit+0x60>)
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <HAL_TIM_MspPostInit+0x60>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2302      	movs	r3, #2
 8001c08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 0310 	add.w	r3, r7, #16
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	; (8001c28 <HAL_TIM_MspPostInit+0x64>)
 8001c12:	f000 fe6f 	bl	80028f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c16:	bf00      	nop
 8001c18:	3720      	adds	r7, #32
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40012c00 	.word	0x40012c00
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40010800 	.word	0x40010800

08001c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1c      	ldr	r2, [pc, #112]	; (8001cb8 <HAL_UART_MspInit+0x8c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d131      	bne.n	8001cb0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <HAL_UART_MspInit+0x90>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a1a      	ldr	r2, [pc, #104]	; (8001cbc <HAL_UART_MspInit+0x90>)
 8001c52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <HAL_UART_MspInit+0x90>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c64:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <HAL_UART_MspInit+0x90>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a14      	ldr	r2, [pc, #80]	; (8001cbc <HAL_UART_MspInit+0x90>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6193      	str	r3, [r2, #24]
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_UART_MspInit+0x90>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8a:	f107 0310 	add.w	r3, r7, #16
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480b      	ldr	r0, [pc, #44]	; (8001cc0 <HAL_UART_MspInit+0x94>)
 8001c92:	f000 fe2f 	bl	80028f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <HAL_UART_MspInit+0x94>)
 8001cac:	f000 fe22 	bl	80028f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cb0:	bf00      	nop
 8001cb2:	3720      	adds	r7, #32
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40013800 	.word	0x40013800
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40010800 	.word	0x40010800

08001cc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08c      	sub	sp, #48	; 0x30
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	201e      	movs	r0, #30
 8001cda:	f000 fde0 	bl	800289e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cde:	201e      	movs	r0, #30
 8001ce0:	f000 fdf9 	bl	80028d6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <HAL_InitTick+0xa0>)
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	4a1e      	ldr	r2, [pc, #120]	; (8001d64 <HAL_InitTick+0xa0>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	61d3      	str	r3, [r2, #28]
 8001cf0:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <HAL_InitTick+0xa0>)
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cfc:	f107 0210 	add.w	r2, r7, #16
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4611      	mov	r1, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f001 fb7c 	bl	8003404 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d0c:	f001 fb52 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 8001d10:	4603      	mov	r3, r0
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d18:	4a13      	ldr	r2, [pc, #76]	; (8001d68 <HAL_InitTick+0xa4>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	0c9b      	lsrs	r3, r3, #18
 8001d20:	3b01      	subs	r3, #1
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_InitTick+0xa8>)
 8001d26:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <HAL_InitTick+0xac>)
 8001d28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <HAL_InitTick+0xa8>)
 8001d2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d30:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001d32:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <HAL_InitTick+0xa8>)
 8001d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d36:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <HAL_InitTick+0xa8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_InitTick+0xa8>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001d44:	4809      	ldr	r0, [pc, #36]	; (8001d6c <HAL_InitTick+0xa8>)
 8001d46:	f001 fd1d 	bl	8003784 <HAL_TIM_Base_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d104      	bne.n	8001d5a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001d50:	4806      	ldr	r0, [pc, #24]	; (8001d6c <HAL_InitTick+0xa8>)
 8001d52:	f001 fd6f 	bl	8003834 <HAL_TIM_Base_Start_IT>
 8001d56:	4603      	mov	r3, r0
 8001d58:	e000      	b.n	8001d5c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3730      	adds	r7, #48	; 0x30
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000
 8001d68:	431bde83 	.word	0x431bde83
 8001d6c:	20002b24 	.word	0x20002b24
 8001d70:	40000800 	.word	0x40000800

08001d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <NMI_Handler+0x4>

08001d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7e:	e7fe      	b.n	8001d7e <HardFault_Handler+0x4>

08001d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <MemManage_Handler+0x4>

08001d86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <BusFault_Handler+0x4>

08001d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <UsageFault_Handler+0x4>

08001d92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr
	...

08001da0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <TIM4_IRQHandler+0x10>)
 8001da6:	f001 fe89 	bl	8003abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20002b24 	.word	0x20002b24

08001db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dbc:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <_sbrk+0x5c>)
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <_sbrk+0x60>)
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc8:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d102      	bne.n	8001dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <_sbrk+0x64>)
 8001dd2:	4a12      	ldr	r2, [pc, #72]	; (8001e1c <_sbrk+0x68>)
 8001dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d207      	bcs.n	8001df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de4:	f006 f9c0 	bl	8008168 <__errno>
 8001de8:	4602      	mov	r2, r0
 8001dea:	230c      	movs	r3, #12
 8001dec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001dee:	f04f 33ff 	mov.w	r3, #4294967295
 8001df2:	e009      	b.n	8001e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <_sbrk+0x64>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dfa:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <_sbrk+0x64>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <_sbrk+0x64>)
 8001e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e06:	68fb      	ldr	r3, [r7, #12]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20005000 	.word	0x20005000
 8001e14:	00000400 	.word	0x00000400
 8001e18:	2000030c 	.word	0x2000030c
 8001e1c:	20002c20 	.word	0x20002c20

08001e20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e2c:	480c      	ldr	r0, [pc, #48]	; (8001e60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e2e:	490d      	ldr	r1, [pc, #52]	; (8001e64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e30:	4a0d      	ldr	r2, [pc, #52]	; (8001e68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e34:	e002      	b.n	8001e3c <LoopCopyDataInit>

08001e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3a:	3304      	adds	r3, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e40:	d3f9      	bcc.n	8001e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e44:	4c0a      	ldr	r4, [pc, #40]	; (8001e70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e48:	e001      	b.n	8001e4e <LoopFillZerobss>

08001e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e4c:	3204      	adds	r2, #4

08001e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e50:	d3fb      	bcc.n	8001e4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e52:	f7ff ffe5 	bl	8001e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e56:	f006 f98d 	bl	8008174 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e5a:	f7ff f987 	bl	800116c <main>
  bx lr
 8001e5e:	4770      	bx	lr
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e64:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001e68:	08008bfc 	.word	0x08008bfc
  ldr r2, =_sbss
 8001e6c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001e70:	20002c1c 	.word	0x20002c1c

08001e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC1_2_IRQHandler>
	...

08001e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_Init+0x28>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <HAL_Init+0x28>)
 8001e82:	f043 0310 	orr.w	r3, r3, #16
 8001e86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e88:	2003      	movs	r0, #3
 8001e8a:	f000 fcfd 	bl	8002888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f7ff ff18 	bl	8001cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e94:	f7ff fe02 	bl	8001a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40022000 	.word	0x40022000

08001ea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_IncTick+0x1c>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_IncTick+0x20>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a03      	ldr	r2, [pc, #12]	; (8001ec4 <HAL_IncTick+0x20>)
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	2000001c 	.word	0x2000001c
 8001ec4:	20002b6c 	.word	0x20002b6c

08001ec8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ecc:	4b02      	ldr	r3, [pc, #8]	; (8001ed8 <HAL_GetTick+0x10>)
 8001ece:	681b      	ldr	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	20002b6c 	.word	0x20002b6c

08001edc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e0be      	b.n	800207c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d109      	bne.n	8001f20 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff fdf6 	bl	8001b0c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fbc5 	bl	80026b0 <ADC_ConversionStop_Disable>
 8001f26:	4603      	mov	r3, r0
 8001f28:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 8099 	bne.w	800206a <HAL_ADC_Init+0x18e>
 8001f38:	7dfb      	ldrb	r3, [r7, #23]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f040 8095 	bne.w	800206a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f48:	f023 0302 	bic.w	r3, r3, #2
 8001f4c:	f043 0202 	orr.w	r2, r3, #2
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f5c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	7b1b      	ldrb	r3, [r3, #12]
 8001f62:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f64:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f74:	d003      	beq.n	8001f7e <HAL_ADC_Init+0xa2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d102      	bne.n	8001f84 <HAL_ADC_Init+0xa8>
 8001f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f82:	e000      	b.n	8001f86 <HAL_ADC_Init+0xaa>
 8001f84:	2300      	movs	r3, #0
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	7d1b      	ldrb	r3, [r3, #20]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d119      	bne.n	8001fc8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7b1b      	ldrb	r3, [r3, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d109      	bne.n	8001fb0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	035a      	lsls	r2, r3, #13
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	e00b      	b.n	8001fc8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	f043 0220 	orr.w	r2, r3, #32
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	4b28      	ldr	r3, [pc, #160]	; (8002084 <HAL_ADC_Init+0x1a8>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	68b9      	ldr	r1, [r7, #8]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ff8:	d003      	beq.n	8002002 <HAL_ADC_Init+0x126>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d104      	bne.n	800200c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	3b01      	subs	r3, #1
 8002008:	051b      	lsls	r3, r3, #20
 800200a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	430a      	orrs	r2, r1
 800201e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_ADC_Init+0x1ac>)
 8002028:	4013      	ands	r3, r2
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	429a      	cmp	r2, r3
 800202e:	d10b      	bne.n	8002048 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	f023 0303 	bic.w	r3, r3, #3
 800203e:	f043 0201 	orr.w	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002046:	e018      	b.n	800207a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	f023 0312 	bic.w	r3, r3, #18
 8002050:	f043 0210 	orr.w	r2, r3, #16
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	f043 0201 	orr.w	r2, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002068:	e007      	b.n	800207a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206e:	f043 0210 	orr.w	r2, r3, #16
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800207a:	7dfb      	ldrb	r3, [r7, #23]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	ffe1f7fd 	.word	0xffe1f7fd
 8002088:	ff1f0efe 	.word	0xff1f0efe

0800208c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_Start+0x1a>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e098      	b.n	80021d8 <HAL_ADC_Start+0x14c>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 faa4 	bl	80025fc <ADC_Enable>
 80020b4:	4603      	mov	r3, r0
 80020b6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f040 8087 	bne.w	80021ce <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c8:	f023 0301 	bic.w	r3, r3, #1
 80020cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a41      	ldr	r2, [pc, #260]	; (80021e0 <HAL_ADC_Start+0x154>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d105      	bne.n	80020ea <HAL_ADC_Start+0x5e>
 80020de:	4b41      	ldr	r3, [pc, #260]	; (80021e4 <HAL_ADC_Start+0x158>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d115      	bne.n	8002116 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002100:	2b00      	cmp	r3, #0
 8002102:	d026      	beq.n	8002152 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800210c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002114:	e01d      	b.n	8002152 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a2f      	ldr	r2, [pc, #188]	; (80021e4 <HAL_ADC_Start+0x158>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d004      	beq.n	8002136 <HAL_ADC_Start+0xaa>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a2b      	ldr	r2, [pc, #172]	; (80021e0 <HAL_ADC_Start+0x154>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d10d      	bne.n	8002152 <HAL_ADC_Start+0xc6>
 8002136:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <HAL_ADC_Start+0x158>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800214a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d006      	beq.n	800216c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	f023 0206 	bic.w	r2, r3, #6
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	62da      	str	r2, [r3, #44]	; 0x2c
 800216a:	e002      	b.n	8002172 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f06f 0202 	mvn.w	r2, #2
 8002182:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800218e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002192:	d113      	bne.n	80021bc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002198:	4a11      	ldr	r2, [pc, #68]	; (80021e0 <HAL_ADC_Start+0x154>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d105      	bne.n	80021aa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <HAL_ADC_Start+0x158>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d108      	bne.n	80021bc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	e00c      	b.n	80021d6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	e003      	b.n	80021d6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40012800 	.word	0x40012800
 80021e4:	40012400 	.word	0x40012400

080021e8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80021fe:	f7ff fe63 	bl	8001ec8 <HAL_GetTick>
 8002202:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00b      	beq.n	800222a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002216:	f043 0220 	orr.w	r2, r3, #32
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e0d3      	b.n	80023d2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d131      	bne.n	800229c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002242:	2b00      	cmp	r3, #0
 8002244:	d12a      	bne.n	800229c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002246:	e021      	b.n	800228c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224e:	d01d      	beq.n	800228c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d007      	beq.n	8002266 <HAL_ADC_PollForConversion+0x7e>
 8002256:	f7ff fe37 	bl	8001ec8 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d212      	bcs.n	800228c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10b      	bne.n	800228c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	f043 0204 	orr.w	r2, r3, #4
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e0a2      	b.n	80023d2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0d6      	beq.n	8002248 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800229a:	e070      	b.n	800237e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800229c:	4b4f      	ldr	r3, [pc, #316]	; (80023dc <HAL_ADC_PollForConversion+0x1f4>)
 800229e:	681c      	ldr	r4, [r3, #0]
 80022a0:	2002      	movs	r0, #2
 80022a2:	f001 f9b3 	bl	800360c <HAL_RCCEx_GetPeriphCLKFreq>
 80022a6:	4603      	mov	r3, r0
 80022a8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6919      	ldr	r1, [r3, #16]
 80022b2:	4b4b      	ldr	r3, [pc, #300]	; (80023e0 <HAL_ADC_PollForConversion+0x1f8>)
 80022b4:	400b      	ands	r3, r1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d118      	bne.n	80022ec <HAL_ADC_PollForConversion+0x104>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68d9      	ldr	r1, [r3, #12]
 80022c0:	4b48      	ldr	r3, [pc, #288]	; (80023e4 <HAL_ADC_PollForConversion+0x1fc>)
 80022c2:	400b      	ands	r3, r1
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d111      	bne.n	80022ec <HAL_ADC_PollForConversion+0x104>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6919      	ldr	r1, [r3, #16]
 80022ce:	4b46      	ldr	r3, [pc, #280]	; (80023e8 <HAL_ADC_PollForConversion+0x200>)
 80022d0:	400b      	ands	r3, r1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d108      	bne.n	80022e8 <HAL_ADC_PollForConversion+0x100>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68d9      	ldr	r1, [r3, #12]
 80022dc:	4b43      	ldr	r3, [pc, #268]	; (80023ec <HAL_ADC_PollForConversion+0x204>)
 80022de:	400b      	ands	r3, r1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_ADC_PollForConversion+0x100>
 80022e4:	2314      	movs	r3, #20
 80022e6:	e020      	b.n	800232a <HAL_ADC_PollForConversion+0x142>
 80022e8:	2329      	movs	r3, #41	; 0x29
 80022ea:	e01e      	b.n	800232a <HAL_ADC_PollForConversion+0x142>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6919      	ldr	r1, [r3, #16]
 80022f2:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <HAL_ADC_PollForConversion+0x200>)
 80022f4:	400b      	ands	r3, r1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d106      	bne.n	8002308 <HAL_ADC_PollForConversion+0x120>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68d9      	ldr	r1, [r3, #12]
 8002300:	4b3a      	ldr	r3, [pc, #232]	; (80023ec <HAL_ADC_PollForConversion+0x204>)
 8002302:	400b      	ands	r3, r1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00d      	beq.n	8002324 <HAL_ADC_PollForConversion+0x13c>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6919      	ldr	r1, [r3, #16]
 800230e:	4b38      	ldr	r3, [pc, #224]	; (80023f0 <HAL_ADC_PollForConversion+0x208>)
 8002310:	400b      	ands	r3, r1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d108      	bne.n	8002328 <HAL_ADC_PollForConversion+0x140>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68d9      	ldr	r1, [r3, #12]
 800231c:	4b34      	ldr	r3, [pc, #208]	; (80023f0 <HAL_ADC_PollForConversion+0x208>)
 800231e:	400b      	ands	r3, r1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_ADC_PollForConversion+0x140>
 8002324:	2354      	movs	r3, #84	; 0x54
 8002326:	e000      	b.n	800232a <HAL_ADC_PollForConversion+0x142>
 8002328:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800232a:	fb02 f303 	mul.w	r3, r2, r3
 800232e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002330:	e021      	b.n	8002376 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002338:	d01a      	beq.n	8002370 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <HAL_ADC_PollForConversion+0x168>
 8002340:	f7ff fdc2 	bl	8001ec8 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d20f      	bcs.n	8002370 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	429a      	cmp	r2, r3
 8002356:	d90b      	bls.n	8002370 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235c:	f043 0204 	orr.w	r2, r3, #4
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e030      	b.n	80023d2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3301      	adds	r3, #1
 8002374:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	429a      	cmp	r2, r3
 800237c:	d8d9      	bhi.n	8002332 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f06f 0212 	mvn.w	r2, #18
 8002386:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800239e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023a2:	d115      	bne.n	80023d0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d111      	bne.n	80023d0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d105      	bne.n	80023d0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	371c      	adds	r7, #28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd90      	pop	{r4, r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000014 	.word	0x20000014
 80023e0:	24924924 	.word	0x24924924
 80023e4:	00924924 	.word	0x00924924
 80023e8:	12492492 	.word	0x12492492
 80023ec:	00492492 	.word	0x00492492
 80023f0:	00249249 	.word	0x00249249

080023f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_ADC_ConfigChannel+0x20>
 8002428:	2302      	movs	r3, #2
 800242a:	e0dc      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x1da>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b06      	cmp	r3, #6
 800243a:	d81c      	bhi.n	8002476 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	3b05      	subs	r3, #5
 800244e:	221f      	movs	r2, #31
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	4019      	ands	r1, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	3b05      	subs	r3, #5
 8002468:	fa00 f203 	lsl.w	r2, r0, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	635a      	str	r2, [r3, #52]	; 0x34
 8002474:	e03c      	b.n	80024f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d81c      	bhi.n	80024b8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	3b23      	subs	r3, #35	; 0x23
 8002490:	221f      	movs	r2, #31
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	4019      	ands	r1, r3
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	3b23      	subs	r3, #35	; 0x23
 80024aa:	fa00 f203 	lsl.w	r2, r0, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30
 80024b6:	e01b      	b.n	80024f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	3b41      	subs	r3, #65	; 0x41
 80024ca:	221f      	movs	r2, #31
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	4019      	ands	r1, r3
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	3b41      	subs	r3, #65	; 0x41
 80024e4:	fa00 f203 	lsl.w	r2, r0, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b09      	cmp	r3, #9
 80024f6:	d91c      	bls.n	8002532 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68d9      	ldr	r1, [r3, #12]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	4613      	mov	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4413      	add	r3, r2
 8002508:	3b1e      	subs	r3, #30
 800250a:	2207      	movs	r2, #7
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	4019      	ands	r1, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	6898      	ldr	r0, [r3, #8]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4613      	mov	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	3b1e      	subs	r3, #30
 8002524:	fa00 f203 	lsl.w	r2, r0, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	60da      	str	r2, [r3, #12]
 8002530:	e019      	b.n	8002566 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6919      	ldr	r1, [r3, #16]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4413      	add	r3, r2
 8002542:	2207      	movs	r2, #7
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	4019      	ands	r1, r3
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	6898      	ldr	r0, [r3, #8]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4613      	mov	r3, r2
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	4413      	add	r3, r2
 800255a:	fa00 f203 	lsl.w	r2, r0, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b10      	cmp	r3, #16
 800256c:	d003      	beq.n	8002576 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002572:	2b11      	cmp	r3, #17
 8002574:	d132      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a1d      	ldr	r2, [pc, #116]	; (80025f0 <HAL_ADC_ConfigChannel+0x1e4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d125      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d126      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800259c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b10      	cmp	r3, #16
 80025a4:	d11a      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025a6:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <HAL_ADC_ConfigChannel+0x1ec>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	0c9a      	lsrs	r2, r3, #18
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025bc:	e002      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f9      	bne.n	80025be <HAL_ADC_ConfigChannel+0x1b2>
 80025ca:	e007      	b.n	80025dc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	f043 0220 	orr.w	r2, r3, #32
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	40012400 	.word	0x40012400
 80025f4:	20000014 	.word	0x20000014
 80025f8:	431bde83 	.word	0x431bde83

080025fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b01      	cmp	r3, #1
 8002618:	d040      	beq.n	800269c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0201 	orr.w	r2, r2, #1
 8002628:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800262a:	4b1f      	ldr	r3, [pc, #124]	; (80026a8 <ADC_Enable+0xac>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a1f      	ldr	r2, [pc, #124]	; (80026ac <ADC_Enable+0xb0>)
 8002630:	fba2 2303 	umull	r2, r3, r2, r3
 8002634:	0c9b      	lsrs	r3, r3, #18
 8002636:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002638:	e002      	b.n	8002640 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	3b01      	subs	r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f9      	bne.n	800263a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002646:	f7ff fc3f 	bl	8001ec8 <HAL_GetTick>
 800264a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800264c:	e01f      	b.n	800268e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800264e:	f7ff fc3b 	bl	8001ec8 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d918      	bls.n	800268e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b01      	cmp	r3, #1
 8002668:	d011      	beq.n	800268e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266e:	f043 0210 	orr.w	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	f043 0201 	orr.w	r2, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e007      	b.n	800269e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b01      	cmp	r3, #1
 800269a:	d1d8      	bne.n	800264e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000014 	.word	0x20000014
 80026ac:	431bde83 	.word	0x431bde83

080026b0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d12e      	bne.n	8002728 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0201 	bic.w	r2, r2, #1
 80026d8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026da:	f7ff fbf5 	bl	8001ec8 <HAL_GetTick>
 80026de:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026e0:	e01b      	b.n	800271a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026e2:	f7ff fbf1 	bl	8001ec8 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d914      	bls.n	800271a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d10d      	bne.n	800271a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002702:	f043 0210 	orr.w	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e007      	b.n	800272a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b01      	cmp	r3, #1
 8002726:	d0dc      	beq.n	80026e2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <__NVIC_SetPriorityGrouping+0x44>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002750:	4013      	ands	r3, r2
 8002752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800275c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002766:	4a04      	ldr	r2, [pc, #16]	; (8002778 <__NVIC_SetPriorityGrouping+0x44>)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	60d3      	str	r3, [r2, #12]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002780:	4b04      	ldr	r3, [pc, #16]	; (8002794 <__NVIC_GetPriorityGrouping+0x18>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	0a1b      	lsrs	r3, r3, #8
 8002786:	f003 0307 	and.w	r3, r3, #7
}
 800278a:	4618      	mov	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	db0b      	blt.n	80027c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	f003 021f 	and.w	r2, r3, #31
 80027b0:	4906      	ldr	r1, [pc, #24]	; (80027cc <__NVIC_EnableIRQ+0x34>)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	2001      	movs	r0, #1
 80027ba:	fa00 f202 	lsl.w	r2, r0, r2
 80027be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	e000e100 	.word	0xe000e100

080027d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	6039      	str	r1, [r7, #0]
 80027da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	db0a      	blt.n	80027fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	490c      	ldr	r1, [pc, #48]	; (800281c <__NVIC_SetPriority+0x4c>)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	0112      	lsls	r2, r2, #4
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	440b      	add	r3, r1
 80027f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f8:	e00a      	b.n	8002810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	4908      	ldr	r1, [pc, #32]	; (8002820 <__NVIC_SetPriority+0x50>)
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	3b04      	subs	r3, #4
 8002808:	0112      	lsls	r2, r2, #4
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	440b      	add	r3, r1
 800280e:	761a      	strb	r2, [r3, #24]
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	e000e100 	.word	0xe000e100
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002824:	b480      	push	{r7}
 8002826:	b089      	sub	sp, #36	; 0x24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f1c3 0307 	rsb	r3, r3, #7
 800283e:	2b04      	cmp	r3, #4
 8002840:	bf28      	it	cs
 8002842:	2304      	movcs	r3, #4
 8002844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3304      	adds	r3, #4
 800284a:	2b06      	cmp	r3, #6
 800284c:	d902      	bls.n	8002854 <NVIC_EncodePriority+0x30>
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3b03      	subs	r3, #3
 8002852:	e000      	b.n	8002856 <NVIC_EncodePriority+0x32>
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002858:	f04f 32ff 	mov.w	r2, #4294967295
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43da      	mvns	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	401a      	ands	r2, r3
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800286c:	f04f 31ff 	mov.w	r1, #4294967295
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	fa01 f303 	lsl.w	r3, r1, r3
 8002876:	43d9      	mvns	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800287c:	4313      	orrs	r3, r2
         );
}
 800287e:	4618      	mov	r0, r3
 8002880:	3724      	adds	r7, #36	; 0x24
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff ff4f 	bl	8002734 <__NVIC_SetPriorityGrouping>
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4603      	mov	r3, r0
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b0:	f7ff ff64 	bl	800277c <__NVIC_GetPriorityGrouping>
 80028b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	6978      	ldr	r0, [r7, #20]
 80028bc:	f7ff ffb2 	bl	8002824 <NVIC_EncodePriority>
 80028c0:	4602      	mov	r2, r0
 80028c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff ff81 	bl	80027d0 <__NVIC_SetPriority>
}
 80028ce:	bf00      	nop
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	4603      	mov	r3, r0
 80028de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff57 	bl	8002798 <__NVIC_EnableIRQ>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b08b      	sub	sp, #44	; 0x2c
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028fe:	2300      	movs	r3, #0
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002902:	2300      	movs	r3, #0
 8002904:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002906:	e127      	b.n	8002b58 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002908:	2201      	movs	r2, #1
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	429a      	cmp	r2, r3
 8002922:	f040 8116 	bne.w	8002b52 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b12      	cmp	r3, #18
 800292c:	d034      	beq.n	8002998 <HAL_GPIO_Init+0xa4>
 800292e:	2b12      	cmp	r3, #18
 8002930:	d80d      	bhi.n	800294e <HAL_GPIO_Init+0x5a>
 8002932:	2b02      	cmp	r3, #2
 8002934:	d02b      	beq.n	800298e <HAL_GPIO_Init+0x9a>
 8002936:	2b02      	cmp	r3, #2
 8002938:	d804      	bhi.n	8002944 <HAL_GPIO_Init+0x50>
 800293a:	2b00      	cmp	r3, #0
 800293c:	d031      	beq.n	80029a2 <HAL_GPIO_Init+0xae>
 800293e:	2b01      	cmp	r3, #1
 8002940:	d01c      	beq.n	800297c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002942:	e048      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002944:	2b03      	cmp	r3, #3
 8002946:	d043      	beq.n	80029d0 <HAL_GPIO_Init+0xdc>
 8002948:	2b11      	cmp	r3, #17
 800294a:	d01b      	beq.n	8002984 <HAL_GPIO_Init+0x90>
          break;
 800294c:	e043      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800294e:	4a89      	ldr	r2, [pc, #548]	; (8002b74 <HAL_GPIO_Init+0x280>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d026      	beq.n	80029a2 <HAL_GPIO_Init+0xae>
 8002954:	4a87      	ldr	r2, [pc, #540]	; (8002b74 <HAL_GPIO_Init+0x280>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d806      	bhi.n	8002968 <HAL_GPIO_Init+0x74>
 800295a:	4a87      	ldr	r2, [pc, #540]	; (8002b78 <HAL_GPIO_Init+0x284>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d020      	beq.n	80029a2 <HAL_GPIO_Init+0xae>
 8002960:	4a86      	ldr	r2, [pc, #536]	; (8002b7c <HAL_GPIO_Init+0x288>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d01d      	beq.n	80029a2 <HAL_GPIO_Init+0xae>
          break;
 8002966:	e036      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002968:	4a85      	ldr	r2, [pc, #532]	; (8002b80 <HAL_GPIO_Init+0x28c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d019      	beq.n	80029a2 <HAL_GPIO_Init+0xae>
 800296e:	4a85      	ldr	r2, [pc, #532]	; (8002b84 <HAL_GPIO_Init+0x290>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d016      	beq.n	80029a2 <HAL_GPIO_Init+0xae>
 8002974:	4a84      	ldr	r2, [pc, #528]	; (8002b88 <HAL_GPIO_Init+0x294>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <HAL_GPIO_Init+0xae>
          break;
 800297a:	e02c      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	623b      	str	r3, [r7, #32]
          break;
 8002982:	e028      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	3304      	adds	r3, #4
 800298a:	623b      	str	r3, [r7, #32]
          break;
 800298c:	e023      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	3308      	adds	r3, #8
 8002994:	623b      	str	r3, [r7, #32]
          break;
 8002996:	e01e      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	330c      	adds	r3, #12
 800299e:	623b      	str	r3, [r7, #32]
          break;
 80029a0:	e019      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d102      	bne.n	80029b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029aa:	2304      	movs	r3, #4
 80029ac:	623b      	str	r3, [r7, #32]
          break;
 80029ae:	e012      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d105      	bne.n	80029c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029b8:	2308      	movs	r3, #8
 80029ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	611a      	str	r2, [r3, #16]
          break;
 80029c2:	e008      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029c4:	2308      	movs	r3, #8
 80029c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	615a      	str	r2, [r3, #20]
          break;
 80029ce:	e002      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029d0:	2300      	movs	r3, #0
 80029d2:	623b      	str	r3, [r7, #32]
          break;
 80029d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	2bff      	cmp	r3, #255	; 0xff
 80029da:	d801      	bhi.n	80029e0 <HAL_GPIO_Init+0xec>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	e001      	b.n	80029e4 <HAL_GPIO_Init+0xf0>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3304      	adds	r3, #4
 80029e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	2bff      	cmp	r3, #255	; 0xff
 80029ea:	d802      	bhi.n	80029f2 <HAL_GPIO_Init+0xfe>
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	e002      	b.n	80029f8 <HAL_GPIO_Init+0x104>
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	3b08      	subs	r3, #8
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	210f      	movs	r1, #15
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	401a      	ands	r2, r3
 8002a0a:	6a39      	ldr	r1, [r7, #32]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	431a      	orrs	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8096 	beq.w	8002b52 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a26:	4b59      	ldr	r3, [pc, #356]	; (8002b8c <HAL_GPIO_Init+0x298>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	4a58      	ldr	r2, [pc, #352]	; (8002b8c <HAL_GPIO_Init+0x298>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6193      	str	r3, [r2, #24]
 8002a32:	4b56      	ldr	r3, [pc, #344]	; (8002b8c <HAL_GPIO_Init+0x298>)
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a3e:	4a54      	ldr	r2, [pc, #336]	; (8002b90 <HAL_GPIO_Init+0x29c>)
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3302      	adds	r3, #2
 8002a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	220f      	movs	r2, #15
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a4b      	ldr	r2, [pc, #300]	; (8002b94 <HAL_GPIO_Init+0x2a0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <HAL_GPIO_Init+0x19e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4a      	ldr	r2, [pc, #296]	; (8002b98 <HAL_GPIO_Init+0x2a4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00d      	beq.n	8002a8e <HAL_GPIO_Init+0x19a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a49      	ldr	r2, [pc, #292]	; (8002b9c <HAL_GPIO_Init+0x2a8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d007      	beq.n	8002a8a <HAL_GPIO_Init+0x196>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a48      	ldr	r2, [pc, #288]	; (8002ba0 <HAL_GPIO_Init+0x2ac>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d101      	bne.n	8002a86 <HAL_GPIO_Init+0x192>
 8002a82:	2303      	movs	r3, #3
 8002a84:	e006      	b.n	8002a94 <HAL_GPIO_Init+0x1a0>
 8002a86:	2304      	movs	r3, #4
 8002a88:	e004      	b.n	8002a94 <HAL_GPIO_Init+0x1a0>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e002      	b.n	8002a94 <HAL_GPIO_Init+0x1a0>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_GPIO_Init+0x1a0>
 8002a92:	2300      	movs	r3, #0
 8002a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a96:	f002 0203 	and.w	r2, r2, #3
 8002a9a:	0092      	lsls	r2, r2, #2
 8002a9c:	4093      	lsls	r3, r2
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002aa4:	493a      	ldr	r1, [pc, #232]	; (8002b90 <HAL_GPIO_Init+0x29c>)
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	089b      	lsrs	r3, r3, #2
 8002aaa:	3302      	adds	r3, #2
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d006      	beq.n	8002acc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002abe:	4b39      	ldr	r3, [pc, #228]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4938      	ldr	r1, [pc, #224]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]
 8002aca:	e006      	b.n	8002ada <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002acc:	4b35      	ldr	r3, [pc, #212]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	4933      	ldr	r1, [pc, #204]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d006      	beq.n	8002af4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ae6:	4b2f      	ldr	r3, [pc, #188]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	492e      	ldr	r1, [pc, #184]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]
 8002af2:	e006      	b.n	8002b02 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002af4:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	4929      	ldr	r1, [pc, #164]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d006      	beq.n	8002b1c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b0e:	4b25      	ldr	r3, [pc, #148]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	4924      	ldr	r1, [pc, #144]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
 8002b1a:	e006      	b.n	8002b2a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b1c:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	491f      	ldr	r1, [pc, #124]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d006      	beq.n	8002b44 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b36:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	491a      	ldr	r1, [pc, #104]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60cb      	str	r3, [r1, #12]
 8002b42:	e006      	b.n	8002b52 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b44:	4b17      	ldr	r3, [pc, #92]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	4915      	ldr	r1, [pc, #84]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	3301      	adds	r3, #1
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f47f aed0 	bne.w	8002908 <HAL_GPIO_Init+0x14>
  }
}
 8002b68:	bf00      	nop
 8002b6a:	372c      	adds	r7, #44	; 0x2c
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	10210000 	.word	0x10210000
 8002b78:	10110000 	.word	0x10110000
 8002b7c:	10120000 	.word	0x10120000
 8002b80:	10310000 	.word	0x10310000
 8002b84:	10320000 	.word	0x10320000
 8002b88:	10220000 	.word	0x10220000
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40010000 	.word	0x40010000
 8002b94:	40010800 	.word	0x40010800
 8002b98:	40010c00 	.word	0x40010c00
 8002b9c:	40011000 	.word	0x40011000
 8002ba0:	40011400 	.word	0x40011400
 8002ba4:	40010400 	.word	0x40010400

08002ba8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	887b      	ldrh	r3, [r7, #2]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
 8002bc4:	e001      	b.n	8002bca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	460b      	mov	r3, r1
 8002be0:	807b      	strh	r3, [r7, #2]
 8002be2:	4613      	mov	r3, r2
 8002be4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002be6:	787b      	ldrb	r3, [r7, #1]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bec:	887a      	ldrh	r2, [r7, #2]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bf2:	e003      	b.n	8002bfc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bf4:	887b      	ldrh	r3, [r7, #2]
 8002bf6:	041a      	lsls	r2, r3, #16
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	611a      	str	r2, [r3, #16]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
	...

08002c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e26c      	b.n	80030f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 8087 	beq.w	8002d36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c28:	4b92      	ldr	r3, [pc, #584]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 030c 	and.w	r3, r3, #12
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d00c      	beq.n	8002c4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c34:	4b8f      	ldr	r3, [pc, #572]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 030c 	and.w	r3, r3, #12
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d112      	bne.n	8002c66 <HAL_RCC_OscConfig+0x5e>
 8002c40:	4b8c      	ldr	r3, [pc, #560]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4c:	d10b      	bne.n	8002c66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4e:	4b89      	ldr	r3, [pc, #548]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d06c      	beq.n	8002d34 <HAL_RCC_OscConfig+0x12c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d168      	bne.n	8002d34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e246      	b.n	80030f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c6e:	d106      	bne.n	8002c7e <HAL_RCC_OscConfig+0x76>
 8002c70:	4b80      	ldr	r3, [pc, #512]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a7f      	ldr	r2, [pc, #508]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	e02e      	b.n	8002cdc <HAL_RCC_OscConfig+0xd4>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x98>
 8002c86:	4b7b      	ldr	r3, [pc, #492]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a7a      	ldr	r2, [pc, #488]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b78      	ldr	r3, [pc, #480]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a77      	ldr	r2, [pc, #476]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e01d      	b.n	8002cdc <HAL_RCC_OscConfig+0xd4>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0xbc>
 8002caa:	4b72      	ldr	r3, [pc, #456]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a71      	ldr	r2, [pc, #452]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4b6f      	ldr	r3, [pc, #444]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a6e      	ldr	r2, [pc, #440]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e00b      	b.n	8002cdc <HAL_RCC_OscConfig+0xd4>
 8002cc4:	4b6b      	ldr	r3, [pc, #428]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a6a      	ldr	r2, [pc, #424]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b68      	ldr	r3, [pc, #416]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a67      	ldr	r2, [pc, #412]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d013      	beq.n	8002d0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7ff f8f0 	bl	8001ec8 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cec:	f7ff f8ec 	bl	8001ec8 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e1fa      	b.n	80030f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	4b5d      	ldr	r3, [pc, #372]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0xe4>
 8002d0a:	e014      	b.n	8002d36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0c:	f7ff f8dc 	bl	8001ec8 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d14:	f7ff f8d8 	bl	8001ec8 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b64      	cmp	r3, #100	; 0x64
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e1e6      	b.n	80030f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d26:	4b53      	ldr	r3, [pc, #332]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x10c>
 8002d32:	e000      	b.n	8002d36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d063      	beq.n	8002e0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d42:	4b4c      	ldr	r3, [pc, #304]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00b      	beq.n	8002d66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d4e:	4b49      	ldr	r3, [pc, #292]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d11c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x18c>
 8002d5a:	4b46      	ldr	r3, [pc, #280]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d116      	bne.n	8002d94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d66:	4b43      	ldr	r3, [pc, #268]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_RCC_OscConfig+0x176>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d001      	beq.n	8002d7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e1ba      	b.n	80030f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7e:	4b3d      	ldr	r3, [pc, #244]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4939      	ldr	r1, [pc, #228]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d92:	e03a      	b.n	8002e0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d020      	beq.n	8002dde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d9c:	4b36      	ldr	r3, [pc, #216]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da2:	f7ff f891 	bl	8001ec8 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002daa:	f7ff f88d 	bl	8001ec8 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e19b      	b.n	80030f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbc:	4b2d      	ldr	r3, [pc, #180]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc8:	4b2a      	ldr	r3, [pc, #168]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4927      	ldr	r1, [pc, #156]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	600b      	str	r3, [r1, #0]
 8002ddc:	e015      	b.n	8002e0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dde:	4b26      	ldr	r3, [pc, #152]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7ff f870 	bl	8001ec8 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dec:	f7ff f86c 	bl	8001ec8 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e17a      	b.n	80030f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfe:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d03a      	beq.n	8002e8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d019      	beq.n	8002e52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e1e:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <HAL_RCC_OscConfig+0x274>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e24:	f7ff f850 	bl	8001ec8 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2c:	f7ff f84c 	bl	8001ec8 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e15a      	b.n	80030f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e4a:	2001      	movs	r0, #1
 8002e4c:	f000 fb0a 	bl	8003464 <RCC_Delay>
 8002e50:	e01c      	b.n	8002e8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <HAL_RCC_OscConfig+0x274>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e58:	f7ff f836 	bl	8001ec8 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5e:	e00f      	b.n	8002e80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e60:	f7ff f832 	bl	8001ec8 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d908      	bls.n	8002e80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e140      	b.n	80030f4 <HAL_RCC_OscConfig+0x4ec>
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000
 8002e78:	42420000 	.word	0x42420000
 8002e7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e80:	4b9e      	ldr	r3, [pc, #632]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1e9      	bne.n	8002e60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 80a6 	beq.w	8002fe6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e9e:	4b97      	ldr	r3, [pc, #604]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10d      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eaa:	4b94      	ldr	r3, [pc, #592]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	4a93      	ldr	r2, [pc, #588]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	61d3      	str	r3, [r2, #28]
 8002eb6:	4b91      	ldr	r3, [pc, #580]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec6:	4b8e      	ldr	r3, [pc, #568]	; (8003100 <HAL_RCC_OscConfig+0x4f8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d118      	bne.n	8002f04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed2:	4b8b      	ldr	r3, [pc, #556]	; (8003100 <HAL_RCC_OscConfig+0x4f8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a8a      	ldr	r2, [pc, #552]	; (8003100 <HAL_RCC_OscConfig+0x4f8>)
 8002ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ede:	f7fe fff3 	bl	8001ec8 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee6:	f7fe ffef 	bl	8001ec8 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b64      	cmp	r3, #100	; 0x64
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e0fd      	b.n	80030f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef8:	4b81      	ldr	r3, [pc, #516]	; (8003100 <HAL_RCC_OscConfig+0x4f8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d106      	bne.n	8002f1a <HAL_RCC_OscConfig+0x312>
 8002f0c:	4b7b      	ldr	r3, [pc, #492]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	4a7a      	ldr	r2, [pc, #488]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6213      	str	r3, [r2, #32]
 8002f18:	e02d      	b.n	8002f76 <HAL_RCC_OscConfig+0x36e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10c      	bne.n	8002f3c <HAL_RCC_OscConfig+0x334>
 8002f22:	4b76      	ldr	r3, [pc, #472]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	4a75      	ldr	r2, [pc, #468]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002f28:	f023 0301 	bic.w	r3, r3, #1
 8002f2c:	6213      	str	r3, [r2, #32]
 8002f2e:	4b73      	ldr	r3, [pc, #460]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	4a72      	ldr	r2, [pc, #456]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002f34:	f023 0304 	bic.w	r3, r3, #4
 8002f38:	6213      	str	r3, [r2, #32]
 8002f3a:	e01c      	b.n	8002f76 <HAL_RCC_OscConfig+0x36e>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	2b05      	cmp	r3, #5
 8002f42:	d10c      	bne.n	8002f5e <HAL_RCC_OscConfig+0x356>
 8002f44:	4b6d      	ldr	r3, [pc, #436]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	4a6c      	ldr	r2, [pc, #432]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002f4a:	f043 0304 	orr.w	r3, r3, #4
 8002f4e:	6213      	str	r3, [r2, #32]
 8002f50:	4b6a      	ldr	r3, [pc, #424]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	4a69      	ldr	r2, [pc, #420]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	6213      	str	r3, [r2, #32]
 8002f5c:	e00b      	b.n	8002f76 <HAL_RCC_OscConfig+0x36e>
 8002f5e:	4b67      	ldr	r3, [pc, #412]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	4a66      	ldr	r2, [pc, #408]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002f64:	f023 0301 	bic.w	r3, r3, #1
 8002f68:	6213      	str	r3, [r2, #32]
 8002f6a:	4b64      	ldr	r3, [pc, #400]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	4a63      	ldr	r2, [pc, #396]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002f70:	f023 0304 	bic.w	r3, r3, #4
 8002f74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d015      	beq.n	8002faa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7e:	f7fe ffa3 	bl	8001ec8 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f84:	e00a      	b.n	8002f9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f86:	f7fe ff9f 	bl	8001ec8 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e0ab      	b.n	80030f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9c:	4b57      	ldr	r3, [pc, #348]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0ee      	beq.n	8002f86 <HAL_RCC_OscConfig+0x37e>
 8002fa8:	e014      	b.n	8002fd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002faa:	f7fe ff8d 	bl	8001ec8 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb0:	e00a      	b.n	8002fc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb2:	f7fe ff89 	bl	8001ec8 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e095      	b.n	80030f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc8:	4b4c      	ldr	r3, [pc, #304]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1ee      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fd4:	7dfb      	ldrb	r3, [r7, #23]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d105      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fda:	4b48      	ldr	r3, [pc, #288]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	4a47      	ldr	r2, [pc, #284]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 8081 	beq.w	80030f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ff0:	4b42      	ldr	r3, [pc, #264]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d061      	beq.n	80030c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d146      	bne.n	8003092 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003004:	4b3f      	ldr	r3, [pc, #252]	; (8003104 <HAL_RCC_OscConfig+0x4fc>)
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300a:	f7fe ff5d 	bl	8001ec8 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003012:	f7fe ff59 	bl	8001ec8 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e067      	b.n	80030f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003024:	4b35      	ldr	r3, [pc, #212]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1f0      	bne.n	8003012 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003038:	d108      	bne.n	800304c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800303a:	4b30      	ldr	r3, [pc, #192]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	492d      	ldr	r1, [pc, #180]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8003048:	4313      	orrs	r3, r2
 800304a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800304c:	4b2b      	ldr	r3, [pc, #172]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a19      	ldr	r1, [r3, #32]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	430b      	orrs	r3, r1
 800305e:	4927      	ldr	r1, [pc, #156]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003064:	4b27      	ldr	r3, [pc, #156]	; (8003104 <HAL_RCC_OscConfig+0x4fc>)
 8003066:	2201      	movs	r2, #1
 8003068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306a:	f7fe ff2d 	bl	8001ec8 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003072:	f7fe ff29 	bl	8001ec8 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e037      	b.n	80030f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003084:	4b1d      	ldr	r3, [pc, #116]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0x46a>
 8003090:	e02f      	b.n	80030f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003092:	4b1c      	ldr	r3, [pc, #112]	; (8003104 <HAL_RCC_OscConfig+0x4fc>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7fe ff16 	bl	8001ec8 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a0:	f7fe ff12 	bl	8001ec8 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e020      	b.n	80030f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x498>
 80030be:	e018      	b.n	80030f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e013      	b.n	80030f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_RCC_OscConfig+0x4f4>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d106      	bne.n	80030ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d001      	beq.n	80030f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000
 8003100:	40007000 	.word	0x40007000
 8003104:	42420060 	.word	0x42420060

08003108 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0d0      	b.n	80032be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800311c:	4b6a      	ldr	r3, [pc, #424]	; (80032c8 <HAL_RCC_ClockConfig+0x1c0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d910      	bls.n	800314c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312a:	4b67      	ldr	r3, [pc, #412]	; (80032c8 <HAL_RCC_ClockConfig+0x1c0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f023 0207 	bic.w	r2, r3, #7
 8003132:	4965      	ldr	r1, [pc, #404]	; (80032c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313a:	4b63      	ldr	r3, [pc, #396]	; (80032c8 <HAL_RCC_ClockConfig+0x1c0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0b8      	b.n	80032be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d020      	beq.n	800319a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003164:	4b59      	ldr	r3, [pc, #356]	; (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4a58      	ldr	r2, [pc, #352]	; (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 800316a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800316e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800317c:	4b53      	ldr	r3, [pc, #332]	; (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	4a52      	ldr	r2, [pc, #328]	; (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003186:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003188:	4b50      	ldr	r3, [pc, #320]	; (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	494d      	ldr	r1, [pc, #308]	; (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	4313      	orrs	r3, r2
 8003198:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d040      	beq.n	8003228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ae:	4b47      	ldr	r3, [pc, #284]	; (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d115      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e07f      	b.n	80032be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d107      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c6:	4b41      	ldr	r3, [pc, #260]	; (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e073      	b.n	80032be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d6:	4b3d      	ldr	r3, [pc, #244]	; (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e06b      	b.n	80032be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e6:	4b39      	ldr	r3, [pc, #228]	; (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f023 0203 	bic.w	r2, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4936      	ldr	r1, [pc, #216]	; (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f8:	f7fe fe66 	bl	8001ec8 <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	e00a      	b.n	8003216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003200:	f7fe fe62 	bl	8001ec8 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f241 3288 	movw	r2, #5000	; 0x1388
 800320e:	4293      	cmp	r3, r2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e053      	b.n	80032be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003216:	4b2d      	ldr	r3, [pc, #180]	; (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 020c 	and.w	r2, r3, #12
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	429a      	cmp	r2, r3
 8003226:	d1eb      	bne.n	8003200 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003228:	4b27      	ldr	r3, [pc, #156]	; (80032c8 <HAL_RCC_ClockConfig+0x1c0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d210      	bcs.n	8003258 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003236:	4b24      	ldr	r3, [pc, #144]	; (80032c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 0207 	bic.w	r2, r3, #7
 800323e:	4922      	ldr	r1, [pc, #136]	; (80032c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003246:	4b20      	ldr	r3, [pc, #128]	; (80032c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e032      	b.n	80032be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003264:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4916      	ldr	r1, [pc, #88]	; (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 8003272:	4313      	orrs	r3, r2
 8003274:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d009      	beq.n	8003296 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003282:	4b12      	ldr	r3, [pc, #72]	; (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	490e      	ldr	r1, [pc, #56]	; (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 8003292:	4313      	orrs	r3, r2
 8003294:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003296:	f000 f821 	bl	80032dc <HAL_RCC_GetSysClockFreq>
 800329a:	4601      	mov	r1, r0
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <HAL_RCC_ClockConfig+0x1c8>)
 80032a8:	5cd3      	ldrb	r3, [r2, r3]
 80032aa:	fa21 f303 	lsr.w	r3, r1, r3
 80032ae:	4a09      	ldr	r2, [pc, #36]	; (80032d4 <HAL_RCC_ClockConfig+0x1cc>)
 80032b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032b2:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <HAL_RCC_ClockConfig+0x1d0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe fd04 	bl	8001cc4 <HAL_InitTick>

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40022000 	.word	0x40022000
 80032cc:	40021000 	.word	0x40021000
 80032d0:	08008b94 	.word	0x08008b94
 80032d4:	20000014 	.word	0x20000014
 80032d8:	20000018 	.word	0x20000018

080032dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032dc:	b490      	push	{r4, r7}
 80032de:	b08a      	sub	sp, #40	; 0x28
 80032e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032e2:	4b2a      	ldr	r3, [pc, #168]	; (800338c <HAL_RCC_GetSysClockFreq+0xb0>)
 80032e4:	1d3c      	adds	r4, r7, #4
 80032e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032ec:	4b28      	ldr	r3, [pc, #160]	; (8003390 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
 80032f6:	2300      	movs	r3, #0
 80032f8:	61bb      	str	r3, [r7, #24]
 80032fa:	2300      	movs	r3, #0
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003306:	4b23      	ldr	r3, [pc, #140]	; (8003394 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f003 030c 	and.w	r3, r3, #12
 8003312:	2b04      	cmp	r3, #4
 8003314:	d002      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0x40>
 8003316:	2b08      	cmp	r3, #8
 8003318:	d003      	beq.n	8003322 <HAL_RCC_GetSysClockFreq+0x46>
 800331a:	e02d      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800331c:	4b1e      	ldr	r3, [pc, #120]	; (8003398 <HAL_RCC_GetSysClockFreq+0xbc>)
 800331e:	623b      	str	r3, [r7, #32]
      break;
 8003320:	e02d      	b.n	800337e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	0c9b      	lsrs	r3, r3, #18
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800332e:	4413      	add	r3, r2
 8003330:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003334:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d013      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003340:	4b14      	ldr	r3, [pc, #80]	; (8003394 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	0c5b      	lsrs	r3, r3, #17
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800334e:	4413      	add	r3, r2
 8003350:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003354:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	4a0f      	ldr	r2, [pc, #60]	; (8003398 <HAL_RCC_GetSysClockFreq+0xbc>)
 800335a:	fb02 f203 	mul.w	r2, r2, r3
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
 8003366:	e004      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	4a0c      	ldr	r2, [pc, #48]	; (800339c <HAL_RCC_GetSysClockFreq+0xc0>)
 800336c:	fb02 f303 	mul.w	r3, r2, r3
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	623b      	str	r3, [r7, #32]
      break;
 8003376:	e002      	b.n	800337e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003378:	4b07      	ldr	r3, [pc, #28]	; (8003398 <HAL_RCC_GetSysClockFreq+0xbc>)
 800337a:	623b      	str	r3, [r7, #32]
      break;
 800337c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800337e:	6a3b      	ldr	r3, [r7, #32]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3728      	adds	r7, #40	; 0x28
 8003384:	46bd      	mov	sp, r7
 8003386:	bc90      	pop	{r4, r7}
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	08008a9c 	.word	0x08008a9c
 8003390:	08008aac 	.word	0x08008aac
 8003394:	40021000 	.word	0x40021000
 8003398:	007a1200 	.word	0x007a1200
 800339c:	003d0900 	.word	0x003d0900

080033a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a4:	4b02      	ldr	r3, [pc, #8]	; (80033b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80033a6:	681b      	ldr	r3, [r3, #0]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	20000014 	.word	0x20000014

080033b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033b8:	f7ff fff2 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033bc:	4601      	mov	r1, r0
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	4a03      	ldr	r2, [pc, #12]	; (80033d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ca:	5cd3      	ldrb	r3, [r2, r3]
 80033cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40021000 	.word	0x40021000
 80033d8:	08008ba4 	.word	0x08008ba4

080033dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033e0:	f7ff ffde 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033e4:	4601      	mov	r1, r0
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	0adb      	lsrs	r3, r3, #11
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	4a03      	ldr	r2, [pc, #12]	; (8003400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033f2:	5cd3      	ldrb	r3, [r2, r3]
 80033f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000
 8003400:	08008ba4 	.word	0x08008ba4

08003404 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	220f      	movs	r2, #15
 8003412:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003414:	4b11      	ldr	r3, [pc, #68]	; (800345c <HAL_RCC_GetClockConfig+0x58>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 0203 	and.w	r2, r3, #3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003420:	4b0e      	ldr	r3, [pc, #56]	; (800345c <HAL_RCC_GetClockConfig+0x58>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_RCC_GetClockConfig+0x58>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003438:	4b08      	ldr	r3, [pc, #32]	; (800345c <HAL_RCC_GetClockConfig+0x58>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	08db      	lsrs	r3, r3, #3
 800343e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_RCC_GetClockConfig+0x5c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0207 	and.w	r2, r3, #7
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr
 800345c:	40021000 	.word	0x40021000
 8003460:	40022000 	.word	0x40022000

08003464 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800346c:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <RCC_Delay+0x34>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a0a      	ldr	r2, [pc, #40]	; (800349c <RCC_Delay+0x38>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	0a5b      	lsrs	r3, r3, #9
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	fb02 f303 	mul.w	r3, r2, r3
 800347e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003480:	bf00      	nop
  }
  while (Delay --);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	1e5a      	subs	r2, r3, #1
 8003486:	60fa      	str	r2, [r7, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1f9      	bne.n	8003480 <RCC_Delay+0x1c>
}
 800348c:	bf00      	nop
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	20000014 	.word	0x20000014
 800349c:	10624dd3 	.word	0x10624dd3

080034a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d07d      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80034bc:	2300      	movs	r3, #0
 80034be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c0:	4b4f      	ldr	r3, [pc, #316]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10d      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034cc:	4b4c      	ldr	r3, [pc, #304]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	4a4b      	ldr	r2, [pc, #300]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d6:	61d3      	str	r3, [r2, #28]
 80034d8:	4b49      	ldr	r3, [pc, #292]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e4:	2301      	movs	r3, #1
 80034e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e8:	4b46      	ldr	r3, [pc, #280]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d118      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034f4:	4b43      	ldr	r3, [pc, #268]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a42      	ldr	r2, [pc, #264]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003500:	f7fe fce2 	bl	8001ec8 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003506:	e008      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003508:	f7fe fcde 	bl	8001ec8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b64      	cmp	r3, #100	; 0x64
 8003514:	d901      	bls.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e06d      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351a:	4b3a      	ldr	r3, [pc, #232]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003526:	4b36      	ldr	r3, [pc, #216]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d02e      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	429a      	cmp	r2, r3
 8003542:	d027      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003544:	4b2e      	ldr	r3, [pc, #184]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800354e:	4b2e      	ldr	r3, [pc, #184]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003550:	2201      	movs	r2, #1
 8003552:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003554:	4b2c      	ldr	r3, [pc, #176]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800355a:	4a29      	ldr	r2, [pc, #164]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d014      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356a:	f7fe fcad 	bl	8001ec8 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003570:	e00a      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003572:	f7fe fca9 	bl	8001ec8 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003580:	4293      	cmp	r3, r2
 8003582:	d901      	bls.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e036      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003588:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0ee      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003594:	4b1a      	ldr	r3, [pc, #104]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	4917      	ldr	r1, [pc, #92]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035a6:	7dfb      	ldrb	r3, [r7, #23]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d105      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ac:	4b14      	ldr	r3, [pc, #80]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	4a13      	ldr	r2, [pc, #76]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035c4:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	490b      	ldr	r1, [pc, #44]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d008      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035e2:	4b07      	ldr	r3, [pc, #28]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	4904      	ldr	r1, [pc, #16]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000
 8003604:	40007000 	.word	0x40007000
 8003608:	42420440 	.word	0x42420440

0800360c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800360c:	b590      	push	{r4, r7, lr}
 800360e:	b08d      	sub	sp, #52	; 0x34
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003614:	4b55      	ldr	r3, [pc, #340]	; (800376c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003616:	f107 040c 	add.w	r4, r7, #12
 800361a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800361c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003620:	4b53      	ldr	r3, [pc, #332]	; (8003770 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
 800362a:	2300      	movs	r3, #0
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800362e:	2300      	movs	r3, #0
 8003630:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	2300      	movs	r3, #0
 8003638:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d07f      	beq.n	8003740 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003640:	2b10      	cmp	r3, #16
 8003642:	d002      	beq.n	800364a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003644:	2b01      	cmp	r3, #1
 8003646:	d048      	beq.n	80036da <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003648:	e08b      	b.n	8003762 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800364a:	4b4a      	ldr	r3, [pc, #296]	; (8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003650:	4b48      	ldr	r3, [pc, #288]	; (8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d07f      	beq.n	800375c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	0c9b      	lsrs	r3, r3, #18
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003668:	4413      	add	r3, r2
 800366a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800366e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d018      	beq.n	80036ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800367a:	4b3e      	ldr	r3, [pc, #248]	; (8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	0c5b      	lsrs	r3, r3, #17
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003688:	4413      	add	r3, r2
 800368a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00d      	beq.n	80036b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800369a:	4a37      	ldr	r2, [pc, #220]	; (8003778 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	fbb2 f2f3 	udiv	r2, r2, r3
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	fb02 f303 	mul.w	r3, r2, r3
 80036a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036aa:	e004      	b.n	80036b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	4a33      	ldr	r2, [pc, #204]	; (800377c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80036b0:	fb02 f303 	mul.w	r3, r2, r3
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80036b6:	4b2f      	ldr	r3, [pc, #188]	; (8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c2:	d102      	bne.n	80036ca <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036c8:	e048      	b.n	800375c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	4a2c      	ldr	r2, [pc, #176]	; (8003780 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	085b      	lsrs	r3, r3, #1
 80036d6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036d8:	e040      	b.n	800375c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80036da:	4b26      	ldr	r3, [pc, #152]	; (8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ea:	d108      	bne.n	80036fe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80036f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80036fc:	e01f      	b.n	800373e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003708:	d109      	bne.n	800371e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800370a:	4b1a      	ldr	r3, [pc, #104]	; (8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003716:	f649 4340 	movw	r3, #40000	; 0x9c40
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28
 800371c:	e00f      	b.n	800373e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003724:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003728:	d11a      	bne.n	8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800372a:	4b12      	ldr	r3, [pc, #72]	; (8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d014      	beq.n	8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003736:	f24f 4324 	movw	r3, #62500	; 0xf424
 800373a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800373c:	e010      	b.n	8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800373e:	e00f      	b.n	8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003740:	f7ff fe4c 	bl	80033dc <HAL_RCC_GetPCLK2Freq>
 8003744:	4602      	mov	r2, r0
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	0b9b      	lsrs	r3, r3, #14
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	3301      	adds	r3, #1
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	fbb2 f3f3 	udiv	r3, r2, r3
 8003758:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800375a:	e002      	b.n	8003762 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800375c:	bf00      	nop
 800375e:	e000      	b.n	8003762 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003760:	bf00      	nop
    }
  }
  return (frequency);
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003764:	4618      	mov	r0, r3
 8003766:	3734      	adds	r7, #52	; 0x34
 8003768:	46bd      	mov	sp, r7
 800376a:	bd90      	pop	{r4, r7, pc}
 800376c:	08008ab0 	.word	0x08008ab0
 8003770:	08008ac0 	.word	0x08008ac0
 8003774:	40021000 	.word	0x40021000
 8003778:	007a1200 	.word	0x007a1200
 800377c:	003d0900 	.word	0x003d0900
 8003780:	aaaaaaab 	.word	0xaaaaaaab

08003784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e041      	b.n	800381a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f839 	bl	8003822 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3304      	adds	r3, #4
 80037c0:	4619      	mov	r1, r3
 80037c2:	4610      	mov	r0, r2
 80037c4:	f000 fb64 	bl	8003e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b01      	cmp	r3, #1
 8003846:	d001      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e03a      	b.n	80038c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a18      	ldr	r2, [pc, #96]	; (80038cc <HAL_TIM_Base_Start_IT+0x98>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00e      	beq.n	800388c <HAL_TIM_Base_Start_IT+0x58>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003876:	d009      	beq.n	800388c <HAL_TIM_Base_Start_IT+0x58>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a14      	ldr	r2, [pc, #80]	; (80038d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d004      	beq.n	800388c <HAL_TIM_Base_Start_IT+0x58>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a13      	ldr	r2, [pc, #76]	; (80038d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d111      	bne.n	80038b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b06      	cmp	r3, #6
 800389c:	d010      	beq.n	80038c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0201 	orr.w	r2, r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ae:	e007      	b.n	80038c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr
 80038cc:	40012c00 	.word	0x40012c00
 80038d0:	40000400 	.word	0x40000400
 80038d4:	40000800 	.word	0x40000800

080038d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e041      	b.n	800396e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fe f940 	bl	8001b84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3304      	adds	r3, #4
 8003914:	4619      	mov	r1, r3
 8003916:	4610      	mov	r0, r2
 8003918:	f000 faba 	bl	8003e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d109      	bne.n	800399c <HAL_TIM_PWM_Start+0x24>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	bf14      	ite	ne
 8003994:	2301      	movne	r3, #1
 8003996:	2300      	moveq	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	e022      	b.n	80039e2 <HAL_TIM_PWM_Start+0x6a>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d109      	bne.n	80039b6 <HAL_TIM_PWM_Start+0x3e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	bf14      	ite	ne
 80039ae:	2301      	movne	r3, #1
 80039b0:	2300      	moveq	r3, #0
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	e015      	b.n	80039e2 <HAL_TIM_PWM_Start+0x6a>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d109      	bne.n	80039d0 <HAL_TIM_PWM_Start+0x58>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	bf14      	ite	ne
 80039c8:	2301      	movne	r3, #1
 80039ca:	2300      	moveq	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	e008      	b.n	80039e2 <HAL_TIM_PWM_Start+0x6a>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	bf14      	ite	ne
 80039dc:	2301      	movne	r3, #1
 80039de:	2300      	moveq	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e05e      	b.n	8003aa8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d104      	bne.n	80039fa <HAL_TIM_PWM_Start+0x82>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f8:	e013      	b.n	8003a22 <HAL_TIM_PWM_Start+0xaa>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d104      	bne.n	8003a0a <HAL_TIM_PWM_Start+0x92>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a08:	e00b      	b.n	8003a22 <HAL_TIM_PWM_Start+0xaa>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d104      	bne.n	8003a1a <HAL_TIM_PWM_Start+0xa2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a18:	e003      	b.n	8003a22 <HAL_TIM_PWM_Start+0xaa>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2201      	movs	r2, #1
 8003a28:	6839      	ldr	r1, [r7, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fc1a 	bl	8004264 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1e      	ldr	r2, [pc, #120]	; (8003ab0 <HAL_TIM_PWM_Start+0x138>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d107      	bne.n	8003a4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a18      	ldr	r2, [pc, #96]	; (8003ab0 <HAL_TIM_PWM_Start+0x138>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00e      	beq.n	8003a72 <HAL_TIM_PWM_Start+0xfa>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a5c:	d009      	beq.n	8003a72 <HAL_TIM_PWM_Start+0xfa>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a14      	ldr	r2, [pc, #80]	; (8003ab4 <HAL_TIM_PWM_Start+0x13c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d004      	beq.n	8003a72 <HAL_TIM_PWM_Start+0xfa>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a12      	ldr	r2, [pc, #72]	; (8003ab8 <HAL_TIM_PWM_Start+0x140>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d111      	bne.n	8003a96 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b06      	cmp	r3, #6
 8003a82:	d010      	beq.n	8003aa6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0201 	orr.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a94:	e007      	b.n	8003aa6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f042 0201 	orr.w	r2, r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40012c00 	.word	0x40012c00
 8003ab4:	40000400 	.word	0x40000400
 8003ab8:	40000800 	.word	0x40000800

08003abc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d122      	bne.n	8003b18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d11b      	bne.n	8003b18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0202 	mvn.w	r2, #2
 8003ae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f9ab 	bl	8003e5a <HAL_TIM_IC_CaptureCallback>
 8003b04:	e005      	b.n	8003b12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f99e 	bl	8003e48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f9ad 	bl	8003e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d122      	bne.n	8003b6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d11b      	bne.n	8003b6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0204 	mvn.w	r2, #4
 8003b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2202      	movs	r2, #2
 8003b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f981 	bl	8003e5a <HAL_TIM_IC_CaptureCallback>
 8003b58:	e005      	b.n	8003b66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f974 	bl	8003e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f983 	bl	8003e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d122      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d11b      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0208 	mvn.w	r2, #8
 8003b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2204      	movs	r2, #4
 8003b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f957 	bl	8003e5a <HAL_TIM_IC_CaptureCallback>
 8003bac:	e005      	b.n	8003bba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f94a 	bl	8003e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f959 	bl	8003e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0310 	and.w	r3, r3, #16
 8003bca:	2b10      	cmp	r3, #16
 8003bcc:	d122      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b10      	cmp	r3, #16
 8003bda:	d11b      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0210 	mvn.w	r2, #16
 8003be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2208      	movs	r2, #8
 8003bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f92d 	bl	8003e5a <HAL_TIM_IC_CaptureCallback>
 8003c00:	e005      	b.n	8003c0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f920 	bl	8003e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f92f 	bl	8003e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d10e      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d107      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0201 	mvn.w	r2, #1
 8003c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd ff18 	bl	8001a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4a:	2b80      	cmp	r3, #128	; 0x80
 8003c4c:	d10e      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c58:	2b80      	cmp	r3, #128	; 0x80
 8003c5a:	d107      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fbd8 	bl	800441c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c76:	2b40      	cmp	r3, #64	; 0x40
 8003c78:	d10e      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c84:	2b40      	cmp	r3, #64	; 0x40
 8003c86:	d107      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f8f3 	bl	8003e7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d10e      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0320 	and.w	r3, r3, #32
 8003cb0:	2b20      	cmp	r3, #32
 8003cb2:	d107      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0220 	mvn.w	r2, #32
 8003cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fba3 	bl	800440a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cc4:	bf00      	nop
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e0ac      	b.n	8003e40 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b0c      	cmp	r3, #12
 8003cf2:	f200 809f 	bhi.w	8003e34 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003cf6:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d31 	.word	0x08003d31
 8003d00:	08003e35 	.word	0x08003e35
 8003d04:	08003e35 	.word	0x08003e35
 8003d08:	08003e35 	.word	0x08003e35
 8003d0c:	08003d71 	.word	0x08003d71
 8003d10:	08003e35 	.word	0x08003e35
 8003d14:	08003e35 	.word	0x08003e35
 8003d18:	08003e35 	.word	0x08003e35
 8003d1c:	08003db3 	.word	0x08003db3
 8003d20:	08003e35 	.word	0x08003e35
 8003d24:	08003e35 	.word	0x08003e35
 8003d28:	08003e35 	.word	0x08003e35
 8003d2c:	08003df3 	.word	0x08003df3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 f90c 	bl	8003f54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0208 	orr.w	r2, r2, #8
 8003d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0204 	bic.w	r2, r2, #4
 8003d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6999      	ldr	r1, [r3, #24]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	619a      	str	r2, [r3, #24]
      break;
 8003d6e:	e062      	b.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68b9      	ldr	r1, [r7, #8]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 f952 	bl	8004020 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699a      	ldr	r2, [r3, #24]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6999      	ldr	r1, [r3, #24]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	021a      	lsls	r2, r3, #8
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	619a      	str	r2, [r3, #24]
      break;
 8003db0:	e041      	b.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 f99b 	bl	80040f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0208 	orr.w	r2, r2, #8
 8003dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0204 	bic.w	r2, r2, #4
 8003ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69d9      	ldr	r1, [r3, #28]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	61da      	str	r2, [r3, #28]
      break;
 8003df0:	e021      	b.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 f9e5 	bl	80041c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	69da      	ldr	r2, [r3, #28]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69d9      	ldr	r1, [r3, #28]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	021a      	lsls	r2, r3, #8
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	61da      	str	r2, [r3, #28]
      break;
 8003e32:	e000      	b.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003e34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr

08003e5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr

08003e7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr

08003e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a29      	ldr	r2, [pc, #164]	; (8003f48 <TIM_Base_SetConfig+0xb8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00b      	beq.n	8003ec0 <TIM_Base_SetConfig+0x30>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eae:	d007      	beq.n	8003ec0 <TIM_Base_SetConfig+0x30>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a26      	ldr	r2, [pc, #152]	; (8003f4c <TIM_Base_SetConfig+0xbc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d003      	beq.n	8003ec0 <TIM_Base_SetConfig+0x30>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a25      	ldr	r2, [pc, #148]	; (8003f50 <TIM_Base_SetConfig+0xc0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d108      	bne.n	8003ed2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a1c      	ldr	r2, [pc, #112]	; (8003f48 <TIM_Base_SetConfig+0xb8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00b      	beq.n	8003ef2 <TIM_Base_SetConfig+0x62>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee0:	d007      	beq.n	8003ef2 <TIM_Base_SetConfig+0x62>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a19      	ldr	r2, [pc, #100]	; (8003f4c <TIM_Base_SetConfig+0xbc>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d003      	beq.n	8003ef2 <TIM_Base_SetConfig+0x62>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a18      	ldr	r2, [pc, #96]	; (8003f50 <TIM_Base_SetConfig+0xc0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d108      	bne.n	8003f04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a07      	ldr	r2, [pc, #28]	; (8003f48 <TIM_Base_SetConfig+0xb8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d103      	bne.n	8003f38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	615a      	str	r2, [r3, #20]
}
 8003f3e:	bf00      	nop
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr
 8003f48:	40012c00 	.word	0x40012c00
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40000800 	.word	0x40000800

08003f54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	f023 0201 	bic.w	r2, r3, #1
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0303 	bic.w	r3, r3, #3
 8003f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f023 0302 	bic.w	r3, r3, #2
 8003f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a1c      	ldr	r2, [pc, #112]	; (800401c <TIM_OC1_SetConfig+0xc8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d10c      	bne.n	8003fca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f023 0308 	bic.w	r3, r3, #8
 8003fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f023 0304 	bic.w	r3, r3, #4
 8003fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a13      	ldr	r2, [pc, #76]	; (800401c <TIM_OC1_SetConfig+0xc8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d111      	bne.n	8003ff6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	621a      	str	r2, [r3, #32]
}
 8004010:	bf00      	nop
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40012c00 	.word	0x40012c00

08004020 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f023 0210 	bic.w	r2, r3, #16
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800404e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f023 0320 	bic.w	r3, r3, #32
 800406a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a1d      	ldr	r2, [pc, #116]	; (80040f0 <TIM_OC2_SetConfig+0xd0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d10d      	bne.n	800409c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800409a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a14      	ldr	r2, [pc, #80]	; (80040f0 <TIM_OC2_SetConfig+0xd0>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d113      	bne.n	80040cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	621a      	str	r2, [r3, #32]
}
 80040e6:	bf00      	nop
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr
 80040f0:	40012c00 	.word	0x40012c00

080040f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0303 	bic.w	r3, r3, #3
 800412a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800413c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a1d      	ldr	r2, [pc, #116]	; (80041c4 <TIM_OC3_SetConfig+0xd0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d10d      	bne.n	800416e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	021b      	lsls	r3, r3, #8
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800416c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a14      	ldr	r2, [pc, #80]	; (80041c4 <TIM_OC3_SetConfig+0xd0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d113      	bne.n	800419e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800417c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4313      	orrs	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	621a      	str	r2, [r3, #32]
}
 80041b8:	bf00      	nop
 80041ba:	371c      	adds	r7, #28
 80041bc:	46bd      	mov	sp, r7
 80041be:	bc80      	pop	{r7}
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40012c00 	.word	0x40012c00

080041c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	031b      	lsls	r3, r3, #12
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a0f      	ldr	r2, [pc, #60]	; (8004260 <TIM_OC4_SetConfig+0x98>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d109      	bne.n	800423c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800422e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	019b      	lsls	r3, r3, #6
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	621a      	str	r2, [r3, #32]
}
 8004256:	bf00      	nop
 8004258:	371c      	adds	r7, #28
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr
 8004260:	40012c00 	.word	0x40012c00

08004264 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	2201      	movs	r2, #1
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a1a      	ldr	r2, [r3, #32]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	43db      	mvns	r3, r3
 8004286:	401a      	ands	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a1a      	ldr	r2, [r3, #32]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	fa01 f303 	lsl.w	r3, r1, r3
 800429c:	431a      	orrs	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	621a      	str	r2, [r3, #32]
}
 80042a2:	bf00      	nop
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e046      	b.n	8004352 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a16      	ldr	r2, [pc, #88]	; (800435c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00e      	beq.n	8004326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004310:	d009      	beq.n	8004326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a12      	ldr	r2, [pc, #72]	; (8004360 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d004      	beq.n	8004326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a10      	ldr	r2, [pc, #64]	; (8004364 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d10c      	bne.n	8004340 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800432c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	4313      	orrs	r3, r2
 8004336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr
 800435c:	40012c00 	.word	0x40012c00
 8004360:	40000400 	.word	0x40000400
 8004364:	40000800 	.word	0x40000800

08004368 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004380:	2302      	movs	r3, #2
 8004382:	e03d      	b.n	8004400 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr

0800440a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr

0800441c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	bc80      	pop	{r7}
 800442c:	4770      	bx	lr

0800442e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b082      	sub	sp, #8
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e03f      	b.n	80044c0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d106      	bne.n	800445a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7fd fbe9 	bl	8001c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2224      	movs	r2, #36	; 0x24
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004470:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f904 	bl	8004680 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004486:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695a      	ldr	r2, [r3, #20]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004496:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08a      	sub	sp, #40	; 0x28
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	4613      	mov	r3, r2
 80044d6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b20      	cmp	r3, #32
 80044e6:	d17c      	bne.n	80045e2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <HAL_UART_Transmit+0x2c>
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e075      	b.n	80045e4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_UART_Transmit+0x3e>
 8004502:	2302      	movs	r3, #2
 8004504:	e06e      	b.n	80045e4 <HAL_UART_Transmit+0x11c>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2221      	movs	r2, #33	; 0x21
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800451c:	f7fd fcd4 	bl	8001ec8 <HAL_GetTick>
 8004520:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	88fa      	ldrh	r2, [r7, #6]
 8004526:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	88fa      	ldrh	r2, [r7, #6]
 800452c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004536:	d108      	bne.n	800454a <HAL_UART_Transmit+0x82>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004540:	2300      	movs	r3, #0
 8004542:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	61bb      	str	r3, [r7, #24]
 8004548:	e003      	b.n	8004552 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800454e:	2300      	movs	r3, #0
 8004550:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800455a:	e02a      	b.n	80045b2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2200      	movs	r2, #0
 8004564:	2180      	movs	r1, #128	; 0x80
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 f840 	bl	80045ec <UART_WaitOnFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e036      	b.n	80045e4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10b      	bne.n	8004594 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800458a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	3302      	adds	r3, #2
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	e007      	b.n	80045a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	781a      	ldrb	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	3301      	adds	r3, #1
 80045a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1cf      	bne.n	800455c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2200      	movs	r2, #0
 80045c4:	2140      	movs	r1, #64	; 0x40
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 f810 	bl	80045ec <UART_WaitOnFlagUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e006      	b.n	80045e4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	e000      	b.n	80045e4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045e2:	2302      	movs	r3, #2
  }
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3720      	adds	r7, #32
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	603b      	str	r3, [r7, #0]
 80045f8:	4613      	mov	r3, r2
 80045fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045fc:	e02c      	b.n	8004658 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004604:	d028      	beq.n	8004658 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d007      	beq.n	800461c <UART_WaitOnFlagUntilTimeout+0x30>
 800460c:	f7fd fc5c 	bl	8001ec8 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	429a      	cmp	r2, r3
 800461a:	d21d      	bcs.n	8004658 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800462a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695a      	ldr	r2, [r3, #20]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0201 	bic.w	r2, r2, #1
 800463a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e00f      	b.n	8004678 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4013      	ands	r3, r2
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	429a      	cmp	r2, r3
 8004666:	bf0c      	ite	eq
 8004668:	2301      	moveq	r3, #1
 800466a:	2300      	movne	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	461a      	mov	r2, r3
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	429a      	cmp	r2, r3
 8004674:	d0c3      	beq.n	80045fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046ba:	f023 030c 	bic.w	r3, r3, #12
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6812      	ldr	r2, [r2, #0]
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	430b      	orrs	r3, r1
 80046c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2c      	ldr	r2, [pc, #176]	; (8004794 <UART_SetConfig+0x114>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d103      	bne.n	80046f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80046e8:	f7fe fe78 	bl	80033dc <HAL_RCC_GetPCLK2Freq>
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	e002      	b.n	80046f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80046f0:	f7fe fe60 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 80046f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	4613      	mov	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	009a      	lsls	r2, r3, #2
 8004700:	441a      	add	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	fbb2 f3f3 	udiv	r3, r2, r3
 800470c:	4a22      	ldr	r2, [pc, #136]	; (8004798 <UART_SetConfig+0x118>)
 800470e:	fba2 2303 	umull	r2, r3, r2, r3
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	0119      	lsls	r1, r3, #4
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	009a      	lsls	r2, r3, #2
 8004720:	441a      	add	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	fbb2 f2f3 	udiv	r2, r2, r3
 800472c:	4b1a      	ldr	r3, [pc, #104]	; (8004798 <UART_SetConfig+0x118>)
 800472e:	fba3 0302 	umull	r0, r3, r3, r2
 8004732:	095b      	lsrs	r3, r3, #5
 8004734:	2064      	movs	r0, #100	; 0x64
 8004736:	fb00 f303 	mul.w	r3, r0, r3
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	3332      	adds	r3, #50	; 0x32
 8004740:	4a15      	ldr	r2, [pc, #84]	; (8004798 <UART_SetConfig+0x118>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800474c:	4419      	add	r1, r3
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	009a      	lsls	r2, r3, #2
 8004758:	441a      	add	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	fbb2 f2f3 	udiv	r2, r2, r3
 8004764:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <UART_SetConfig+0x118>)
 8004766:	fba3 0302 	umull	r0, r3, r3, r2
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	2064      	movs	r0, #100	; 0x64
 800476e:	fb00 f303 	mul.w	r3, r0, r3
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	3332      	adds	r3, #50	; 0x32
 8004778:	4a07      	ldr	r2, [pc, #28]	; (8004798 <UART_SetConfig+0x118>)
 800477a:	fba2 2303 	umull	r2, r3, r2, r3
 800477e:	095b      	lsrs	r3, r3, #5
 8004780:	f003 020f 	and.w	r2, r3, #15
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	440a      	add	r2, r1
 800478a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800478c:	bf00      	nop
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40013800 	.word	0x40013800
 8004798:	51eb851f 	.word	0x51eb851f

0800479c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f103 0208 	add.w	r2, r3, #8
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f04f 32ff 	mov.w	r2, #4294967295
 80047b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f103 0208 	add.w	r2, r3, #8
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f103 0208 	add.w	r2, r3, #8
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr

080047da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bc80      	pop	{r7}
 80047f0:	4770      	bx	lr

080047f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047f2:	b480      	push	{r7}
 80047f4:	b085      	sub	sp, #20
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	601a      	str	r2, [r3, #0]
}
 800482e:	bf00      	nop
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484e:	d103      	bne.n	8004858 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	e00c      	b.n	8004872 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3308      	adds	r3, #8
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	e002      	b.n	8004866 <vListInsert+0x2e>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	429a      	cmp	r2, r3
 8004870:	d2f6      	bcs.n	8004860 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	601a      	str	r2, [r3, #0]
}
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr

080048a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6892      	ldr	r2, [r2, #8]
 80048be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6852      	ldr	r2, [r2, #4]
 80048c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d103      	bne.n	80048dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	1e5a      	subs	r2, r3, #1
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bc80      	pop	{r7}
 80048f8:	4770      	bx	lr
	...

080048fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d109      	bne.n	8004924 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	60bb      	str	r3, [r7, #8]
 8004922:	e7fe      	b.n	8004922 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004924:	f001 fc5e 	bl	80061e4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004930:	68f9      	ldr	r1, [r7, #12]
 8004932:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004934:	fb01 f303 	mul.w	r3, r1, r3
 8004938:	441a      	add	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004954:	3b01      	subs	r3, #1
 8004956:	68f9      	ldr	r1, [r7, #12]
 8004958:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800495a:	fb01 f303 	mul.w	r3, r1, r3
 800495e:	441a      	add	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	22ff      	movs	r2, #255	; 0xff
 8004968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	22ff      	movs	r2, #255	; 0xff
 8004970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d114      	bne.n	80049a4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d01a      	beq.n	80049b8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	3310      	adds	r3, #16
 8004986:	4618      	mov	r0, r3
 8004988:	f001 f80e 	bl	80059a8 <xTaskRemoveFromEventList>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d012      	beq.n	80049b8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004992:	4b0d      	ldr	r3, [pc, #52]	; (80049c8 <xQueueGenericReset+0xcc>)
 8004994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	e009      	b.n	80049b8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3310      	adds	r3, #16
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff fef7 	bl	800479c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	3324      	adds	r3, #36	; 0x24
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff fef2 	bl	800479c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049b8:	f001 fc42 	bl	8006240 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049bc:	2301      	movs	r3, #1
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	e000ed04 	.word	0xe000ed04

080049cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08a      	sub	sp, #40	; 0x28
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	4613      	mov	r3, r2
 80049d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d109      	bne.n	80049f4 <xQueueGenericCreate+0x28>
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	613b      	str	r3, [r7, #16]
 80049f2:	e7fe      	b.n	80049f2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d102      	bne.n	8004a00 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80049fa:	2300      	movs	r3, #0
 80049fc:	61fb      	str	r3, [r7, #28]
 80049fe:	e004      	b.n	8004a0a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	fb02 f303 	mul.w	r3, r2, r3
 8004a08:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	3348      	adds	r3, #72	; 0x48
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f001 fce8 	bl	80063e4 <pvPortMalloc>
 8004a14:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00f      	beq.n	8004a3c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	3348      	adds	r3, #72	; 0x48
 8004a20:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a2a:	79fa      	ldrb	r2, [r7, #7]
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	4613      	mov	r3, r2
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	68b9      	ldr	r1, [r7, #8]
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 f805 	bl	8004a46 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004a3c:	69bb      	ldr	r3, [r7, #24]
	}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3720      	adds	r7, #32
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	607a      	str	r2, [r7, #4]
 8004a52:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d103      	bne.n	8004a62 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	e002      	b.n	8004a68 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a74:	2101      	movs	r1, #1
 8004a76:	69b8      	ldr	r0, [r7, #24]
 8004a78:	f7ff ff40 	bl	80048fc <xQueueGenericReset>
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	68f9      	ldr	r1, [r7, #12]
 8004a82:	2073      	movs	r0, #115	; 0x73
 8004a84:	f002 fc9e 	bl	80073c4 <SEGGER_SYSVIEW_RecordU32x3>
}
 8004a88:	bf00      	nop
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b090      	sub	sp, #64	; 0x40
 8004a94:	af02      	add	r7, sp, #8
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d109      	bne.n	8004ac0 <xQueueGenericSend+0x30>
 8004aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004abe:	e7fe      	b.n	8004abe <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d103      	bne.n	8004ace <xQueueGenericSend+0x3e>
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <xQueueGenericSend+0x42>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <xQueueGenericSend+0x44>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d109      	bne.n	8004aec <xQueueGenericSend+0x5c>
 8004ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aea:	e7fe      	b.n	8004aea <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d103      	bne.n	8004afa <xQueueGenericSend+0x6a>
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <xQueueGenericSend+0x6e>
 8004afa:	2301      	movs	r3, #1
 8004afc:	e000      	b.n	8004b00 <xQueueGenericSend+0x70>
 8004afe:	2300      	movs	r3, #0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d109      	bne.n	8004b18 <xQueueGenericSend+0x88>
 8004b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	623b      	str	r3, [r7, #32]
 8004b16:	e7fe      	b.n	8004b16 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b18:	f001 f904 	bl	8005d24 <xTaskGetSchedulerState>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d102      	bne.n	8004b28 <xQueueGenericSend+0x98>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <xQueueGenericSend+0x9c>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <xQueueGenericSend+0x9e>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d109      	bne.n	8004b46 <xQueueGenericSend+0xb6>
 8004b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	e7fe      	b.n	8004b44 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b46:	f001 fb4d 	bl	80061e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d302      	bcc.n	8004b5c <xQueueGenericSend+0xcc>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d136      	bne.n	8004bca <xQueueGenericSend+0x13a>
			{
				traceQUEUE_SEND( pxQueue );
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f003 f9ba 	bl	8007ed8 <SEGGER_SYSVIEW_ShrinkId>
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	6879      	ldr	r1, [r7, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4601      	mov	r1, r0
 8004b70:	205a      	movs	r0, #90	; 0x5a
 8004b72:	f002 fc9d 	bl	80074b0 <SEGGER_SYSVIEW_RecordU32x4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b7c:	f000 f9be 	bl	8004efc <prvCopyDataToQueue>
 8004b80:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d010      	beq.n	8004bac <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8c:	3324      	adds	r3, #36	; 0x24
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 ff0a 	bl	80059a8 <xTaskRemoveFromEventList>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d013      	beq.n	8004bc2 <xQueueGenericSend+0x132>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b9a:	4b4d      	ldr	r3, [pc, #308]	; (8004cd0 <xQueueGenericSend+0x240>)
 8004b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	e00a      	b.n	8004bc2 <xQueueGenericSend+0x132>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d007      	beq.n	8004bc2 <xQueueGenericSend+0x132>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004bb2:	4b47      	ldr	r3, [pc, #284]	; (8004cd0 <xQueueGenericSend+0x240>)
 8004bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bc2:	f001 fb3d 	bl	8006240 <vPortExitCritical>
				return pdPASS;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e07d      	b.n	8004cc6 <xQueueGenericSend+0x236>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d110      	bne.n	8004bf2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bd0:	f001 fb36 	bl	8006240 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f003 f97e 	bl	8007ed8 <SEGGER_SYSVIEW_ShrinkId>
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	460b      	mov	r3, r1
 8004be6:	4601      	mov	r1, r0
 8004be8:	205a      	movs	r0, #90	; 0x5a
 8004bea:	f002 fc61 	bl	80074b0 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e069      	b.n	8004cc6 <xQueueGenericSend+0x236>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d106      	bne.n	8004c06 <xQueueGenericSend+0x176>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bf8:	f107 0314 	add.w	r3, r7, #20
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 ff39 	bl	8005a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c02:	2301      	movs	r3, #1
 8004c04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c06:	f001 fb1b 	bl	8006240 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c0a:	f000 fcc1 	bl	8005590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c0e:	f001 fae9 	bl	80061e4 <vPortEnterCritical>
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c18:	b25b      	sxtb	r3, r3
 8004c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1e:	d103      	bne.n	8004c28 <xQueueGenericSend+0x198>
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c2e:	b25b      	sxtb	r3, r3
 8004c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c34:	d103      	bne.n	8004c3e <xQueueGenericSend+0x1ae>
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c3e:	f001 faff 	bl	8006240 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c42:	1d3a      	adds	r2, r7, #4
 8004c44:	f107 0314 	add.w	r3, r7, #20
 8004c48:	4611      	mov	r1, r2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 ff28 	bl	8005aa0 <xTaskCheckForTimeOut>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d124      	bne.n	8004ca0 <xQueueGenericSend+0x210>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c58:	f000 fa48 	bl	80050ec <prvIsQueueFull>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d018      	beq.n	8004c94 <xQueueGenericSend+0x204>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c64:	3310      	adds	r3, #16
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	4611      	mov	r1, r2
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fe78 	bl	8005960 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c72:	f000 f9d3 	bl	800501c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c76:	f000 fc99 	bl	80055ac <xTaskResumeAll>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f47f af62 	bne.w	8004b46 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004c82:	4b13      	ldr	r3, [pc, #76]	; (8004cd0 <xQueueGenericSend+0x240>)
 8004c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	e758      	b.n	8004b46 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c96:	f000 f9c1 	bl	800501c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c9a:	f000 fc87 	bl	80055ac <xTaskResumeAll>
 8004c9e:	e752      	b.n	8004b46 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ca2:	f000 f9bb 	bl	800501c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ca6:	f000 fc81 	bl	80055ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	4618      	mov	r0, r3
 8004cae:	f003 f913 	bl	8007ed8 <SEGGER_SYSVIEW_ShrinkId>
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4601      	mov	r1, r0
 8004cbe:	205a      	movs	r0, #90	; 0x5a
 8004cc0:	f002 fbf6 	bl	80074b0 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8004cc4:	2300      	movs	r3, #0
		}
	}
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3738      	adds	r7, #56	; 0x38
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	e000ed04 	.word	0xe000ed04

08004cd4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004cd4:	b590      	push	{r4, r7, lr}
 8004cd6:	b08f      	sub	sp, #60	; 0x3c
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d109      	bne.n	8004d02 <xQueueReceive+0x2e>
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	623b      	str	r3, [r7, #32]
 8004d00:	e7fe      	b.n	8004d00 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d103      	bne.n	8004d10 <xQueueReceive+0x3c>
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <xQueueReceive+0x40>
 8004d10:	2301      	movs	r3, #1
 8004d12:	e000      	b.n	8004d16 <xQueueReceive+0x42>
 8004d14:	2300      	movs	r3, #0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d109      	bne.n	8004d2e <xQueueReceive+0x5a>
 8004d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	e7fe      	b.n	8004d2c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d2e:	f000 fff9 	bl	8005d24 <xTaskGetSchedulerState>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d102      	bne.n	8004d3e <xQueueReceive+0x6a>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <xQueueReceive+0x6e>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e000      	b.n	8004d44 <xQueueReceive+0x70>
 8004d42:	2300      	movs	r3, #0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d109      	bne.n	8004d5c <xQueueReceive+0x88>
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	61bb      	str	r3, [r7, #24]
 8004d5a:	e7fe      	b.n	8004d5a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d5c:	f001 fa42 	bl	80061e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d031      	beq.n	8004dd0 <xQueueReceive+0xfc>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d6c:	68b9      	ldr	r1, [r7, #8]
 8004d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d70:	f000 f92e 	bl	8004fd0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8004d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d76:	4618      	mov	r0, r3
 8004d78:	f003 f8ae 	bl	8007ed8 <SEGGER_SYSVIEW_ShrinkId>
 8004d7c:	4604      	mov	r4, r0
 8004d7e:	2000      	movs	r0, #0
 8004d80:	f003 f8aa 	bl	8007ed8 <SEGGER_SYSVIEW_ShrinkId>
 8004d84:	4601      	mov	r1, r0
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	2301      	movs	r3, #1
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	460a      	mov	r2, r1
 8004d90:	4621      	mov	r1, r4
 8004d92:	205c      	movs	r0, #92	; 0x5c
 8004d94:	f002 fb8c 	bl	80074b0 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	1e5a      	subs	r2, r3, #1
 8004d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00f      	beq.n	8004dc8 <xQueueReceive+0xf4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004daa:	3310      	adds	r3, #16
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 fdfb 	bl	80059a8 <xTaskRemoveFromEventList>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d007      	beq.n	8004dc8 <xQueueReceive+0xf4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004db8:	4b4f      	ldr	r3, [pc, #316]	; (8004ef8 <xQueueReceive+0x224>)
 8004dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004dc8:	f001 fa3a 	bl	8006240 <vPortExitCritical>
				return pdPASS;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e08e      	b.n	8004eee <xQueueReceive+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d115      	bne.n	8004e02 <xQueueReceive+0x12e>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dd6:	f001 fa33 	bl	8006240 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f003 f87b 	bl	8007ed8 <SEGGER_SYSVIEW_ShrinkId>
 8004de2:	4604      	mov	r4, r0
 8004de4:	2000      	movs	r0, #0
 8004de6:	f003 f877 	bl	8007ed8 <SEGGER_SYSVIEW_ShrinkId>
 8004dea:	4601      	mov	r1, r0
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	2301      	movs	r3, #1
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	4613      	mov	r3, r2
 8004df4:	460a      	mov	r2, r1
 8004df6:	4621      	mov	r1, r4
 8004df8:	205c      	movs	r0, #92	; 0x5c
 8004dfa:	f002 fb59 	bl	80074b0 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e075      	b.n	8004eee <xQueueReceive+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d106      	bne.n	8004e16 <xQueueReceive+0x142>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e08:	f107 0310 	add.w	r3, r7, #16
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fe31 	bl	8005a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e12:	2301      	movs	r3, #1
 8004e14:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e16:	f001 fa13 	bl	8006240 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e1a:	f000 fbb9 	bl	8005590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e1e:	f001 f9e1 	bl	80061e4 <vPortEnterCritical>
 8004e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e28:	b25b      	sxtb	r3, r3
 8004e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2e:	d103      	bne.n	8004e38 <xQueueReceive+0x164>
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e3e:	b25b      	sxtb	r3, r3
 8004e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e44:	d103      	bne.n	8004e4e <xQueueReceive+0x17a>
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e4e:	f001 f9f7 	bl	8006240 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e52:	1d3a      	adds	r2, r7, #4
 8004e54:	f107 0310 	add.w	r3, r7, #16
 8004e58:	4611      	mov	r1, r2
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fe20 	bl	8005aa0 <xTaskCheckForTimeOut>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d124      	bne.n	8004eb0 <xQueueReceive+0x1dc>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e68:	f000 f92a 	bl	80050c0 <prvIsQueueEmpty>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d018      	beq.n	8004ea4 <xQueueReceive+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	3324      	adds	r3, #36	; 0x24
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	4611      	mov	r1, r2
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fd70 	bl	8005960 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e82:	f000 f8cb 	bl	800501c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e86:	f000 fb91 	bl	80055ac <xTaskResumeAll>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f47f af65 	bne.w	8004d5c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004e92:	4b19      	ldr	r3, [pc, #100]	; (8004ef8 <xQueueReceive+0x224>)
 8004e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	e75b      	b.n	8004d5c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ea6:	f000 f8b9 	bl	800501c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004eaa:	f000 fb7f 	bl	80055ac <xTaskResumeAll>
 8004eae:	e755      	b.n	8004d5c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eb2:	f000 f8b3 	bl	800501c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004eb6:	f000 fb79 	bl	80055ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ebc:	f000 f900 	bl	80050c0 <prvIsQueueEmpty>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f43f af4a 	beq.w	8004d5c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f003 f804 	bl	8007ed8 <SEGGER_SYSVIEW_ShrinkId>
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	f003 f800 	bl	8007ed8 <SEGGER_SYSVIEW_ShrinkId>
 8004ed8:	4601      	mov	r1, r0
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	2301      	movs	r3, #1
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	460a      	mov	r2, r1
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	205c      	movs	r0, #92	; 0x5c
 8004ee8:	f002 fae2 	bl	80074b0 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8004eec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3734      	adds	r7, #52	; 0x34
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd90      	pop	{r4, r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	e000ed04 	.word	0xe000ed04

08004efc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10d      	bne.n	8004f36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d14d      	bne.n	8004fbe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 ff1a 	bl	8005d60 <xTaskPriorityDisinherit>
 8004f2c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	605a      	str	r2, [r3, #4]
 8004f34:	e043      	b.n	8004fbe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d119      	bne.n	8004f70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6898      	ldr	r0, [r3, #8]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	461a      	mov	r2, r3
 8004f46:	68b9      	ldr	r1, [r7, #8]
 8004f48:	f003 f947 	bl	80081da <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f54:	441a      	add	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d32b      	bcc.n	8004fbe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	609a      	str	r2, [r3, #8]
 8004f6e:	e026      	b.n	8004fbe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	68d8      	ldr	r0, [r3, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	461a      	mov	r2, r3
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	f003 f92d 	bl	80081da <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	425b      	negs	r3, r3
 8004f8a:	441a      	add	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d207      	bcs.n	8004fac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa4:	425b      	negs	r3, r3
 8004fa6:	441a      	add	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d105      	bne.n	8004fbe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004fc6:	697b      	ldr	r3, [r7, #20]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d018      	beq.n	8005014 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	441a      	add	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d303      	bcc.n	8005004 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68d9      	ldr	r1, [r3, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	461a      	mov	r2, r3
 800500e:	6838      	ldr	r0, [r7, #0]
 8005010:	f003 f8e3 	bl	80081da <memcpy>
	}
}
 8005014:	bf00      	nop
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005024:	f001 f8de 	bl	80061e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800502e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005030:	e011      	b.n	8005056 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	2b00      	cmp	r3, #0
 8005038:	d012      	beq.n	8005060 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3324      	adds	r3, #36	; 0x24
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fcb2 	bl	80059a8 <xTaskRemoveFromEventList>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800504a:	f000 fd89 	bl	8005b60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	3b01      	subs	r3, #1
 8005052:	b2db      	uxtb	r3, r3
 8005054:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800505a:	2b00      	cmp	r3, #0
 800505c:	dce9      	bgt.n	8005032 <prvUnlockQueue+0x16>
 800505e:	e000      	b.n	8005062 <prvUnlockQueue+0x46>
					break;
 8005060:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	22ff      	movs	r2, #255	; 0xff
 8005066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800506a:	f001 f8e9 	bl	8006240 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800506e:	f001 f8b9 	bl	80061e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005078:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800507a:	e011      	b.n	80050a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d012      	beq.n	80050aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3310      	adds	r3, #16
 8005088:	4618      	mov	r0, r3
 800508a:	f000 fc8d 	bl	80059a8 <xTaskRemoveFromEventList>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005094:	f000 fd64 	bl	8005b60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005098:	7bbb      	ldrb	r3, [r7, #14]
 800509a:	3b01      	subs	r3, #1
 800509c:	b2db      	uxtb	r3, r3
 800509e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	dce9      	bgt.n	800507c <prvUnlockQueue+0x60>
 80050a8:	e000      	b.n	80050ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	22ff      	movs	r2, #255	; 0xff
 80050b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80050b4:	f001 f8c4 	bl	8006240 <vPortExitCritical>
}
 80050b8:	bf00      	nop
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050c8:	f001 f88c 	bl	80061e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d102      	bne.n	80050da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050d4:	2301      	movs	r3, #1
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	e001      	b.n	80050de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80050da:	2300      	movs	r3, #0
 80050dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050de:	f001 f8af 	bl	8006240 <vPortExitCritical>

	return xReturn;
 80050e2:	68fb      	ldr	r3, [r7, #12]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050f4:	f001 f876 	bl	80061e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005100:	429a      	cmp	r2, r3
 8005102:	d102      	bne.n	800510a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005104:	2301      	movs	r3, #1
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	e001      	b.n	800510e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800510e:	f001 f897 	bl	8006240 <vPortExitCritical>

	return xReturn;
 8005112:	68fb      	ldr	r3, [r7, #12]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08e      	sub	sp, #56	; 0x38
 8005120:	af04      	add	r7, sp, #16
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800512a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512c:	2b00      	cmp	r3, #0
 800512e:	d109      	bne.n	8005144 <xTaskCreateStatic+0x28>
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	623b      	str	r3, [r7, #32]
 8005142:	e7fe      	b.n	8005142 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005146:	2b00      	cmp	r3, #0
 8005148:	d109      	bne.n	800515e <xTaskCreateStatic+0x42>
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	61fb      	str	r3, [r7, #28]
 800515c:	e7fe      	b.n	800515c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800515e:	2354      	movs	r3, #84	; 0x54
 8005160:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	2b54      	cmp	r3, #84	; 0x54
 8005166:	d009      	beq.n	800517c <xTaskCreateStatic+0x60>
 8005168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516c:	f383 8811 	msr	BASEPRI, r3
 8005170:	f3bf 8f6f 	isb	sy
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	e7fe      	b.n	800517a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	2b00      	cmp	r3, #0
 8005180:	d01e      	beq.n	80051c0 <xTaskCreateStatic+0xa4>
 8005182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01b      	beq.n	80051c0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005190:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	2202      	movs	r2, #2
 8005196:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800519a:	2300      	movs	r3, #0
 800519c:	9303      	str	r3, [sp, #12]
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	9302      	str	r3, [sp, #8]
 80051a2:	f107 0314 	add.w	r3, r7, #20
 80051a6:	9301      	str	r3, [sp, #4]
 80051a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	68b9      	ldr	r1, [r7, #8]
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 f850 	bl	8005258 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051ba:	f000 f8cb 	bl	8005354 <prvAddNewTaskToReadyList>
 80051be:	e001      	b.n	80051c4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051c4:	697b      	ldr	r3, [r7, #20]
	}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3728      	adds	r7, #40	; 0x28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b08c      	sub	sp, #48	; 0x30
 80051d2:	af04      	add	r7, sp, #16
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	603b      	str	r3, [r7, #0]
 80051da:	4613      	mov	r3, r2
 80051dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051de:	88fb      	ldrh	r3, [r7, #6]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4618      	mov	r0, r3
 80051e4:	f001 f8fe 	bl	80063e4 <pvPortMalloc>
 80051e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00e      	beq.n	800520e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80051f0:	2054      	movs	r0, #84	; 0x54
 80051f2:	f001 f8f7 	bl	80063e4 <pvPortMalloc>
 80051f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	631a      	str	r2, [r3, #48]	; 0x30
 8005204:	e005      	b.n	8005212 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005206:	6978      	ldr	r0, [r7, #20]
 8005208:	f001 f9ae 	bl	8006568 <vPortFree>
 800520c:	e001      	b.n	8005212 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800520e:	2300      	movs	r3, #0
 8005210:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d017      	beq.n	8005248 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005220:	88fa      	ldrh	r2, [r7, #6]
 8005222:	2300      	movs	r3, #0
 8005224:	9303      	str	r3, [sp, #12]
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	9302      	str	r3, [sp, #8]
 800522a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522c:	9301      	str	r3, [sp, #4]
 800522e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	68b9      	ldr	r1, [r7, #8]
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 f80e 	bl	8005258 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800523c:	69f8      	ldr	r0, [r7, #28]
 800523e:	f000 f889 	bl	8005354 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005242:	2301      	movs	r3, #1
 8005244:	61bb      	str	r3, [r7, #24]
 8005246:	e002      	b.n	800524e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005248:	f04f 33ff 	mov.w	r3, #4294967295
 800524c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800524e:	69bb      	ldr	r3, [r7, #24]
	}
 8005250:	4618      	mov	r0, r3
 8005252:	3720      	adds	r7, #32
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005270:	3b01      	subs	r3, #1
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	f023 0307 	bic.w	r3, r3, #7
 800527e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	2b00      	cmp	r3, #0
 8005288:	d009      	beq.n	800529e <prvInitialiseNewTask+0x46>
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	e7fe      	b.n	800529c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800529e:	2300      	movs	r3, #0
 80052a0:	61fb      	str	r3, [r7, #28]
 80052a2:	e012      	b.n	80052ca <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	4413      	add	r3, r2
 80052aa:	7819      	ldrb	r1, [r3, #0]
 80052ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	3334      	adds	r3, #52	; 0x34
 80052b4:	460a      	mov	r2, r1
 80052b6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	4413      	add	r3, r2
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d006      	beq.n	80052d2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	3301      	adds	r3, #1
 80052c8:	61fb      	str	r3, [r7, #28]
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	2b0f      	cmp	r3, #15
 80052ce:	d9e9      	bls.n	80052a4 <prvInitialiseNewTask+0x4c>
 80052d0:	e000      	b.n	80052d4 <prvInitialiseNewTask+0x7c>
		{
			break;
 80052d2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	2b06      	cmp	r3, #6
 80052e0:	d901      	bls.n	80052e6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052e2:	2306      	movs	r3, #6
 80052e4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052ea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052f0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	2200      	movs	r2, #0
 80052f6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fa:	3304      	adds	r3, #4
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff fa6c 	bl	80047da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005304:	3318      	adds	r3, #24
 8005306:	4618      	mov	r0, r3
 8005308:	f7ff fa67 	bl	80047da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005310:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	f1c3 0207 	rsb	r2, r3, #7
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005320:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	2200      	movs	r2, #0
 8005326:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	68f9      	ldr	r1, [r7, #12]
 8005334:	69b8      	ldr	r0, [r7, #24]
 8005336:	f000 fe13 	bl	8005f60 <pxPortInitialiseStack>
 800533a:	4602      	mov	r2, r0
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800534a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800534c:	bf00      	nop
 800534e:	3720      	adds	r7, #32
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005354:	b5b0      	push	{r4, r5, r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af02      	add	r7, sp, #8
 800535a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800535c:	f000 ff42 	bl	80061e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005360:	4b39      	ldr	r3, [pc, #228]	; (8005448 <prvAddNewTaskToReadyList+0xf4>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3301      	adds	r3, #1
 8005366:	4a38      	ldr	r2, [pc, #224]	; (8005448 <prvAddNewTaskToReadyList+0xf4>)
 8005368:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800536a:	4b38      	ldr	r3, [pc, #224]	; (800544c <prvAddNewTaskToReadyList+0xf8>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d109      	bne.n	8005386 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005372:	4a36      	ldr	r2, [pc, #216]	; (800544c <prvAddNewTaskToReadyList+0xf8>)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005378:	4b33      	ldr	r3, [pc, #204]	; (8005448 <prvAddNewTaskToReadyList+0xf4>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d110      	bne.n	80053a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005380:	f000 fc12 	bl	8005ba8 <prvInitialiseTaskLists>
 8005384:	e00d      	b.n	80053a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005386:	4b32      	ldr	r3, [pc, #200]	; (8005450 <prvAddNewTaskToReadyList+0xfc>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800538e:	4b2f      	ldr	r3, [pc, #188]	; (800544c <prvAddNewTaskToReadyList+0xf8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005398:	429a      	cmp	r2, r3
 800539a:	d802      	bhi.n	80053a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800539c:	4a2b      	ldr	r2, [pc, #172]	; (800544c <prvAddNewTaskToReadyList+0xf8>)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053a2:	4b2c      	ldr	r3, [pc, #176]	; (8005454 <prvAddNewTaskToReadyList+0x100>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3301      	adds	r3, #1
 80053a8:	4a2a      	ldr	r2, [pc, #168]	; (8005454 <prvAddNewTaskToReadyList+0x100>)
 80053aa:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d016      	beq.n	80053e0 <prvAddNewTaskToReadyList+0x8c>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f002 fc69 	bl	8007c8c <SEGGER_SYSVIEW_OnTaskCreate>
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ca:	461d      	mov	r5, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	461c      	mov	r4, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d6:	1ae3      	subs	r3, r4, r3
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	462b      	mov	r3, r5
 80053dc:	f001 fa7e 	bl	80068dc <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f002 fcd6 	bl	8007d94 <SEGGER_SYSVIEW_OnTaskStartReady>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	2201      	movs	r2, #1
 80053ee:	409a      	lsls	r2, r3
 80053f0:	4b19      	ldr	r3, [pc, #100]	; (8005458 <prvAddNewTaskToReadyList+0x104>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	4a18      	ldr	r2, [pc, #96]	; (8005458 <prvAddNewTaskToReadyList+0x104>)
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fe:	4613      	mov	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4413      	add	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4a15      	ldr	r2, [pc, #84]	; (800545c <prvAddNewTaskToReadyList+0x108>)
 8005408:	441a      	add	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3304      	adds	r3, #4
 800540e:	4619      	mov	r1, r3
 8005410:	4610      	mov	r0, r2
 8005412:	f7ff f9ee 	bl	80047f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005416:	f000 ff13 	bl	8006240 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800541a:	4b0d      	ldr	r3, [pc, #52]	; (8005450 <prvAddNewTaskToReadyList+0xfc>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00e      	beq.n	8005440 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005422:	4b0a      	ldr	r3, [pc, #40]	; (800544c <prvAddNewTaskToReadyList+0xf8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	429a      	cmp	r2, r3
 800542e:	d207      	bcs.n	8005440 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005430:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <prvAddNewTaskToReadyList+0x10c>)
 8005432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005440:	bf00      	nop
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bdb0      	pop	{r4, r5, r7, pc}
 8005448:	20000410 	.word	0x20000410
 800544c:	20000310 	.word	0x20000310
 8005450:	2000041c 	.word	0x2000041c
 8005454:	2000042c 	.word	0x2000042c
 8005458:	20000418 	.word	0x20000418
 800545c:	20000314 	.word	0x20000314
 8005460:	e000ed04 	.word	0xe000ed04

08005464 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d01a      	beq.n	80054ac <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005476:	4b15      	ldr	r3, [pc, #84]	; (80054cc <vTaskDelay+0x68>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d009      	beq.n	8005492 <vTaskDelay+0x2e>
 800547e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	60bb      	str	r3, [r7, #8]
 8005490:	e7fe      	b.n	8005490 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005492:	f000 f87d 	bl	8005590 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	2023      	movs	r0, #35	; 0x23
 800549a:	f001 fefd 	bl	8007298 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800549e:	2100      	movs	r1, #0
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fce5 	bl	8005e70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054a6:	f000 f881 	bl	80055ac <xTaskResumeAll>
 80054aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d107      	bne.n	80054c2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80054b2:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <vTaskDelay+0x6c>)
 80054b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054c2:	bf00      	nop
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	20000438 	.word	0x20000438
 80054d0:	e000ed04 	.word	0xe000ed04

080054d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08a      	sub	sp, #40	; 0x28
 80054d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054da:	2300      	movs	r3, #0
 80054dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054e2:	463a      	mov	r2, r7
 80054e4:	1d39      	adds	r1, r7, #4
 80054e6:	f107 0308 	add.w	r3, r7, #8
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fb fe26 	bl	800113c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054f0:	6839      	ldr	r1, [r7, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	9202      	str	r2, [sp, #8]
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	2300      	movs	r3, #0
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	2300      	movs	r3, #0
 8005500:	460a      	mov	r2, r1
 8005502:	491d      	ldr	r1, [pc, #116]	; (8005578 <vTaskStartScheduler+0xa4>)
 8005504:	481d      	ldr	r0, [pc, #116]	; (800557c <vTaskStartScheduler+0xa8>)
 8005506:	f7ff fe09 	bl	800511c <xTaskCreateStatic>
 800550a:	4602      	mov	r2, r0
 800550c:	4b1c      	ldr	r3, [pc, #112]	; (8005580 <vTaskStartScheduler+0xac>)
 800550e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005510:	4b1b      	ldr	r3, [pc, #108]	; (8005580 <vTaskStartScheduler+0xac>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005518:	2301      	movs	r3, #1
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	e001      	b.n	8005522 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800551e:	2300      	movs	r3, #0
 8005520:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d115      	bne.n	8005554 <vTaskStartScheduler+0x80>
 8005528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800553a:	4b12      	ldr	r3, [pc, #72]	; (8005584 <vTaskStartScheduler+0xb0>)
 800553c:	f04f 32ff 	mov.w	r2, #4294967295
 8005540:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005542:	4b11      	ldr	r3, [pc, #68]	; (8005588 <vTaskStartScheduler+0xb4>)
 8005544:	2201      	movs	r2, #1
 8005546:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005548:	4b10      	ldr	r3, [pc, #64]	; (800558c <vTaskStartScheduler+0xb8>)
 800554a:	2200      	movs	r2, #0
 800554c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800554e:	f000 fd83 	bl	8006058 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005552:	e00d      	b.n	8005570 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555a:	d109      	bne.n	8005570 <vTaskStartScheduler+0x9c>
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	60fb      	str	r3, [r7, #12]
 800556e:	e7fe      	b.n	800556e <vTaskStartScheduler+0x9a>
}
 8005570:	bf00      	nop
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	08008ac4 	.word	0x08008ac4
 800557c:	08005b79 	.word	0x08005b79
 8005580:	20000434 	.word	0x20000434
 8005584:	20000430 	.word	0x20000430
 8005588:	2000041c 	.word	0x2000041c
 800558c:	20000414 	.word	0x20000414

08005590 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005594:	4b04      	ldr	r3, [pc, #16]	; (80055a8 <vTaskSuspendAll+0x18>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3301      	adds	r3, #1
 800559a:	4a03      	ldr	r2, [pc, #12]	; (80055a8 <vTaskSuspendAll+0x18>)
 800559c:	6013      	str	r3, [r2, #0]
}
 800559e:	bf00      	nop
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bc80      	pop	{r7}
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	20000438 	.word	0x20000438

080055ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055b2:	2300      	movs	r3, #0
 80055b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055b6:	2300      	movs	r3, #0
 80055b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055ba:	4b43      	ldr	r3, [pc, #268]	; (80056c8 <xTaskResumeAll+0x11c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d109      	bne.n	80055d6 <xTaskResumeAll+0x2a>
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	e7fe      	b.n	80055d4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055d6:	f000 fe05 	bl	80061e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055da:	4b3b      	ldr	r3, [pc, #236]	; (80056c8 <xTaskResumeAll+0x11c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3b01      	subs	r3, #1
 80055e0:	4a39      	ldr	r2, [pc, #228]	; (80056c8 <xTaskResumeAll+0x11c>)
 80055e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055e4:	4b38      	ldr	r3, [pc, #224]	; (80056c8 <xTaskResumeAll+0x11c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d165      	bne.n	80056b8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055ec:	4b37      	ldr	r3, [pc, #220]	; (80056cc <xTaskResumeAll+0x120>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d061      	beq.n	80056b8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055f4:	e032      	b.n	800565c <xTaskResumeAll+0xb0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80055f6:	4b36      	ldr	r3, [pc, #216]	; (80056d0 <xTaskResumeAll+0x124>)
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3318      	adds	r3, #24
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff f950 	bl	80048a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	3304      	adds	r3, #4
 800560c:	4618      	mov	r0, r3
 800560e:	f7ff f94b 	bl	80048a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4618      	mov	r0, r3
 8005616:	f002 fbbd 	bl	8007d94 <SEGGER_SYSVIEW_OnTaskStartReady>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	2201      	movs	r2, #1
 8005620:	409a      	lsls	r2, r3
 8005622:	4b2c      	ldr	r3, [pc, #176]	; (80056d4 <xTaskResumeAll+0x128>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4313      	orrs	r3, r2
 8005628:	4a2a      	ldr	r2, [pc, #168]	; (80056d4 <xTaskResumeAll+0x128>)
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4a27      	ldr	r2, [pc, #156]	; (80056d8 <xTaskResumeAll+0x12c>)
 800563a:	441a      	add	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3304      	adds	r3, #4
 8005640:	4619      	mov	r1, r3
 8005642:	4610      	mov	r0, r2
 8005644:	f7ff f8d5 	bl	80047f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564c:	4b23      	ldr	r3, [pc, #140]	; (80056dc <xTaskResumeAll+0x130>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005652:	429a      	cmp	r2, r3
 8005654:	d302      	bcc.n	800565c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005656:	4b22      	ldr	r3, [pc, #136]	; (80056e0 <xTaskResumeAll+0x134>)
 8005658:	2201      	movs	r2, #1
 800565a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800565c:	4b1c      	ldr	r3, [pc, #112]	; (80056d0 <xTaskResumeAll+0x124>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1c8      	bne.n	80055f6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800566a:	f000 fb37 	bl	8005cdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800566e:	4b1d      	ldr	r3, [pc, #116]	; (80056e4 <xTaskResumeAll+0x138>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d010      	beq.n	800569c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800567a:	f000 f849 	bl	8005710 <xTaskIncrementTick>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005684:	4b16      	ldr	r3, [pc, #88]	; (80056e0 <xTaskResumeAll+0x134>)
 8005686:	2201      	movs	r2, #1
 8005688:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3b01      	subs	r3, #1
 800568e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1f1      	bne.n	800567a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005696:	4b13      	ldr	r3, [pc, #76]	; (80056e4 <xTaskResumeAll+0x138>)
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800569c:	4b10      	ldr	r3, [pc, #64]	; (80056e0 <xTaskResumeAll+0x134>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d009      	beq.n	80056b8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056a4:	2301      	movs	r3, #1
 80056a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056a8:	4b0f      	ldr	r3, [pc, #60]	; (80056e8 <xTaskResumeAll+0x13c>)
 80056aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056b8:	f000 fdc2 	bl	8006240 <vPortExitCritical>

	return xAlreadyYielded;
 80056bc:	68bb      	ldr	r3, [r7, #8]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20000438 	.word	0x20000438
 80056cc:	20000410 	.word	0x20000410
 80056d0:	200003d0 	.word	0x200003d0
 80056d4:	20000418 	.word	0x20000418
 80056d8:	20000314 	.word	0x20000314
 80056dc:	20000310 	.word	0x20000310
 80056e0:	20000424 	.word	0x20000424
 80056e4:	20000420 	.word	0x20000420
 80056e8:	e000ed04 	.word	0xe000ed04

080056ec <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056f2:	f000 fe3b 	bl	800636c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80056f6:	2300      	movs	r3, #0
 80056f8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80056fa:	4b04      	ldr	r3, [pc, #16]	; (800570c <xTaskGetTickCountFromISR+0x20>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005700:	683b      	ldr	r3, [r7, #0]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20000414 	.word	0x20000414

08005710 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005716:	2300      	movs	r3, #0
 8005718:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800571a:	4b52      	ldr	r3, [pc, #328]	; (8005864 <xTaskIncrementTick+0x154>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	f040 8090 	bne.w	8005844 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005724:	4b50      	ldr	r3, [pc, #320]	; (8005868 <xTaskIncrementTick+0x158>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3301      	adds	r3, #1
 800572a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800572c:	4a4e      	ldr	r2, [pc, #312]	; (8005868 <xTaskIncrementTick+0x158>)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d11f      	bne.n	8005778 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005738:	4b4c      	ldr	r3, [pc, #304]	; (800586c <xTaskIncrementTick+0x15c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d009      	beq.n	8005756 <xTaskIncrementTick+0x46>
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	e7fe      	b.n	8005754 <xTaskIncrementTick+0x44>
 8005756:	4b45      	ldr	r3, [pc, #276]	; (800586c <xTaskIncrementTick+0x15c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	4b44      	ldr	r3, [pc, #272]	; (8005870 <xTaskIncrementTick+0x160>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a42      	ldr	r2, [pc, #264]	; (800586c <xTaskIncrementTick+0x15c>)
 8005762:	6013      	str	r3, [r2, #0]
 8005764:	4a42      	ldr	r2, [pc, #264]	; (8005870 <xTaskIncrementTick+0x160>)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	4b42      	ldr	r3, [pc, #264]	; (8005874 <xTaskIncrementTick+0x164>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3301      	adds	r3, #1
 8005770:	4a40      	ldr	r2, [pc, #256]	; (8005874 <xTaskIncrementTick+0x164>)
 8005772:	6013      	str	r3, [r2, #0]
 8005774:	f000 fab2 	bl	8005cdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005778:	4b3f      	ldr	r3, [pc, #252]	; (8005878 <xTaskIncrementTick+0x168>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	429a      	cmp	r2, r3
 8005780:	d351      	bcc.n	8005826 <xTaskIncrementTick+0x116>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005782:	4b3a      	ldr	r3, [pc, #232]	; (800586c <xTaskIncrementTick+0x15c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <xTaskIncrementTick+0x80>
 800578c:	2301      	movs	r3, #1
 800578e:	e000      	b.n	8005792 <xTaskIncrementTick+0x82>
 8005790:	2300      	movs	r3, #0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d004      	beq.n	80057a0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005796:	4b38      	ldr	r3, [pc, #224]	; (8005878 <xTaskIncrementTick+0x168>)
 8005798:	f04f 32ff 	mov.w	r2, #4294967295
 800579c:	601a      	str	r2, [r3, #0]
					break;
 800579e:	e042      	b.n	8005826 <xTaskIncrementTick+0x116>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80057a0:	4b32      	ldr	r3, [pc, #200]	; (800586c <xTaskIncrementTick+0x15c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d203      	bcs.n	80057c0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057b8:	4a2f      	ldr	r2, [pc, #188]	; (8005878 <xTaskIncrementTick+0x168>)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6013      	str	r3, [r2, #0]
						break;
 80057be:	e032      	b.n	8005826 <xTaskIncrementTick+0x116>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	3304      	adds	r3, #4
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7ff f86f 	bl	80048a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d004      	beq.n	80057dc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	3318      	adds	r3, #24
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff f866 	bl	80048a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4618      	mov	r0, r3
 80057e0:	f002 fad8 	bl	8007d94 <SEGGER_SYSVIEW_OnTaskStartReady>
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	2201      	movs	r2, #1
 80057ea:	409a      	lsls	r2, r3
 80057ec:	4b23      	ldr	r3, [pc, #140]	; (800587c <xTaskIncrementTick+0x16c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	4a22      	ldr	r2, [pc, #136]	; (800587c <xTaskIncrementTick+0x16c>)
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fa:	4613      	mov	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4a1f      	ldr	r2, [pc, #124]	; (8005880 <xTaskIncrementTick+0x170>)
 8005804:	441a      	add	r2, r3
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	3304      	adds	r3, #4
 800580a:	4619      	mov	r1, r3
 800580c:	4610      	mov	r0, r2
 800580e:	f7fe fff0 	bl	80047f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005816:	4b1b      	ldr	r3, [pc, #108]	; (8005884 <xTaskIncrementTick+0x174>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	429a      	cmp	r2, r3
 800581e:	d3b0      	bcc.n	8005782 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005820:	2301      	movs	r3, #1
 8005822:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005824:	e7ad      	b.n	8005782 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005826:	4b17      	ldr	r3, [pc, #92]	; (8005884 <xTaskIncrementTick+0x174>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582c:	4914      	ldr	r1, [pc, #80]	; (8005880 <xTaskIncrementTick+0x170>)
 800582e:	4613      	mov	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	440b      	add	r3, r1
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d907      	bls.n	800584e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800583e:	2301      	movs	r3, #1
 8005840:	617b      	str	r3, [r7, #20]
 8005842:	e004      	b.n	800584e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005844:	4b10      	ldr	r3, [pc, #64]	; (8005888 <xTaskIncrementTick+0x178>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3301      	adds	r3, #1
 800584a:	4a0f      	ldr	r2, [pc, #60]	; (8005888 <xTaskIncrementTick+0x178>)
 800584c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800584e:	4b0f      	ldr	r3, [pc, #60]	; (800588c <xTaskIncrementTick+0x17c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 8005856:	2301      	movs	r3, #1
 8005858:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800585a:	697b      	ldr	r3, [r7, #20]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	20000438 	.word	0x20000438
 8005868:	20000414 	.word	0x20000414
 800586c:	200003c8 	.word	0x200003c8
 8005870:	200003cc 	.word	0x200003cc
 8005874:	20000428 	.word	0x20000428
 8005878:	20000430 	.word	0x20000430
 800587c:	20000418 	.word	0x20000418
 8005880:	20000314 	.word	0x20000314
 8005884:	20000310 	.word	0x20000310
 8005888:	20000420 	.word	0x20000420
 800588c:	20000424 	.word	0x20000424

08005890 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005896:	4b2c      	ldr	r3, [pc, #176]	; (8005948 <vTaskSwitchContext+0xb8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800589e:	4b2b      	ldr	r3, [pc, #172]	; (800594c <vTaskSwitchContext+0xbc>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058a4:	e04c      	b.n	8005940 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 80058a6:	4b29      	ldr	r3, [pc, #164]	; (800594c <vTaskSwitchContext+0xbc>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80058ac:	4b28      	ldr	r3, [pc, #160]	; (8005950 <vTaskSwitchContext+0xc0>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	fab3 f383 	clz	r3, r3
 80058b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80058ba:	7afb      	ldrb	r3, [r7, #11]
 80058bc:	f1c3 031f 	rsb	r3, r3, #31
 80058c0:	617b      	str	r3, [r7, #20]
 80058c2:	4924      	ldr	r1, [pc, #144]	; (8005954 <vTaskSwitchContext+0xc4>)
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	440b      	add	r3, r1
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d109      	bne.n	80058ea <vTaskSwitchContext+0x5a>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	607b      	str	r3, [r7, #4]
 80058e8:	e7fe      	b.n	80058e8 <vTaskSwitchContext+0x58>
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4613      	mov	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4a17      	ldr	r2, [pc, #92]	; (8005954 <vTaskSwitchContext+0xc4>)
 80058f6:	4413      	add	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	605a      	str	r2, [r3, #4]
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	3308      	adds	r3, #8
 800590c:	429a      	cmp	r2, r3
 800590e:	d104      	bne.n	800591a <vTaskSwitchContext+0x8a>
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	605a      	str	r2, [r3, #4]
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	4a0d      	ldr	r2, [pc, #52]	; (8005958 <vTaskSwitchContext+0xc8>)
 8005922:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8005924:	4b0c      	ldr	r3, [pc, #48]	; (8005958 <vTaskSwitchContext+0xc8>)
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	4b0c      	ldr	r3, [pc, #48]	; (800595c <vTaskSwitchContext+0xcc>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d102      	bne.n	8005936 <vTaskSwitchContext+0xa6>
 8005930:	f002 f990 	bl	8007c54 <SEGGER_SYSVIEW_OnIdle>
}
 8005934:	e004      	b.n	8005940 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 8005936:	4b08      	ldr	r3, [pc, #32]	; (8005958 <vTaskSwitchContext+0xc8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f002 f9e8 	bl	8007d10 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8005940:	bf00      	nop
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	20000438 	.word	0x20000438
 800594c:	20000424 	.word	0x20000424
 8005950:	20000418 	.word	0x20000418
 8005954:	20000314 	.word	0x20000314
 8005958:	20000310 	.word	0x20000310
 800595c:	20000434 	.word	0x20000434

08005960 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d109      	bne.n	8005984 <vTaskPlaceOnEventList+0x24>
 8005970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	e7fe      	b.n	8005982 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005984:	4b07      	ldr	r3, [pc, #28]	; (80059a4 <vTaskPlaceOnEventList+0x44>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3318      	adds	r3, #24
 800598a:	4619      	mov	r1, r3
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7fe ff53 	bl	8004838 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005992:	2101      	movs	r1, #1
 8005994:	6838      	ldr	r0, [r7, #0]
 8005996:	f000 fa6b 	bl	8005e70 <prvAddCurrentTaskToDelayedList>
}
 800599a:	bf00      	nop
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20000310 	.word	0x20000310

080059a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d109      	bne.n	80059d2 <xTaskRemoveFromEventList+0x2a>
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	e7fe      	b.n	80059d0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	3318      	adds	r3, #24
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fe ff66 	bl	80048a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059dc:	4b1f      	ldr	r3, [pc, #124]	; (8005a5c <xTaskRemoveFromEventList+0xb4>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d120      	bne.n	8005a26 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	3304      	adds	r3, #4
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fe ff5d 	bl	80048a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f002 f9cf 	bl	8007d94 <SEGGER_SYSVIEW_OnTaskStartReady>
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fa:	2201      	movs	r2, #1
 80059fc:	409a      	lsls	r2, r3
 80059fe:	4b18      	ldr	r3, [pc, #96]	; (8005a60 <xTaskRemoveFromEventList+0xb8>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	4a16      	ldr	r2, [pc, #88]	; (8005a60 <xTaskRemoveFromEventList+0xb8>)
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4a13      	ldr	r2, [pc, #76]	; (8005a64 <xTaskRemoveFromEventList+0xbc>)
 8005a16:	441a      	add	r2, r3
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4610      	mov	r0, r2
 8005a20:	f7fe fee7 	bl	80047f2 <vListInsertEnd>
 8005a24:	e005      	b.n	8005a32 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	3318      	adds	r3, #24
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	480e      	ldr	r0, [pc, #56]	; (8005a68 <xTaskRemoveFromEventList+0xc0>)
 8005a2e:	f7fe fee0 	bl	80047f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a36:	4b0d      	ldr	r3, [pc, #52]	; (8005a6c <xTaskRemoveFromEventList+0xc4>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d905      	bls.n	8005a4c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a40:	2301      	movs	r3, #1
 8005a42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a44:	4b0a      	ldr	r3, [pc, #40]	; (8005a70 <xTaskRemoveFromEventList+0xc8>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	e001      	b.n	8005a50 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005a50:	697b      	ldr	r3, [r7, #20]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20000438 	.word	0x20000438
 8005a60:	20000418 	.word	0x20000418
 8005a64:	20000314 	.word	0x20000314
 8005a68:	200003d0 	.word	0x200003d0
 8005a6c:	20000310 	.word	0x20000310
 8005a70:	20000424 	.word	0x20000424

08005a74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a7c:	4b06      	ldr	r3, [pc, #24]	; (8005a98 <vTaskInternalSetTimeOutState+0x24>)
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a84:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <vTaskInternalSetTimeOutState+0x28>)
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	605a      	str	r2, [r3, #4]
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	20000428 	.word	0x20000428
 8005a9c:	20000414 	.word	0x20000414

08005aa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d109      	bne.n	8005ac4 <xTaskCheckForTimeOut+0x24>
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	613b      	str	r3, [r7, #16]
 8005ac2:	e7fe      	b.n	8005ac2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d109      	bne.n	8005ade <xTaskCheckForTimeOut+0x3e>
 8005aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	e7fe      	b.n	8005adc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005ade:	f000 fb81 	bl	80061e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ae2:	4b1d      	ldr	r3, [pc, #116]	; (8005b58 <xTaskCheckForTimeOut+0xb8>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afa:	d102      	bne.n	8005b02 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61fb      	str	r3, [r7, #28]
 8005b00:	e023      	b.n	8005b4a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	4b15      	ldr	r3, [pc, #84]	; (8005b5c <xTaskCheckForTimeOut+0xbc>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d007      	beq.n	8005b1e <xTaskCheckForTimeOut+0x7e>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d302      	bcc.n	8005b1e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	61fb      	str	r3, [r7, #28]
 8005b1c:	e015      	b.n	8005b4a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d20b      	bcs.n	8005b40 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	1ad2      	subs	r2, r2, r3
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff ff9d 	bl	8005a74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	61fb      	str	r3, [r7, #28]
 8005b3e:	e004      	b.n	8005b4a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b46:	2301      	movs	r3, #1
 8005b48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b4a:	f000 fb79 	bl	8006240 <vPortExitCritical>

	return xReturn;
 8005b4e:	69fb      	ldr	r3, [r7, #28]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3720      	adds	r7, #32
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20000414 	.word	0x20000414
 8005b5c:	20000428 	.word	0x20000428

08005b60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b64:	4b03      	ldr	r3, [pc, #12]	; (8005b74 <vTaskMissedYield+0x14>)
 8005b66:	2201      	movs	r2, #1
 8005b68:	601a      	str	r2, [r3, #0]
}
 8005b6a:	bf00      	nop
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20000424 	.word	0x20000424

08005b78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b80:	f000 f852 	bl	8005c28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b84:	4b06      	ldr	r3, [pc, #24]	; (8005ba0 <prvIdleTask+0x28>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d9f9      	bls.n	8005b80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b8c:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <prvIdleTask+0x2c>)
 8005b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b9c:	e7f0      	b.n	8005b80 <prvIdleTask+0x8>
 8005b9e:	bf00      	nop
 8005ba0:	20000314 	.word	0x20000314
 8005ba4:	e000ed04 	.word	0xe000ed04

08005ba8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bae:	2300      	movs	r3, #0
 8005bb0:	607b      	str	r3, [r7, #4]
 8005bb2:	e00c      	b.n	8005bce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4a12      	ldr	r2, [pc, #72]	; (8005c08 <prvInitialiseTaskLists+0x60>)
 8005bc0:	4413      	add	r3, r2
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fe fdea 	bl	800479c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	607b      	str	r3, [r7, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b06      	cmp	r3, #6
 8005bd2:	d9ef      	bls.n	8005bb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bd4:	480d      	ldr	r0, [pc, #52]	; (8005c0c <prvInitialiseTaskLists+0x64>)
 8005bd6:	f7fe fde1 	bl	800479c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bda:	480d      	ldr	r0, [pc, #52]	; (8005c10 <prvInitialiseTaskLists+0x68>)
 8005bdc:	f7fe fdde 	bl	800479c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005be0:	480c      	ldr	r0, [pc, #48]	; (8005c14 <prvInitialiseTaskLists+0x6c>)
 8005be2:	f7fe fddb 	bl	800479c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005be6:	480c      	ldr	r0, [pc, #48]	; (8005c18 <prvInitialiseTaskLists+0x70>)
 8005be8:	f7fe fdd8 	bl	800479c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bec:	480b      	ldr	r0, [pc, #44]	; (8005c1c <prvInitialiseTaskLists+0x74>)
 8005bee:	f7fe fdd5 	bl	800479c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bf2:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <prvInitialiseTaskLists+0x78>)
 8005bf4:	4a05      	ldr	r2, [pc, #20]	; (8005c0c <prvInitialiseTaskLists+0x64>)
 8005bf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <prvInitialiseTaskLists+0x7c>)
 8005bfa:	4a05      	ldr	r2, [pc, #20]	; (8005c10 <prvInitialiseTaskLists+0x68>)
 8005bfc:	601a      	str	r2, [r3, #0]
}
 8005bfe:	bf00      	nop
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20000314 	.word	0x20000314
 8005c0c:	200003a0 	.word	0x200003a0
 8005c10:	200003b4 	.word	0x200003b4
 8005c14:	200003d0 	.word	0x200003d0
 8005c18:	200003e4 	.word	0x200003e4
 8005c1c:	200003fc 	.word	0x200003fc
 8005c20:	200003c8 	.word	0x200003c8
 8005c24:	200003cc 	.word	0x200003cc

08005c28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c2e:	e019      	b.n	8005c64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c30:	f000 fad8 	bl	80061e4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005c34:	4b0f      	ldr	r3, [pc, #60]	; (8005c74 <prvCheckTasksWaitingTermination+0x4c>)
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fe fe31 	bl	80048a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c46:	4b0c      	ldr	r3, [pc, #48]	; (8005c78 <prvCheckTasksWaitingTermination+0x50>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	4a0a      	ldr	r2, [pc, #40]	; (8005c78 <prvCheckTasksWaitingTermination+0x50>)
 8005c4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c50:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <prvCheckTasksWaitingTermination+0x54>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3b01      	subs	r3, #1
 8005c56:	4a09      	ldr	r2, [pc, #36]	; (8005c7c <prvCheckTasksWaitingTermination+0x54>)
 8005c58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c5a:	f000 faf1 	bl	8006240 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f80e 	bl	8005c80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <prvCheckTasksWaitingTermination+0x54>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1e1      	bne.n	8005c30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c6c:	bf00      	nop
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	200003e4 	.word	0x200003e4
 8005c78:	20000410 	.word	0x20000410
 8005c7c:	200003f8 	.word	0x200003f8

08005c80 <prvDeleteTCB>:
	/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d108      	bne.n	8005ca4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 fc66 	bl	8006568 <vPortFree>
				vPortFree( pxTCB );
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fc63 	bl	8006568 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ca2:	e017      	b.n	8005cd4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d103      	bne.n	8005cb6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fc5a 	bl	8006568 <vPortFree>
	}
 8005cb4:	e00e      	b.n	8005cd4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d009      	beq.n	8005cd4 <prvDeleteTCB+0x54>
 8005cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	e7fe      	b.n	8005cd2 <prvDeleteTCB+0x52>
	}
 8005cd4:	bf00      	nop
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ce2:	4b0e      	ldr	r3, [pc, #56]	; (8005d1c <prvResetNextTaskUnblockTime+0x40>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <prvResetNextTaskUnblockTime+0x14>
 8005cec:	2301      	movs	r3, #1
 8005cee:	e000      	b.n	8005cf2 <prvResetNextTaskUnblockTime+0x16>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d004      	beq.n	8005d00 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cf6:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <prvResetNextTaskUnblockTime+0x44>)
 8005cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cfe:	e008      	b.n	8005d12 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d00:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <prvResetNextTaskUnblockTime+0x40>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	4a04      	ldr	r2, [pc, #16]	; (8005d20 <prvResetNextTaskUnblockTime+0x44>)
 8005d10:	6013      	str	r3, [r2, #0]
}
 8005d12:	bf00      	nop
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bc80      	pop	{r7}
 8005d1a:	4770      	bx	lr
 8005d1c:	200003c8 	.word	0x200003c8
 8005d20:	20000430 	.word	0x20000430

08005d24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d2a:	4b0b      	ldr	r3, [pc, #44]	; (8005d58 <xTaskGetSchedulerState+0x34>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d102      	bne.n	8005d38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d32:	2301      	movs	r3, #1
 8005d34:	607b      	str	r3, [r7, #4]
 8005d36:	e008      	b.n	8005d4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d38:	4b08      	ldr	r3, [pc, #32]	; (8005d5c <xTaskGetSchedulerState+0x38>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d102      	bne.n	8005d46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d40:	2302      	movs	r3, #2
 8005d42:	607b      	str	r3, [r7, #4]
 8005d44:	e001      	b.n	8005d4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d46:	2300      	movs	r3, #0
 8005d48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d4a:	687b      	ldr	r3, [r7, #4]
	}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	2000041c 	.word	0x2000041c
 8005d5c:	20000438 	.word	0x20000438

08005d60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d071      	beq.n	8005e5a <xTaskPriorityDisinherit+0xfa>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d76:	4b3b      	ldr	r3, [pc, #236]	; (8005e64 <xTaskPriorityDisinherit+0x104>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d009      	beq.n	8005d94 <xTaskPriorityDisinherit+0x34>
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	e7fe      	b.n	8005d92 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d109      	bne.n	8005db0 <xTaskPriorityDisinherit+0x50>
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	60bb      	str	r3, [r7, #8]
 8005dae:	e7fe      	b.n	8005dae <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005db4:	1e5a      	subs	r2, r3, #1
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d049      	beq.n	8005e5a <xTaskPriorityDisinherit+0xfa>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d145      	bne.n	8005e5a <xTaskPriorityDisinherit+0xfa>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fe fd68 	bl	80048a8 <uxListRemove>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d115      	bne.n	8005e0a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de2:	4921      	ldr	r1, [pc, #132]	; (8005e68 <xTaskPriorityDisinherit+0x108>)
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	440b      	add	r3, r1
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10a      	bne.n	8005e0a <xTaskPriorityDisinherit+0xaa>
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df8:	2201      	movs	r2, #1
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	43da      	mvns	r2, r3
 8005e00:	4b1a      	ldr	r3, [pc, #104]	; (8005e6c <xTaskPriorityDisinherit+0x10c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4013      	ands	r3, r2
 8005e06:	4a19      	ldr	r2, [pc, #100]	; (8005e6c <xTaskPriorityDisinherit+0x10c>)
 8005e08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	204a      	movs	r0, #74	; 0x4a
 8005e10:	f001 fa42 	bl	8007298 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e20:	f1c3 0207 	rsb	r2, r3, #7
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	409a      	lsls	r2, r3
 8005e30:	4b0e      	ldr	r3, [pc, #56]	; (8005e6c <xTaskPriorityDisinherit+0x10c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	4a0d      	ldr	r2, [pc, #52]	; (8005e6c <xTaskPriorityDisinherit+0x10c>)
 8005e38:	6013      	str	r3, [r2, #0]
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e3e:	4613      	mov	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4a08      	ldr	r2, [pc, #32]	; (8005e68 <xTaskPriorityDisinherit+0x108>)
 8005e48:	441a      	add	r2, r3
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4610      	mov	r0, r2
 8005e52:	f7fe fcce 	bl	80047f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e56:	2301      	movs	r3, #1
 8005e58:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e5a:	697b      	ldr	r3, [r7, #20]
	}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	20000310 	.word	0x20000310
 8005e68:	20000314 	.word	0x20000314
 8005e6c:	20000418 	.word	0x20000418

08005e70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e7a:	4b32      	ldr	r3, [pc, #200]	; (8005f44 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e80:	4b31      	ldr	r3, [pc, #196]	; (8005f48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3304      	adds	r3, #4
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fe fd0e 	bl	80048a8 <uxListRemove>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10b      	bne.n	8005eaa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005e92:	4b2d      	ldr	r3, [pc, #180]	; (8005f48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	2201      	movs	r2, #1
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	43da      	mvns	r2, r3
 8005ea0:	4b2a      	ldr	r3, [pc, #168]	; (8005f4c <prvAddCurrentTaskToDelayedList+0xdc>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	4a29      	ldr	r2, [pc, #164]	; (8005f4c <prvAddCurrentTaskToDelayedList+0xdc>)
 8005ea8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb0:	d110      	bne.n	8005ed4 <prvAddCurrentTaskToDelayedList+0x64>
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00d      	beq.n	8005ed4 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8005eb8:	4b23      	ldr	r3, [pc, #140]	; (8005f48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	211b      	movs	r1, #27
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f001 ffaa 	bl	8007e18 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ec4:	4b20      	ldr	r3, [pc, #128]	; (8005f48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3304      	adds	r3, #4
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4820      	ldr	r0, [pc, #128]	; (8005f50 <prvAddCurrentTaskToDelayedList+0xe0>)
 8005ece:	f7fe fc90 	bl	80047f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ed2:	e032      	b.n	8005f3a <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4413      	add	r3, r2
 8005eda:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005edc:	4b1a      	ldr	r3, [pc, #104]	; (8005f48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d20f      	bcs.n	8005f0c <prvAddCurrentTaskToDelayedList+0x9c>
				traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8005eec:	4b16      	ldr	r3, [pc, #88]	; (8005f48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2104      	movs	r1, #4
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f001 ff90 	bl	8007e18 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ef8:	4b16      	ldr	r3, [pc, #88]	; (8005f54 <prvAddCurrentTaskToDelayedList+0xe4>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	4b12      	ldr	r3, [pc, #72]	; (8005f48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3304      	adds	r3, #4
 8005f02:	4619      	mov	r1, r3
 8005f04:	4610      	mov	r0, r2
 8005f06:	f7fe fc97 	bl	8004838 <vListInsert>
}
 8005f0a:	e016      	b.n	8005f3a <prvAddCurrentTaskToDelayedList+0xca>
				traceMOVED_TASK_TO_DELAYED_LIST();
 8005f0c:	4b0e      	ldr	r3, [pc, #56]	; (8005f48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2104      	movs	r1, #4
 8005f12:	4618      	mov	r0, r3
 8005f14:	f001 ff80 	bl	8007e18 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f18:	4b0f      	ldr	r3, [pc, #60]	; (8005f58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3304      	adds	r3, #4
 8005f22:	4619      	mov	r1, r3
 8005f24:	4610      	mov	r0, r2
 8005f26:	f7fe fc87 	bl	8004838 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f2a:	4b0c      	ldr	r3, [pc, #48]	; (8005f5c <prvAddCurrentTaskToDelayedList+0xec>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d202      	bcs.n	8005f3a <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8005f34:	4a09      	ldr	r2, [pc, #36]	; (8005f5c <prvAddCurrentTaskToDelayedList+0xec>)
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	6013      	str	r3, [r2, #0]
}
 8005f3a:	bf00      	nop
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20000414 	.word	0x20000414
 8005f48:	20000310 	.word	0x20000310
 8005f4c:	20000418 	.word	0x20000418
 8005f50:	200003fc 	.word	0x200003fc
 8005f54:	200003cc 	.word	0x200003cc
 8005f58:	200003c8 	.word	0x200003c8
 8005f5c:	20000430 	.word	0x20000430

08005f60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3b04      	subs	r3, #4
 8005f70:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3b04      	subs	r3, #4
 8005f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f023 0201 	bic.w	r2, r3, #1
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3b04      	subs	r3, #4
 8005f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f90:	4a08      	ldr	r2, [pc, #32]	; (8005fb4 <pxPortInitialiseStack+0x54>)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3b14      	subs	r3, #20
 8005f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3b20      	subs	r3, #32
 8005fa6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr
 8005fb4:	08005fb9 	.word	0x08005fb9

08005fb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fc2:	4b10      	ldr	r3, [pc, #64]	; (8006004 <prvTaskExitError+0x4c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fca:	d009      	beq.n	8005fe0 <prvTaskExitError+0x28>
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	e7fe      	b.n	8005fde <prvTaskExitError+0x26>
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ff2:	bf00      	nop
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0fc      	beq.n	8005ff4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ffa:	bf00      	nop
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bc80      	pop	{r7}
 8006002:	4770      	bx	lr
 8006004:	20000020 	.word	0x20000020
	...

08006010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006010:	4b07      	ldr	r3, [pc, #28]	; (8006030 <pxCurrentTCBConst2>)
 8006012:	6819      	ldr	r1, [r3, #0]
 8006014:	6808      	ldr	r0, [r1, #0]
 8006016:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800601a:	f380 8809 	msr	PSP, r0
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f04f 0000 	mov.w	r0, #0
 8006026:	f380 8811 	msr	BASEPRI, r0
 800602a:	f04e 0e0d 	orr.w	lr, lr, #13
 800602e:	4770      	bx	lr

08006030 <pxCurrentTCBConst2>:
 8006030:	20000310 	.word	0x20000310
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006034:	bf00      	nop
 8006036:	bf00      	nop

08006038 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006038:	4806      	ldr	r0, [pc, #24]	; (8006054 <prvPortStartFirstTask+0x1c>)
 800603a:	6800      	ldr	r0, [r0, #0]
 800603c:	6800      	ldr	r0, [r0, #0]
 800603e:	f380 8808 	msr	MSP, r0
 8006042:	b662      	cpsie	i
 8006044:	b661      	cpsie	f
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	df00      	svc	0
 8006050:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006052:	bf00      	nop
 8006054:	e000ed08 	.word	0xe000ed08

08006058 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800605e:	4b31      	ldr	r3, [pc, #196]	; (8006124 <xPortStartScheduler+0xcc>)
 8006060:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	b2db      	uxtb	r3, r3
 8006068:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	22ff      	movs	r2, #255	; 0xff
 800606e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	b2db      	uxtb	r3, r3
 8006076:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006080:	b2da      	uxtb	r2, r3
 8006082:	4b29      	ldr	r3, [pc, #164]	; (8006128 <xPortStartScheduler+0xd0>)
 8006084:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006086:	4b29      	ldr	r3, [pc, #164]	; (800612c <xPortStartScheduler+0xd4>)
 8006088:	2207      	movs	r2, #7
 800608a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800608c:	e009      	b.n	80060a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800608e:	4b27      	ldr	r3, [pc, #156]	; (800612c <xPortStartScheduler+0xd4>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3b01      	subs	r3, #1
 8006094:	4a25      	ldr	r2, [pc, #148]	; (800612c <xPortStartScheduler+0xd4>)
 8006096:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	b2db      	uxtb	r3, r3
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060a2:	78fb      	ldrb	r3, [r7, #3]
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060aa:	2b80      	cmp	r3, #128	; 0x80
 80060ac:	d0ef      	beq.n	800608e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060ae:	4b1f      	ldr	r3, [pc, #124]	; (800612c <xPortStartScheduler+0xd4>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f1c3 0307 	rsb	r3, r3, #7
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d009      	beq.n	80060ce <xPortStartScheduler+0x76>
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	60bb      	str	r3, [r7, #8]
 80060cc:	e7fe      	b.n	80060cc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060ce:	4b17      	ldr	r3, [pc, #92]	; (800612c <xPortStartScheduler+0xd4>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	021b      	lsls	r3, r3, #8
 80060d4:	4a15      	ldr	r2, [pc, #84]	; (800612c <xPortStartScheduler+0xd4>)
 80060d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060d8:	4b14      	ldr	r3, [pc, #80]	; (800612c <xPortStartScheduler+0xd4>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060e0:	4a12      	ldr	r2, [pc, #72]	; (800612c <xPortStartScheduler+0xd4>)
 80060e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060ec:	4b10      	ldr	r3, [pc, #64]	; (8006130 <xPortStartScheduler+0xd8>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a0f      	ldr	r2, [pc, #60]	; (8006130 <xPortStartScheduler+0xd8>)
 80060f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060f8:	4b0d      	ldr	r3, [pc, #52]	; (8006130 <xPortStartScheduler+0xd8>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a0c      	ldr	r2, [pc, #48]	; (8006130 <xPortStartScheduler+0xd8>)
 80060fe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006102:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006104:	f000 f910 	bl	8006328 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006108:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <xPortStartScheduler+0xdc>)
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800610e:	f7ff ff93 	bl	8006038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006112:	f7ff fbbd 	bl	8005890 <vTaskSwitchContext>
	prvTaskExitError();
 8006116:	f7ff ff4f 	bl	8005fb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	e000e400 	.word	0xe000e400
 8006128:	2000043c 	.word	0x2000043c
 800612c:	20000440 	.word	0x20000440
 8006130:	e000ed20 	.word	0xe000ed20
 8006134:	20000020 	.word	0x20000020

08006138 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/
void vInitPrioGroupValue(void)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
  //  configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800613e:	4b26      	ldr	r3, [pc, #152]	; (80061d8 <vInitPrioGroupValue+0xa0>)
 8006140:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	b2db      	uxtb	r3, r3
 8006148:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	22ff      	movs	r2, #255	; 0xff
 800614e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	b2db      	uxtb	r3, r3
 8006156:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006158:	78fb      	ldrb	r3, [r7, #3]
 800615a:	b2db      	uxtb	r3, r3
 800615c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006160:	b2da      	uxtb	r2, r3
 8006162:	4b1e      	ldr	r3, [pc, #120]	; (80061dc <vInitPrioGroupValue+0xa4>)
 8006164:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006166:	4b1e      	ldr	r3, [pc, #120]	; (80061e0 <vInitPrioGroupValue+0xa8>)
 8006168:	2207      	movs	r2, #7
 800616a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800616c:	e009      	b.n	8006182 <vInitPrioGroupValue+0x4a>
            {
                ulMaxPRIGROUPValue--;
 800616e:	4b1c      	ldr	r3, [pc, #112]	; (80061e0 <vInitPrioGroupValue+0xa8>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3b01      	subs	r3, #1
 8006174:	4a1a      	ldr	r2, [pc, #104]	; (80061e0 <vInitPrioGroupValue+0xa8>)
 8006176:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006178:	78fb      	ldrb	r3, [r7, #3]
 800617a:	b2db      	uxtb	r3, r3
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	b2db      	uxtb	r3, r3
 8006180:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006182:	78fb      	ldrb	r3, [r7, #3]
 8006184:	b2db      	uxtb	r3, r3
 8006186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618a:	2b80      	cmp	r3, #128	; 0x80
 800618c:	d0ef      	beq.n	800616e <vInitPrioGroupValue+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800618e:	4b14      	ldr	r3, [pc, #80]	; (80061e0 <vInitPrioGroupValue+0xa8>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f1c3 0307 	rsb	r3, r3, #7
 8006196:	2b04      	cmp	r3, #4
 8006198:	d009      	beq.n	80061ae <vInitPrioGroupValue+0x76>
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	60bb      	str	r3, [r7, #8]
 80061ac:	e7fe      	b.n	80061ac <vInitPrioGroupValue+0x74>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80061ae:	4b0c      	ldr	r3, [pc, #48]	; (80061e0 <vInitPrioGroupValue+0xa8>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	021b      	lsls	r3, r3, #8
 80061b4:	4a0a      	ldr	r2, [pc, #40]	; (80061e0 <vInitPrioGroupValue+0xa8>)
 80061b6:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061b8:	4b09      	ldr	r3, [pc, #36]	; (80061e0 <vInitPrioGroupValue+0xa8>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061c0:	4a07      	ldr	r2, [pc, #28]	; (80061e0 <vInitPrioGroupValue+0xa8>)
 80061c2:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80061cc:	bf00      	nop
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bc80      	pop	{r7}
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	e000e400 	.word	0xe000e400
 80061dc:	2000043c 	.word	0x2000043c
 80061e0:	20000440 	.word	0x20000440

080061e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061fc:	4b0e      	ldr	r3, [pc, #56]	; (8006238 <vPortEnterCritical+0x54>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3301      	adds	r3, #1
 8006202:	4a0d      	ldr	r2, [pc, #52]	; (8006238 <vPortEnterCritical+0x54>)
 8006204:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006206:	4b0c      	ldr	r3, [pc, #48]	; (8006238 <vPortEnterCritical+0x54>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d10e      	bne.n	800622c <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800620e:	4b0b      	ldr	r3, [pc, #44]	; (800623c <vPortEnterCritical+0x58>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d009      	beq.n	800622c <vPortEnterCritical+0x48>
 8006218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	603b      	str	r3, [r7, #0]
 800622a:	e7fe      	b.n	800622a <vPortEnterCritical+0x46>
	}
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	bc80      	pop	{r7}
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	20000020 	.word	0x20000020
 800623c:	e000ed04 	.word	0xe000ed04

08006240 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006246:	4b10      	ldr	r3, [pc, #64]	; (8006288 <vPortExitCritical+0x48>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d109      	bne.n	8006262 <vPortExitCritical+0x22>
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	607b      	str	r3, [r7, #4]
 8006260:	e7fe      	b.n	8006260 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006262:	4b09      	ldr	r3, [pc, #36]	; (8006288 <vPortExitCritical+0x48>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3b01      	subs	r3, #1
 8006268:	4a07      	ldr	r2, [pc, #28]	; (8006288 <vPortExitCritical+0x48>)
 800626a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800626c:	4b06      	ldr	r3, [pc, #24]	; (8006288 <vPortExitCritical+0x48>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d104      	bne.n	800627e <vPortExitCritical+0x3e>
 8006274:	2300      	movs	r3, #0
 8006276:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	bc80      	pop	{r7}
 8006286:	4770      	bx	lr
 8006288:	20000020 	.word	0x20000020
 800628c:	00000000 	.word	0x00000000

08006290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006290:	f3ef 8009 	mrs	r0, PSP
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	4b0d      	ldr	r3, [pc, #52]	; (80062d0 <pxCurrentTCBConst>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80062a0:	6010      	str	r0, [r2, #0]
 80062a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80062a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062aa:	f380 8811 	msr	BASEPRI, r0
 80062ae:	f7ff faef 	bl	8005890 <vTaskSwitchContext>
 80062b2:	f04f 0000 	mov.w	r0, #0
 80062b6:	f380 8811 	msr	BASEPRI, r0
 80062ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80062be:	6819      	ldr	r1, [r3, #0]
 80062c0:	6808      	ldr	r0, [r1, #0]
 80062c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80062c6:	f380 8809 	msr	PSP, r0
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	4770      	bx	lr

080062d0 <pxCurrentTCBConst>:
 80062d0:	20000310 	.word	0x20000310
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop

080062d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80062f0:	f001 fc36 	bl	8007b60 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062f4:	f7ff fa0c 	bl	8005710 <xTaskIncrementTick>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d006      	beq.n	800630c <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 80062fe:	f001 fc8d 	bl	8007c1c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006302:	4b08      	ldr	r3, [pc, #32]	; (8006324 <SysTick_Handler+0x4c>)
 8006304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	e001      	b.n	8006310 <SysTick_Handler+0x38>
		}
				else
				{
					traceISR_EXIT();
 800630c:	f001 fc6a 	bl	8007be4 <SEGGER_SYSVIEW_RecordExitISR>
 8006310:	2300      	movs	r3, #0
 8006312:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	f383 8811 	msr	BASEPRI, r3
				}
	}
	portENABLE_INTERRUPTS();
}
 800631a:	bf00      	nop
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	e000ed04 	.word	0xe000ed04

08006328 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800632c:	4b0a      	ldr	r3, [pc, #40]	; (8006358 <vPortSetupTimerInterrupt+0x30>)
 800632e:	2200      	movs	r2, #0
 8006330:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006332:	4b0a      	ldr	r3, [pc, #40]	; (800635c <vPortSetupTimerInterrupt+0x34>)
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006338:	4b09      	ldr	r3, [pc, #36]	; (8006360 <vPortSetupTimerInterrupt+0x38>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a09      	ldr	r2, [pc, #36]	; (8006364 <vPortSetupTimerInterrupt+0x3c>)
 800633e:	fba2 2303 	umull	r2, r3, r2, r3
 8006342:	099b      	lsrs	r3, r3, #6
 8006344:	4a08      	ldr	r2, [pc, #32]	; (8006368 <vPortSetupTimerInterrupt+0x40>)
 8006346:	3b01      	subs	r3, #1
 8006348:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800634a:	4b03      	ldr	r3, [pc, #12]	; (8006358 <vPortSetupTimerInterrupt+0x30>)
 800634c:	2207      	movs	r2, #7
 800634e:	601a      	str	r2, [r3, #0]
}
 8006350:	bf00      	nop
 8006352:	46bd      	mov	sp, r7
 8006354:	bc80      	pop	{r7}
 8006356:	4770      	bx	lr
 8006358:	e000e010 	.word	0xe000e010
 800635c:	e000e018 	.word	0xe000e018
 8006360:	20000014 	.word	0x20000014
 8006364:	10624dd3 	.word	0x10624dd3
 8006368:	e000e014 	.word	0xe000e014

0800636c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006372:	f3ef 8305 	mrs	r3, IPSR
 8006376:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2b0f      	cmp	r3, #15
 800637c:	d913      	bls.n	80063a6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800637e:	4a15      	ldr	r2, [pc, #84]	; (80063d4 <vPortValidateInterruptPriority+0x68>)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4413      	add	r3, r2
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006388:	4b13      	ldr	r3, [pc, #76]	; (80063d8 <vPortValidateInterruptPriority+0x6c>)
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	7afa      	ldrb	r2, [r7, #11]
 800638e:	429a      	cmp	r2, r3
 8006390:	d209      	bcs.n	80063a6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	607b      	str	r3, [r7, #4]
 80063a4:	e7fe      	b.n	80063a4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063a6:	4b0d      	ldr	r3, [pc, #52]	; (80063dc <vPortValidateInterruptPriority+0x70>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063ae:	4b0c      	ldr	r3, [pc, #48]	; (80063e0 <vPortValidateInterruptPriority+0x74>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d909      	bls.n	80063ca <vPortValidateInterruptPriority+0x5e>
 80063b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	603b      	str	r3, [r7, #0]
 80063c8:	e7fe      	b.n	80063c8 <vPortValidateInterruptPriority+0x5c>
	}
 80063ca:	bf00      	nop
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bc80      	pop	{r7}
 80063d2:	4770      	bx	lr
 80063d4:	e000e3f0 	.word	0xe000e3f0
 80063d8:	2000043c 	.word	0x2000043c
 80063dc:	e000ed0c 	.word	0xe000ed0c
 80063e0:	20000440 	.word	0x20000440

080063e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08a      	sub	sp, #40	; 0x28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063ec:	2300      	movs	r3, #0
 80063ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063f0:	f7ff f8ce 	bl	8005590 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063f4:	4b57      	ldr	r3, [pc, #348]	; (8006554 <pvPortMalloc+0x170>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063fc:	f000 f90c 	bl	8006618 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006400:	4b55      	ldr	r3, [pc, #340]	; (8006558 <pvPortMalloc+0x174>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4013      	ands	r3, r2
 8006408:	2b00      	cmp	r3, #0
 800640a:	f040 808c 	bne.w	8006526 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d01c      	beq.n	800644e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006414:	2208      	movs	r2, #8
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4413      	add	r3, r2
 800641a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	2b00      	cmp	r3, #0
 8006424:	d013      	beq.n	800644e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f023 0307 	bic.w	r3, r3, #7
 800642c:	3308      	adds	r3, #8
 800642e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	2b00      	cmp	r3, #0
 8006438:	d009      	beq.n	800644e <pvPortMalloc+0x6a>
 800643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	e7fe      	b.n	800644c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d068      	beq.n	8006526 <pvPortMalloc+0x142>
 8006454:	4b41      	ldr	r3, [pc, #260]	; (800655c <pvPortMalloc+0x178>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	429a      	cmp	r2, r3
 800645c:	d863      	bhi.n	8006526 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800645e:	4b40      	ldr	r3, [pc, #256]	; (8006560 <pvPortMalloc+0x17c>)
 8006460:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006462:	4b3f      	ldr	r3, [pc, #252]	; (8006560 <pvPortMalloc+0x17c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006468:	e004      	b.n	8006474 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	429a      	cmp	r2, r3
 800647c:	d903      	bls.n	8006486 <pvPortMalloc+0xa2>
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1f1      	bne.n	800646a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006486:	4b33      	ldr	r3, [pc, #204]	; (8006554 <pvPortMalloc+0x170>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648c:	429a      	cmp	r2, r3
 800648e:	d04a      	beq.n	8006526 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2208      	movs	r2, #8
 8006496:	4413      	add	r3, r2
 8006498:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	1ad2      	subs	r2, r2, r3
 80064aa:	2308      	movs	r3, #8
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d91e      	bls.n	80064f0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4413      	add	r3, r2
 80064b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d009      	beq.n	80064d8 <pvPortMalloc+0xf4>
 80064c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	613b      	str	r3, [r7, #16]
 80064d6:	e7fe      	b.n	80064d6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	1ad2      	subs	r2, r2, r3
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064ea:	69b8      	ldr	r0, [r7, #24]
 80064ec:	f000 f8f6 	bl	80066dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064f0:	4b1a      	ldr	r3, [pc, #104]	; (800655c <pvPortMalloc+0x178>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	4a18      	ldr	r2, [pc, #96]	; (800655c <pvPortMalloc+0x178>)
 80064fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064fe:	4b17      	ldr	r3, [pc, #92]	; (800655c <pvPortMalloc+0x178>)
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	4b18      	ldr	r3, [pc, #96]	; (8006564 <pvPortMalloc+0x180>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d203      	bcs.n	8006512 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800650a:	4b14      	ldr	r3, [pc, #80]	; (800655c <pvPortMalloc+0x178>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a15      	ldr	r2, [pc, #84]	; (8006564 <pvPortMalloc+0x180>)
 8006510:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	4b10      	ldr	r3, [pc, #64]	; (8006558 <pvPortMalloc+0x174>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	431a      	orrs	r2, r3
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006526:	f7ff f841 	bl	80055ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	f003 0307 	and.w	r3, r3, #7
 8006530:	2b00      	cmp	r3, #0
 8006532:	d009      	beq.n	8006548 <pvPortMalloc+0x164>
 8006534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	60fb      	str	r3, [r7, #12]
 8006546:	e7fe      	b.n	8006546 <pvPortMalloc+0x162>
	return pvReturn;
 8006548:	69fb      	ldr	r3, [r7, #28]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3728      	adds	r7, #40	; 0x28
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	2000104c 	.word	0x2000104c
 8006558:	20001058 	.word	0x20001058
 800655c:	20001050 	.word	0x20001050
 8006560:	20001044 	.word	0x20001044
 8006564:	20001054 	.word	0x20001054

08006568 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d046      	beq.n	8006608 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800657a:	2308      	movs	r3, #8
 800657c:	425b      	negs	r3, r3
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	4413      	add	r3, r2
 8006582:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	4b20      	ldr	r3, [pc, #128]	; (8006610 <vPortFree+0xa8>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4013      	ands	r3, r2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d109      	bne.n	80065aa <vPortFree+0x42>
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	e7fe      	b.n	80065a8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d009      	beq.n	80065c6 <vPortFree+0x5e>
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	60bb      	str	r3, [r7, #8]
 80065c4:	e7fe      	b.n	80065c4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	4b11      	ldr	r3, [pc, #68]	; (8006610 <vPortFree+0xa8>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4013      	ands	r3, r2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d019      	beq.n	8006608 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d115      	bne.n	8006608 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <vPortFree+0xa8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	43db      	mvns	r3, r3
 80065e6:	401a      	ands	r2, r3
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065ec:	f7fe ffd0 	bl	8005590 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	4b07      	ldr	r3, [pc, #28]	; (8006614 <vPortFree+0xac>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4413      	add	r3, r2
 80065fa:	4a06      	ldr	r2, [pc, #24]	; (8006614 <vPortFree+0xac>)
 80065fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065fe:	6938      	ldr	r0, [r7, #16]
 8006600:	f000 f86c 	bl	80066dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006604:	f7fe ffd2 	bl	80055ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006608:	bf00      	nop
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	20001058 	.word	0x20001058
 8006614:	20001050 	.word	0x20001050

08006618 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800661e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006622:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006624:	4b27      	ldr	r3, [pc, #156]	; (80066c4 <prvHeapInit+0xac>)
 8006626:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00c      	beq.n	800664c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3307      	adds	r3, #7
 8006636:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0307 	bic.w	r3, r3, #7
 800663e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	4a1f      	ldr	r2, [pc, #124]	; (80066c4 <prvHeapInit+0xac>)
 8006648:	4413      	add	r3, r2
 800664a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006650:	4a1d      	ldr	r2, [pc, #116]	; (80066c8 <prvHeapInit+0xb0>)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006656:	4b1c      	ldr	r3, [pc, #112]	; (80066c8 <prvHeapInit+0xb0>)
 8006658:	2200      	movs	r2, #0
 800665a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	4413      	add	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006664:	2208      	movs	r2, #8
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	1a9b      	subs	r3, r3, r2
 800666a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 0307 	bic.w	r3, r3, #7
 8006672:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4a15      	ldr	r2, [pc, #84]	; (80066cc <prvHeapInit+0xb4>)
 8006678:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800667a:	4b14      	ldr	r3, [pc, #80]	; (80066cc <prvHeapInit+0xb4>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2200      	movs	r2, #0
 8006680:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006682:	4b12      	ldr	r3, [pc, #72]	; (80066cc <prvHeapInit+0xb4>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2200      	movs	r2, #0
 8006688:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	1ad2      	subs	r2, r2, r3
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006698:	4b0c      	ldr	r3, [pc, #48]	; (80066cc <prvHeapInit+0xb4>)
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	4a0a      	ldr	r2, [pc, #40]	; (80066d0 <prvHeapInit+0xb8>)
 80066a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	4a09      	ldr	r2, [pc, #36]	; (80066d4 <prvHeapInit+0xbc>)
 80066ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066b0:	4b09      	ldr	r3, [pc, #36]	; (80066d8 <prvHeapInit+0xc0>)
 80066b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066b6:	601a      	str	r2, [r3, #0]
}
 80066b8:	bf00      	nop
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	bc80      	pop	{r7}
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	20000444 	.word	0x20000444
 80066c8:	20001044 	.word	0x20001044
 80066cc:	2000104c 	.word	0x2000104c
 80066d0:	20001054 	.word	0x20001054
 80066d4:	20001050 	.word	0x20001050
 80066d8:	20001058 	.word	0x20001058

080066dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066e4:	4b27      	ldr	r3, [pc, #156]	; (8006784 <prvInsertBlockIntoFreeList+0xa8>)
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	e002      	b.n	80066f0 <prvInsertBlockIntoFreeList+0x14>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d8f7      	bhi.n	80066ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	4413      	add	r3, r2
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	429a      	cmp	r2, r3
 800670a:	d108      	bne.n	800671e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	441a      	add	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	441a      	add	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	429a      	cmp	r2, r3
 8006730:	d118      	bne.n	8006764 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	4b14      	ldr	r3, [pc, #80]	; (8006788 <prvInsertBlockIntoFreeList+0xac>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	429a      	cmp	r2, r3
 800673c:	d00d      	beq.n	800675a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	441a      	add	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	e008      	b.n	800676c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800675a:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <prvInsertBlockIntoFreeList+0xac>)
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	e003      	b.n	800676c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	429a      	cmp	r2, r3
 8006772:	d002      	beq.n	800677a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800677a:	bf00      	nop
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	bc80      	pop	{r7}
 8006782:	4770      	bx	lr
 8006784:	20001044 	.word	0x20001044
 8006788:	2000104c 	.word	0x2000104c

0800678c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006790:	4803      	ldr	r0, [pc, #12]	; (80067a0 <_cbSendSystemDesc+0x14>)
 8006792:	f001 f991 	bl	8007ab8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006796:	4803      	ldr	r0, [pc, #12]	; (80067a4 <_cbSendSystemDesc+0x18>)
 8006798:	f001 f98e 	bl	8007ab8 <SEGGER_SYSVIEW_SendSysDesc>
}
 800679c:	bf00      	nop
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	08008acc 	.word	0x08008acc
 80067a4:	08008b0c 	.word	0x08008b0c

080067a8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80067ac:	4b06      	ldr	r3, [pc, #24]	; (80067c8 <SEGGER_SYSVIEW_Conf+0x20>)
 80067ae:	6818      	ldr	r0, [r3, #0]
 80067b0:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <SEGGER_SYSVIEW_Conf+0x20>)
 80067b2:	6819      	ldr	r1, [r3, #0]
 80067b4:	4b05      	ldr	r3, [pc, #20]	; (80067cc <SEGGER_SYSVIEW_Conf+0x24>)
 80067b6:	4a06      	ldr	r2, [pc, #24]	; (80067d0 <SEGGER_SYSVIEW_Conf+0x28>)
 80067b8:	f000 fcfe 	bl	80071b8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80067bc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80067c0:	f000 fd3e 	bl	8007240 <SEGGER_SYSVIEW_SetRAMBase>
}
 80067c4:	bf00      	nop
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	20000014 	.word	0x20000014
 80067cc:	0800678d 	.word	0x0800678d
 80067d0:	08008bac 	.word	0x08008bac

080067d4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80067d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80067da:	2300      	movs	r3, #0
 80067dc:	607b      	str	r3, [r7, #4]
 80067de:	e034      	b.n	800684a <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80067e0:	491e      	ldr	r1, [pc, #120]	; (800685c <_cbSendTaskList+0x88>)
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	4613      	mov	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	440b      	add	r3, r1
 80067ee:	6818      	ldr	r0, [r3, #0]
 80067f0:	491a      	ldr	r1, [pc, #104]	; (800685c <_cbSendTaskList+0x88>)
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	4613      	mov	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	440b      	add	r3, r1
 80067fe:	3304      	adds	r3, #4
 8006800:	681c      	ldr	r4, [r3, #0]
 8006802:	4916      	ldr	r1, [pc, #88]	; (800685c <_cbSendTaskList+0x88>)
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	4613      	mov	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	440b      	add	r3, r1
 8006810:	3308      	adds	r3, #8
 8006812:	681d      	ldr	r5, [r3, #0]
 8006814:	4911      	ldr	r1, [pc, #68]	; (800685c <_cbSendTaskList+0x88>)
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	440b      	add	r3, r1
 8006822:	330c      	adds	r3, #12
 8006824:	681e      	ldr	r6, [r3, #0]
 8006826:	490d      	ldr	r1, [pc, #52]	; (800685c <_cbSendTaskList+0x88>)
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	4613      	mov	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	440b      	add	r3, r1
 8006834:	3310      	adds	r3, #16
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	4633      	mov	r3, r6
 800683c:	462a      	mov	r2, r5
 800683e:	4621      	mov	r1, r4
 8006840:	f000 f8b4 	bl	80069ac <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	3301      	adds	r3, #1
 8006848:	607b      	str	r3, [r7, #4]
 800684a:	4b05      	ldr	r3, [pc, #20]	; (8006860 <_cbSendTaskList+0x8c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	429a      	cmp	r2, r3
 8006852:	d3c5      	bcc.n	80067e0 <_cbSendTaskList+0xc>
  }
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800685c:	2000105c 	.word	0x2000105c
 8006860:	200010fc 	.word	0x200010fc

08006864 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800686a:	f7fe ff3f 	bl	80056ec <xTaskGetTickCountFromISR>
 800686e:	4603      	mov	r3, r0
 8006870:	f04f 0400 	mov.w	r4, #0
 8006874:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006878:	e9d7 5600 	ldrd	r5, r6, [r7]
 800687c:	462b      	mov	r3, r5
 800687e:	4634      	mov	r4, r6
 8006880:	f04f 0100 	mov.w	r1, #0
 8006884:	f04f 0200 	mov.w	r2, #0
 8006888:	0162      	lsls	r2, r4, #5
 800688a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800688e:	0159      	lsls	r1, r3, #5
 8006890:	460b      	mov	r3, r1
 8006892:	4614      	mov	r4, r2
 8006894:	1b5b      	subs	r3, r3, r5
 8006896:	eb64 0406 	sbc.w	r4, r4, r6
 800689a:	f04f 0100 	mov.w	r1, #0
 800689e:	f04f 0200 	mov.w	r2, #0
 80068a2:	00a2      	lsls	r2, r4, #2
 80068a4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80068a8:	0099      	lsls	r1, r3, #2
 80068aa:	460b      	mov	r3, r1
 80068ac:	4614      	mov	r4, r2
 80068ae:	195b      	adds	r3, r3, r5
 80068b0:	eb44 0406 	adc.w	r4, r4, r6
 80068b4:	f04f 0100 	mov.w	r1, #0
 80068b8:	f04f 0200 	mov.w	r2, #0
 80068bc:	00e2      	lsls	r2, r4, #3
 80068be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80068c2:	00d9      	lsls	r1, r3, #3
 80068c4:	460b      	mov	r3, r1
 80068c6:	4614      	mov	r4, r2
 80068c8:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 80068cc:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	4621      	mov	r1, r4
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080068dc <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80068ea:	2205      	movs	r2, #5
 80068ec:	492b      	ldr	r1, [pc, #172]	; (800699c <SYSVIEW_AddTask+0xc0>)
 80068ee:	68b8      	ldr	r0, [r7, #8]
 80068f0:	f001 fc64 	bl	80081bc <memcmp>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d04b      	beq.n	8006992 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80068fa:	4b29      	ldr	r3, [pc, #164]	; (80069a0 <SYSVIEW_AddTask+0xc4>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b07      	cmp	r3, #7
 8006900:	d903      	bls.n	800690a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006902:	4828      	ldr	r0, [pc, #160]	; (80069a4 <SYSVIEW_AddTask+0xc8>)
 8006904:	f001 fbd4 	bl	80080b0 <SEGGER_SYSVIEW_Warn>
    return;
 8006908:	e044      	b.n	8006994 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800690a:	4b25      	ldr	r3, [pc, #148]	; (80069a0 <SYSVIEW_AddTask+0xc4>)
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	4926      	ldr	r1, [pc, #152]	; (80069a8 <SYSVIEW_AddTask+0xcc>)
 8006910:	4613      	mov	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	440b      	add	r3, r1
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800691e:	4b20      	ldr	r3, [pc, #128]	; (80069a0 <SYSVIEW_AddTask+0xc4>)
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4921      	ldr	r1, [pc, #132]	; (80069a8 <SYSVIEW_AddTask+0xcc>)
 8006924:	4613      	mov	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	440b      	add	r3, r1
 800692e:	3304      	adds	r3, #4
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006934:	4b1a      	ldr	r3, [pc, #104]	; (80069a0 <SYSVIEW_AddTask+0xc4>)
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	491b      	ldr	r1, [pc, #108]	; (80069a8 <SYSVIEW_AddTask+0xcc>)
 800693a:	4613      	mov	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	440b      	add	r3, r1
 8006944:	3308      	adds	r3, #8
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800694a:	4b15      	ldr	r3, [pc, #84]	; (80069a0 <SYSVIEW_AddTask+0xc4>)
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	4916      	ldr	r1, [pc, #88]	; (80069a8 <SYSVIEW_AddTask+0xcc>)
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	440b      	add	r3, r1
 800695a:	330c      	adds	r3, #12
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006960:	4b0f      	ldr	r3, [pc, #60]	; (80069a0 <SYSVIEW_AddTask+0xc4>)
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	4910      	ldr	r1, [pc, #64]	; (80069a8 <SYSVIEW_AddTask+0xcc>)
 8006966:	4613      	mov	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	440b      	add	r3, r1
 8006970:	3310      	adds	r3, #16
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006976:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <SYSVIEW_AddTask+0xc4>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3301      	adds	r3, #1
 800697c:	4a08      	ldr	r2, [pc, #32]	; (80069a0 <SYSVIEW_AddTask+0xc4>)
 800697e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	68b9      	ldr	r1, [r7, #8]
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f000 f80e 	bl	80069ac <SYSVIEW_SendTaskInfo>
 8006990:	e000      	b.n	8006994 <SYSVIEW_AddTask+0xb8>
    return;
 8006992:	bf00      	nop

}
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	08008b1c 	.word	0x08008b1c
 80069a0:	200010fc 	.word	0x200010fc
 80069a4:	08008b24 	.word	0x08008b24
 80069a8:	2000105c 	.word	0x2000105c

080069ac <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b08a      	sub	sp, #40	; 0x28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80069ba:	f107 0314 	add.w	r3, r7, #20
 80069be:	2214      	movs	r2, #20
 80069c0:	2100      	movs	r1, #0
 80069c2:	4618      	mov	r0, r3
 80069c4:	f001 fc14 	bl	80081f0 <memset>
  TaskInfo.TaskID     = TaskID;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80069dc:	f107 0314 	add.w	r3, r7, #20
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 ff71 	bl	80078c8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80069e6:	bf00      	nop
 80069e8:	3728      	adds	r7, #40	; 0x28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80069f6:	4b21      	ldr	r3, [pc, #132]	; (8006a7c <_DoInit+0x8c>)
 80069f8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2203      	movs	r2, #3
 80069fe:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2203      	movs	r2, #3
 8006a04:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a1d      	ldr	r2, [pc, #116]	; (8006a80 <_DoInit+0x90>)
 8006a0a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a1d      	ldr	r2, [pc, #116]	; (8006a84 <_DoInit+0x94>)
 8006a10:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a18:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a14      	ldr	r2, [pc, #80]	; (8006a80 <_DoInit+0x90>)
 8006a30:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a14      	ldr	r2, [pc, #80]	; (8006a88 <_DoInit+0x98>)
 8006a36:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2210      	movs	r2, #16
 8006a3c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	3307      	adds	r3, #7
 8006a54:	4a0d      	ldr	r2, [pc, #52]	; (8006a8c <_DoInit+0x9c>)
 8006a56:	6810      	ldr	r0, [r2, #0]
 8006a58:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a0c      	ldr	r2, [pc, #48]	; (8006a90 <_DoInit+0xa0>)
 8006a5e:	6810      	ldr	r0, [r2, #0]
 8006a60:	6018      	str	r0, [r3, #0]
 8006a62:	8891      	ldrh	r1, [r2, #4]
 8006a64:	7992      	ldrb	r2, [r2, #6]
 8006a66:	8099      	strh	r1, [r3, #4]
 8006a68:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bc80      	pop	{r7}
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	20002b70 	.word	0x20002b70
 8006a80:	08008b74 	.word	0x08008b74
 8006a84:	20001100 	.word	0x20001100
 8006a88:	20001500 	.word	0x20001500
 8006a8c:	08008b80 	.word	0x08008b80
 8006a90:	08008b84 	.word	0x08008b84

08006a94 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08c      	sub	sp, #48	; 0x30
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8006aa0:	4b3e      	ldr	r3, [pc, #248]	; (8006b9c <SEGGER_RTT_ReadNoLock+0x108>)
 8006aa2:	623b      	str	r3, [r7, #32]
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <SEGGER_RTT_ReadNoLock+0x1e>
 8006aae:	f7ff ff9f 	bl	80069f0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	005b      	lsls	r3, r3, #1
 8006ab8:	4413      	add	r3, r2
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	3360      	adds	r3, #96	; 0x60
 8006abe:	4a37      	ldr	r2, [pc, #220]	; (8006b9c <SEGGER_RTT_ReadNoLock+0x108>)
 8006ac0:	4413      	add	r3, r2
 8006ac2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8006ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d92b      	bls.n	8006b38 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4293      	cmp	r3, r2
 8006af0:	bf28      	it	cs
 8006af2:	4613      	movcs	r3, r2
 8006af4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afc:	4413      	add	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	6939      	ldr	r1, [r7, #16]
 8006b04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b06:	f001 fb68 	bl	80081da <memcpy>
    NumBytesRead += NumBytesRem;
 8006b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	4413      	add	r3, r2
 8006b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	4413      	add	r3, r2
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	4413      	add	r3, r2
 8006b28:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d101      	bne.n	8006b38 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8006b34:	2300      	movs	r3, #0
 8006b36:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006b38:	69ba      	ldr	r2, [r7, #24]
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4293      	cmp	r3, r2
 8006b46:	bf28      	it	cs
 8006b48:	4613      	movcs	r3, r2
 8006b4a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d019      	beq.n	8006b86 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	4413      	add	r3, r2
 8006b5a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	6939      	ldr	r1, [r7, #16]
 8006b60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b62:	f001 fb3a 	bl	80081da <memcpy>
    NumBytesRead += NumBytesRem;
 8006b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	4413      	add	r3, r2
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	4413      	add	r3, r2
 8006b84:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8006b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d002      	beq.n	8006b92 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b90:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8006b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3730      	adds	r7, #48	; 0x30
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	20002b70 	.word	0x20002b70

08006ba0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8006bae:	4b3c      	ldr	r3, [pc, #240]	; (8006ca0 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8006bb0:	61bb      	str	r3, [r7, #24]
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <SEGGER_RTT_AllocUpBuffer+0x20>
 8006bbc:	f7ff ff18 	bl	80069f0 <_DoInit>
  SEGGER_RTT_LOCK();
 8006bc0:	f3ef 8311 	mrs	r3, BASEPRI
 8006bc4:	f04f 0120 	mov.w	r1, #32
 8006bc8:	f381 8811 	msr	BASEPRI, r1
 8006bcc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006bce:	4b34      	ldr	r3, [pc, #208]	; (8006ca0 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8006bd0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8006bd6:	6939      	ldr	r1, [r7, #16]
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	1c5a      	adds	r2, r3, #1
 8006bdc:	4613      	mov	r3, r2
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	4413      	add	r3, r2
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	440b      	add	r3, r1
 8006be6:	3304      	adds	r3, #4
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d008      	beq.n	8006c00 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	dbeb      	blt.n	8006bd6 <SEGGER_RTT_AllocUpBuffer+0x36>
 8006bfe:	e000      	b.n	8006c02 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8006c00:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	69fa      	ldr	r2, [r7, #28]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	da3d      	bge.n	8006c88 <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8006c0c:	6939      	ldr	r1, [r7, #16]
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	4613      	mov	r3, r2
 8006c14:	005b      	lsls	r3, r3, #1
 8006c16:	4413      	add	r3, r2
 8006c18:	00db      	lsls	r3, r3, #3
 8006c1a:	440b      	add	r3, r1
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8006c20:	6939      	ldr	r1, [r7, #16]
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	4613      	mov	r3, r2
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	4413      	add	r3, r2
 8006c2c:	00db      	lsls	r3, r3, #3
 8006c2e:	440b      	add	r3, r1
 8006c30:	3304      	adds	r3, #4
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8006c36:	6939      	ldr	r1, [r7, #16]
 8006c38:	69fa      	ldr	r2, [r7, #28]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	005b      	lsls	r3, r3, #1
 8006c3e:	4413      	add	r3, r2
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	440b      	add	r3, r1
 8006c44:	3320      	adds	r3, #32
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8006c4a:	6939      	ldr	r1, [r7, #16]
 8006c4c:	69fa      	ldr	r2, [r7, #28]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	4413      	add	r3, r2
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	440b      	add	r3, r1
 8006c58:	3328      	adds	r3, #40	; 0x28
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8006c5e:	6939      	ldr	r1, [r7, #16]
 8006c60:	69fa      	ldr	r2, [r7, #28]
 8006c62:	4613      	mov	r3, r2
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	4413      	add	r3, r2
 8006c68:	00db      	lsls	r3, r3, #3
 8006c6a:	440b      	add	r3, r1
 8006c6c:	3324      	adds	r3, #36	; 0x24
 8006c6e:	2200      	movs	r2, #0
 8006c70:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8006c72:	6939      	ldr	r1, [r7, #16]
 8006c74:	69fa      	ldr	r2, [r7, #28]
 8006c76:	4613      	mov	r3, r2
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	4413      	add	r3, r2
 8006c7c:	00db      	lsls	r3, r3, #3
 8006c7e:	440b      	add	r3, r1
 8006c80:	332c      	adds	r3, #44	; 0x2c
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	e002      	b.n	8006c8e <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 8006c88:	f04f 33ff 	mov.w	r3, #4294967295
 8006c8c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8006c94:	69fb      	ldr	r3, [r7, #28]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3720      	adds	r7, #32
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20002b70 	.word	0x20002b70

08006ca4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b088      	sub	sp, #32
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8006cb2:	4b32      	ldr	r3, [pc, #200]	; (8006d7c <SEGGER_RTT_ConfigDownBuffer+0xd8>)
 8006cb4:	61bb      	str	r3, [r7, #24]
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006cc0:	f7ff fe96 	bl	80069f0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006cc4:	4b2d      	ldr	r3, [pc, #180]	; (8006d7c <SEGGER_RTT_ConfigDownBuffer+0xd8>)
 8006cc6:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	461a      	mov	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d24b      	bcs.n	8006d6c <SEGGER_RTT_ConfigDownBuffer+0xc8>
    SEGGER_RTT_LOCK();
 8006cd4:	f3ef 8311 	mrs	r3, BASEPRI
 8006cd8:	f04f 0120 	mov.w	r1, #32
 8006cdc:	f381 8811 	msr	BASEPRI, r1
 8006ce0:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d031      	beq.n	8006d4c <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8006ce8:	6979      	ldr	r1, [r7, #20]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4613      	mov	r3, r2
 8006cee:	005b      	lsls	r3, r3, #1
 8006cf0:	4413      	add	r3, r2
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	440b      	add	r3, r1
 8006cf6:	3360      	adds	r3, #96	; 0x60
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8006cfc:	6979      	ldr	r1, [r7, #20]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	4613      	mov	r3, r2
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	4413      	add	r3, r2
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	440b      	add	r3, r1
 8006d0a:	3364      	adds	r3, #100	; 0x64
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8006d10:	6979      	ldr	r1, [r7, #20]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	4613      	mov	r3, r2
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	4413      	add	r3, r2
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	440b      	add	r3, r1
 8006d1e:	3368      	adds	r3, #104	; 0x68
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8006d24:	6979      	ldr	r1, [r7, #20]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	4413      	add	r3, r2
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	440b      	add	r3, r1
 8006d32:	3370      	adds	r3, #112	; 0x70
 8006d34:	2200      	movs	r2, #0
 8006d36:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8006d38:	6979      	ldr	r1, [r7, #20]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	4413      	add	r3, r2
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	440b      	add	r3, r1
 8006d46:	336c      	adds	r3, #108	; 0x6c
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8006d4c:	6979      	ldr	r1, [r7, #20]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4613      	mov	r3, r2
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	4413      	add	r3, r2
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	440b      	add	r3, r1
 8006d5a:	3374      	adds	r3, #116	; 0x74
 8006d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d5e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	61fb      	str	r3, [r7, #28]
 8006d6a:	e002      	b.n	8006d72 <SEGGER_RTT_ConfigDownBuffer+0xce>
  } else {
    r = -1;
 8006d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d70:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8006d72:	69fb      	ldr	r3, [r7, #28]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3720      	adds	r7, #32
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	20002b70 	.word	0x20002b70

08006d80 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006d90:	e002      	b.n	8006d98 <_EncodeStr+0x18>
    Len++;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	3301      	adds	r3, #1
 8006d96:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1f6      	bne.n	8006d92 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d901      	bls.n	8006db0 <_EncodeStr+0x30>
    Len = Limit;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	2bfe      	cmp	r3, #254	; 0xfe
 8006db4:	d806      	bhi.n	8006dc4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	60fa      	str	r2, [r7, #12]
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	b2d2      	uxtb	r2, r2
 8006dc0:	701a      	strb	r2, [r3, #0]
 8006dc2:	e011      	b.n	8006de8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	60fa      	str	r2, [r7, #12]
 8006dca:	22ff      	movs	r2, #255	; 0xff
 8006dcc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	60fa      	str	r2, [r7, #12]
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	0a19      	lsrs	r1, r3, #8
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	1c5a      	adds	r2, r3, #1
 8006de2:	60fa      	str	r2, [r7, #12]
 8006de4:	b2ca      	uxtb	r2, r1
 8006de6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006dec:	e00a      	b.n	8006e04 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	1c53      	adds	r3, r2, #1
 8006df2:	60bb      	str	r3, [r7, #8]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	1c59      	adds	r1, r3, #1
 8006df8:	60f9      	str	r1, [r7, #12]
 8006dfa:	7812      	ldrb	r2, [r2, #0]
 8006dfc:	701a      	strb	r2, [r3, #0]
    n++;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	3301      	adds	r3, #1
 8006e02:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d3f0      	bcc.n	8006dee <_EncodeStr+0x6e>
  }
  return pPayload;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	371c      	adds	r7, #28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bc80      	pop	{r7}
 8006e16:	4770      	bx	lr

08006e18 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3304      	adds	r3, #4
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bc80      	pop	{r7}
 8006e2c:	4770      	bx	lr
	...

08006e30 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006e36:	4b33      	ldr	r3, [pc, #204]	; (8006f04 <_HandleIncomingPacket+0xd4>)
 8006e38:	7e1b      	ldrb	r3, [r3, #24]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	1cfb      	adds	r3, r7, #3
 8006e3e:	2201      	movs	r2, #1
 8006e40:	4619      	mov	r1, r3
 8006e42:	f7ff fe27 	bl	8006a94 <SEGGER_RTT_ReadNoLock>
 8006e46:	4603      	mov	r3, r0
 8006e48:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	dd4d      	ble.n	8006eec <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8006e50:	78fb      	ldrb	r3, [r7, #3]
 8006e52:	2b05      	cmp	r3, #5
 8006e54:	d022      	beq.n	8006e9c <_HandleIncomingPacket+0x6c>
 8006e56:	2b05      	cmp	r3, #5
 8006e58:	dc0b      	bgt.n	8006e72 <_HandleIncomingPacket+0x42>
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d015      	beq.n	8006e8a <_HandleIncomingPacket+0x5a>
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	dc02      	bgt.n	8006e68 <_HandleIncomingPacket+0x38>
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d00e      	beq.n	8006e84 <_HandleIncomingPacket+0x54>
 8006e66:	e034      	b.n	8006ed2 <_HandleIncomingPacket+0xa2>
 8006e68:	2b03      	cmp	r3, #3
 8006e6a:	d011      	beq.n	8006e90 <_HandleIncomingPacket+0x60>
 8006e6c:	2b04      	cmp	r3, #4
 8006e6e:	d012      	beq.n	8006e96 <_HandleIncomingPacket+0x66>
 8006e70:	e02f      	b.n	8006ed2 <_HandleIncomingPacket+0xa2>
 8006e72:	2b07      	cmp	r3, #7
 8006e74:	d018      	beq.n	8006ea8 <_HandleIncomingPacket+0x78>
 8006e76:	2b07      	cmp	r3, #7
 8006e78:	db13      	blt.n	8006ea2 <_HandleIncomingPacket+0x72>
 8006e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e7c:	d038      	beq.n	8006ef0 <_HandleIncomingPacket+0xc0>
 8006e7e:	2b80      	cmp	r3, #128	; 0x80
 8006e80:	d015      	beq.n	8006eae <_HandleIncomingPacket+0x7e>
 8006e82:	e026      	b.n	8006ed2 <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006e84:	f000 fba6 	bl	80075d4 <SEGGER_SYSVIEW_Start>
      break;
 8006e88:	e037      	b.n	8006efa <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006e8a:	f000 fc5d 	bl	8007748 <SEGGER_SYSVIEW_Stop>
      break;
 8006e8e:	e034      	b.n	8006efa <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006e90:	f000 fe36 	bl	8007b00 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006e94:	e031      	b.n	8006efa <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006e96:	f000 fdfb 	bl	8007a90 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006e9a:	e02e      	b.n	8006efa <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006e9c:	f000 fc7a 	bl	8007794 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006ea0:	e02b      	b.n	8006efa <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006ea2:	f001 f8c7 	bl	8008034 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006ea6:	e028      	b.n	8006efa <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006ea8:	f001 f8a6 	bl	8007ff8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006eac:	e025      	b.n	8006efa <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006eae:	4b15      	ldr	r3, [pc, #84]	; (8006f04 <_HandleIncomingPacket+0xd4>)
 8006eb0:	7e1b      	ldrb	r3, [r3, #24]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	1cfb      	adds	r3, r7, #3
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	4619      	mov	r1, r3
 8006eba:	f7ff fdeb 	bl	8006a94 <SEGGER_RTT_ReadNoLock>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	dd15      	ble.n	8006ef4 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006ec8:	78fb      	ldrb	r3, [r7, #3]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f001 f814 	bl	8007ef8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006ed0:	e010      	b.n	8006ef4 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006ed2:	78fb      	ldrb	r3, [r7, #3]
 8006ed4:	b25b      	sxtb	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	da0e      	bge.n	8006ef8 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006eda:	4b0a      	ldr	r3, [pc, #40]	; (8006f04 <_HandleIncomingPacket+0xd4>)
 8006edc:	7e1b      	ldrb	r3, [r3, #24]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	1cfb      	adds	r3, r7, #3
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	f7ff fdd5 	bl	8006a94 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006eea:	e005      	b.n	8006ef8 <_HandleIncomingPacket+0xc8>
    }
  }
 8006eec:	bf00      	nop
 8006eee:	e004      	b.n	8006efa <_HandleIncomingPacket+0xca>
      break;
 8006ef0:	bf00      	nop
 8006ef2:	e002      	b.n	8006efa <_HandleIncomingPacket+0xca>
      break;
 8006ef4:	bf00      	nop
 8006ef6:	e000      	b.n	8006efa <_HandleIncomingPacket+0xca>
      break;
 8006ef8:	bf00      	nop
}
 8006efa:	bf00      	nop
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20002918 	.word	0x20002918

08006f08 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08c      	sub	sp, #48	; 0x30
 8006f0c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006f0e:	2301      	movs	r3, #1
 8006f10:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006f12:	1d3b      	adds	r3, r7, #4
 8006f14:	3301      	adds	r3, #1
 8006f16:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f1c:	4b31      	ldr	r3, [pc, #196]	; (8006fe4 <_TrySendOverflowPacket+0xdc>)
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f22:	e00b      	b.n	8006f3c <_TrySendOverflowPacket+0x34>
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	b2da      	uxtb	r2, r3
 8006f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2a:	1c59      	adds	r1, r3, #1
 8006f2c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006f2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f32:	b2d2      	uxtb	r2, r2
 8006f34:	701a      	strb	r2, [r3, #0]
 8006f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f38:	09db      	lsrs	r3, r3, #7
 8006f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8006f40:	d8f0      	bhi.n	8006f24 <_TrySendOverflowPacket+0x1c>
 8006f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f44:	1c5a      	adds	r2, r3, #1
 8006f46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f4a:	b2d2      	uxtb	r2, r2
 8006f4c:	701a      	strb	r2, [r3, #0]
 8006f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f50:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006f52:	4b25      	ldr	r3, [pc, #148]	; (8006fe8 <_TrySendOverflowPacket+0xe0>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006f58:	4b22      	ldr	r3, [pc, #136]	; (8006fe4 <_TrySendOverflowPacket+0xdc>)
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	627b      	str	r3, [r7, #36]	; 0x24
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	623b      	str	r3, [r7, #32]
 8006f6a:	e00b      	b.n	8006f84 <_TrySendOverflowPacket+0x7c>
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	1c59      	adds	r1, r3, #1
 8006f74:	6279      	str	r1, [r7, #36]	; 0x24
 8006f76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f7a:	b2d2      	uxtb	r2, r2
 8006f7c:	701a      	strb	r2, [r3, #0]
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	09db      	lsrs	r3, r3, #7
 8006f82:	623b      	str	r3, [r7, #32]
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	2b7f      	cmp	r3, #127	; 0x7f
 8006f88:	d8f0      	bhi.n	8006f6c <_TrySendOverflowPacket+0x64>
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	1c5a      	adds	r2, r3, #1
 8006f8e:	627a      	str	r2, [r7, #36]	; 0x24
 8006f90:	6a3a      	ldr	r2, [r7, #32]
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	701a      	strb	r2, [r3, #0]
 8006f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f98:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8006f9a:	4b12      	ldr	r3, [pc, #72]	; (8006fe4 <_TrySendOverflowPacket+0xdc>)
 8006f9c:	785b      	ldrb	r3, [r3, #1]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	69fa      	ldr	r2, [r7, #28]
 8006fa2:	1d3b      	adds	r3, r7, #4
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	1d3b      	adds	r3, r7, #4
 8006faa:	4619      	mov	r1, r3
 8006fac:	f7f9 f8d0 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d009      	beq.n	8006fce <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006fba:	4a0a      	ldr	r2, [pc, #40]	; (8006fe4 <_TrySendOverflowPacket+0xdc>)
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006fc0:	4b08      	ldr	r3, [pc, #32]	; (8006fe4 <_TrySendOverflowPacket+0xdc>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <_TrySendOverflowPacket+0xdc>)
 8006fca:	701a      	strb	r2, [r3, #0]
 8006fcc:	e004      	b.n	8006fd8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006fce:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <_TrySendOverflowPacket+0xdc>)
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	4a03      	ldr	r2, [pc, #12]	; (8006fe4 <_TrySendOverflowPacket+0xdc>)
 8006fd6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006fd8:	693b      	ldr	r3, [r7, #16]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3730      	adds	r7, #48	; 0x30
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20002918 	.word	0x20002918
 8006fe8:	e0001004 	.word	0xe0001004

08006fec <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08a      	sub	sp, #40	; 0x28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006ff8:	4b6c      	ldr	r3, [pc, #432]	; (80071ac <_SendPacket+0x1c0>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d010      	beq.n	8007022 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007000:	4b6a      	ldr	r3, [pc, #424]	; (80071ac <_SendPacket+0x1c0>)
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 80a3 	beq.w	8007150 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800700a:	4b68      	ldr	r3, [pc, #416]	; (80071ac <_SendPacket+0x1c0>)
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	2b02      	cmp	r3, #2
 8007010:	d109      	bne.n	8007026 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8007012:	f7ff ff79 	bl	8006f08 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8007016:	4b65      	ldr	r3, [pc, #404]	; (80071ac <_SendPacket+0x1c0>)
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	2b01      	cmp	r3, #1
 800701c:	f040 809a 	bne.w	8007154 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8007020:	e001      	b.n	8007026 <_SendPacket+0x3a>
    goto Send;
 8007022:	bf00      	nop
 8007024:	e000      	b.n	8007028 <_SendPacket+0x3c>
Send:
 8007026:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b1f      	cmp	r3, #31
 800702c:	d809      	bhi.n	8007042 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800702e:	4b5f      	ldr	r3, [pc, #380]	; (80071ac <_SendPacket+0x1c0>)
 8007030:	69da      	ldr	r2, [r3, #28]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	fa22 f303 	lsr.w	r3, r2, r3
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	2b00      	cmp	r3, #0
 800703e:	f040 808b 	bne.w	8007158 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b17      	cmp	r3, #23
 8007046:	d807      	bhi.n	8007058 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3b01      	subs	r3, #1
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	b2da      	uxtb	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	701a      	strb	r2, [r3, #0]
 8007056:	e03d      	b.n	80070d4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	2b7f      	cmp	r3, #127	; 0x7f
 8007064:	d912      	bls.n	800708c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	09da      	lsrs	r2, r3, #7
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3b01      	subs	r3, #1
 800706e:	60fb      	str	r3, [r7, #12]
 8007070:	b2d2      	uxtb	r2, r2
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	b2db      	uxtb	r3, r3
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	3a01      	subs	r2, #1
 800707e:	60fa      	str	r2, [r7, #12]
 8007080:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007084:	b2da      	uxtb	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	701a      	strb	r2, [r3, #0]
 800708a:	e006      	b.n	800709a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	3b01      	subs	r3, #1
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	b2da      	uxtb	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b7f      	cmp	r3, #127	; 0x7f
 800709e:	d912      	bls.n	80070c6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	09da      	lsrs	r2, r3, #7
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	60fb      	str	r3, [r7, #12]
 80070aa:	b2d2      	uxtb	r2, r2
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	3a01      	subs	r2, #1
 80070b8:	60fa      	str	r2, [r7, #12]
 80070ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	701a      	strb	r2, [r3, #0]
 80070c4:	e006      	b.n	80070d4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3b01      	subs	r3, #1
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80070d4:	4b36      	ldr	r3, [pc, #216]	; (80071b0 <_SendPacket+0x1c4>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80070da:	4b34      	ldr	r3, [pc, #208]	; (80071ac <_SendPacket+0x1c0>)
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	627b      	str	r3, [r7, #36]	; 0x24
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	623b      	str	r3, [r7, #32]
 80070ec:	e00b      	b.n	8007106 <_SendPacket+0x11a>
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	1c59      	adds	r1, r3, #1
 80070f6:	6279      	str	r1, [r7, #36]	; 0x24
 80070f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070fc:	b2d2      	uxtb	r2, r2
 80070fe:	701a      	strb	r2, [r3, #0]
 8007100:	6a3b      	ldr	r3, [r7, #32]
 8007102:	09db      	lsrs	r3, r3, #7
 8007104:	623b      	str	r3, [r7, #32]
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	2b7f      	cmp	r3, #127	; 0x7f
 800710a:	d8f0      	bhi.n	80070ee <_SendPacket+0x102>
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	627a      	str	r2, [r7, #36]	; 0x24
 8007112:	6a3a      	ldr	r2, [r7, #32]
 8007114:	b2d2      	uxtb	r2, r2
 8007116:	701a      	strb	r2, [r3, #0]
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800711c:	4b23      	ldr	r3, [pc, #140]	; (80071ac <_SendPacket+0x1c0>)
 800711e:	785b      	ldrb	r3, [r3, #1]
 8007120:	4618      	mov	r0, r3
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	461a      	mov	r2, r3
 800712a:	68f9      	ldr	r1, [r7, #12]
 800712c:	f7f9 f810 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007130:	4603      	mov	r3, r0
 8007132:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800713a:	4a1c      	ldr	r2, [pc, #112]	; (80071ac <_SendPacket+0x1c0>)
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	60d3      	str	r3, [r2, #12]
 8007140:	e00b      	b.n	800715a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007142:	4b1a      	ldr	r3, [pc, #104]	; (80071ac <_SendPacket+0x1c0>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	3301      	adds	r3, #1
 8007148:	b2da      	uxtb	r2, r3
 800714a:	4b18      	ldr	r3, [pc, #96]	; (80071ac <_SendPacket+0x1c0>)
 800714c:	701a      	strb	r2, [r3, #0]
 800714e:	e004      	b.n	800715a <_SendPacket+0x16e>
    goto SendDone;
 8007150:	bf00      	nop
 8007152:	e002      	b.n	800715a <_SendPacket+0x16e>
      goto SendDone;
 8007154:	bf00      	nop
 8007156:	e000      	b.n	800715a <_SendPacket+0x16e>
      goto SendDone;
 8007158:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800715a:	4b14      	ldr	r3, [pc, #80]	; (80071ac <_SendPacket+0x1c0>)
 800715c:	7e1b      	ldrb	r3, [r3, #24]
 800715e:	4619      	mov	r1, r3
 8007160:	4a14      	ldr	r2, [pc, #80]	; (80071b4 <_SendPacket+0x1c8>)
 8007162:	460b      	mov	r3, r1
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	440b      	add	r3, r1
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	4413      	add	r3, r2
 800716c:	336c      	adds	r3, #108	; 0x6c
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	4b0e      	ldr	r3, [pc, #56]	; (80071ac <_SendPacket+0x1c0>)
 8007172:	7e1b      	ldrb	r3, [r3, #24]
 8007174:	4618      	mov	r0, r3
 8007176:	490f      	ldr	r1, [pc, #60]	; (80071b4 <_SendPacket+0x1c8>)
 8007178:	4603      	mov	r3, r0
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	4403      	add	r3, r0
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	440b      	add	r3, r1
 8007182:	3370      	adds	r3, #112	; 0x70
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d00b      	beq.n	80071a2 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800718a:	4b08      	ldr	r3, [pc, #32]	; (80071ac <_SendPacket+0x1c0>)
 800718c:	789b      	ldrb	r3, [r3, #2]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d107      	bne.n	80071a2 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007192:	4b06      	ldr	r3, [pc, #24]	; (80071ac <_SendPacket+0x1c0>)
 8007194:	2201      	movs	r2, #1
 8007196:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007198:	f7ff fe4a 	bl	8006e30 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800719c:	4b03      	ldr	r3, [pc, #12]	; (80071ac <_SendPacket+0x1c0>)
 800719e:	2200      	movs	r2, #0
 80071a0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80071a2:	bf00      	nop
 80071a4:	3728      	adds	r7, #40	; 0x28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	20002918 	.word	0x20002918
 80071b0:	e0001004 	.word	0xe0001004
 80071b4:	20002b70 	.word	0x20002b70

080071b8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af02      	add	r7, sp, #8
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
 80071c4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80071c6:	2300      	movs	r3, #0
 80071c8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80071cc:	4917      	ldr	r1, [pc, #92]	; (800722c <SEGGER_SYSVIEW_Init+0x74>)
 80071ce:	4818      	ldr	r0, [pc, #96]	; (8007230 <SEGGER_SYSVIEW_Init+0x78>)
 80071d0:	f7ff fce6 	bl	8006ba0 <SEGGER_RTT_AllocUpBuffer>
 80071d4:	4603      	mov	r3, r0
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	4b16      	ldr	r3, [pc, #88]	; (8007234 <SEGGER_SYSVIEW_Init+0x7c>)
 80071da:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80071dc:	4b15      	ldr	r3, [pc, #84]	; (8007234 <SEGGER_SYSVIEW_Init+0x7c>)
 80071de:	785a      	ldrb	r2, [r3, #1]
 80071e0:	4b14      	ldr	r3, [pc, #80]	; (8007234 <SEGGER_SYSVIEW_Init+0x7c>)
 80071e2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80071e4:	4b13      	ldr	r3, [pc, #76]	; (8007234 <SEGGER_SYSVIEW_Init+0x7c>)
 80071e6:	7e1b      	ldrb	r3, [r3, #24]
 80071e8:	4618      	mov	r0, r3
 80071ea:	2300      	movs	r3, #0
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	2308      	movs	r3, #8
 80071f0:	4a11      	ldr	r2, [pc, #68]	; (8007238 <SEGGER_SYSVIEW_Init+0x80>)
 80071f2:	490f      	ldr	r1, [pc, #60]	; (8007230 <SEGGER_SYSVIEW_Init+0x78>)
 80071f4:	f7ff fd56 	bl	8006ca4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80071f8:	4b0e      	ldr	r3, [pc, #56]	; (8007234 <SEGGER_SYSVIEW_Init+0x7c>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80071fe:	4b0f      	ldr	r3, [pc, #60]	; (800723c <SEGGER_SYSVIEW_Init+0x84>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a0c      	ldr	r2, [pc, #48]	; (8007234 <SEGGER_SYSVIEW_Init+0x7c>)
 8007204:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8007206:	4a0b      	ldr	r2, [pc, #44]	; (8007234 <SEGGER_SYSVIEW_Init+0x7c>)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800720c:	4a09      	ldr	r2, [pc, #36]	; (8007234 <SEGGER_SYSVIEW_Init+0x7c>)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8007212:	4a08      	ldr	r2, [pc, #32]	; (8007234 <SEGGER_SYSVIEW_Init+0x7c>)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8007218:	4a06      	ldr	r2, [pc, #24]	; (8007234 <SEGGER_SYSVIEW_Init+0x7c>)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800721e:	4b05      	ldr	r3, [pc, #20]	; (8007234 <SEGGER_SYSVIEW_Init+0x7c>)
 8007220:	2200      	movs	r2, #0
 8007222:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8007224:	bf00      	nop
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	20001510 	.word	0x20001510
 8007230:	08008b8c 	.word	0x08008b8c
 8007234:	20002918 	.word	0x20002918
 8007238:	20002910 	.word	0x20002910
 800723c:	e0001004 	.word	0xe0001004

08007240 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8007248:	4a03      	ldr	r2, [pc, #12]	; (8007258 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6113      	str	r3, [r2, #16]
}
 800724e:	bf00      	nop
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	bc80      	pop	{r7}
 8007256:	4770      	bx	lr
 8007258:	20002918 	.word	0x20002918

0800725c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007264:	f3ef 8311 	mrs	r3, BASEPRI
 8007268:	f04f 0120 	mov.w	r1, #32
 800726c:	f381 8811 	msr	BASEPRI, r1
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	4808      	ldr	r0, [pc, #32]	; (8007294 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8007274:	f7ff fdd0 	bl	8006e18 <_PreparePacket>
 8007278:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	68b9      	ldr	r1, [r7, #8]
 800727e:	68b8      	ldr	r0, [r7, #8]
 8007280:	f7ff feb4 	bl	8006fec <_SendPacket>
  RECORD_END();
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f383 8811 	msr	BASEPRI, r3
}
 800728a:	bf00      	nop
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	20002948 	.word	0x20002948

08007298 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80072a2:	f3ef 8311 	mrs	r3, BASEPRI
 80072a6:	f04f 0120 	mov.w	r1, #32
 80072aa:	f381 8811 	msr	BASEPRI, r1
 80072ae:	617b      	str	r3, [r7, #20]
 80072b0:	4816      	ldr	r0, [pc, #88]	; (800730c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80072b2:	f7ff fdb1 	bl	8006e18 <_PreparePacket>
 80072b6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	61fb      	str	r3, [r7, #28]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	61bb      	str	r3, [r7, #24]
 80072c4:	e00b      	b.n	80072de <SEGGER_SYSVIEW_RecordU32+0x46>
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	1c59      	adds	r1, r3, #1
 80072ce:	61f9      	str	r1, [r7, #28]
 80072d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072d4:	b2d2      	uxtb	r2, r2
 80072d6:	701a      	strb	r2, [r3, #0]
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	09db      	lsrs	r3, r3, #7
 80072dc:	61bb      	str	r3, [r7, #24]
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	2b7f      	cmp	r3, #127	; 0x7f
 80072e2:	d8f0      	bhi.n	80072c6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	61fa      	str	r2, [r7, #28]
 80072ea:	69ba      	ldr	r2, [r7, #24]
 80072ec:	b2d2      	uxtb	r2, r2
 80072ee:	701a      	strb	r2, [r3, #0]
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	68f9      	ldr	r1, [r7, #12]
 80072f8:	6938      	ldr	r0, [r7, #16]
 80072fa:	f7ff fe77 	bl	8006fec <_SendPacket>
  RECORD_END();
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f383 8811 	msr	BASEPRI, r3
}
 8007304:	bf00      	nop
 8007306:	3720      	adds	r7, #32
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	20002948 	.word	0x20002948

08007310 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007310:	b580      	push	{r7, lr}
 8007312:	b08c      	sub	sp, #48	; 0x30
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800731c:	f3ef 8311 	mrs	r3, BASEPRI
 8007320:	f04f 0120 	mov.w	r1, #32
 8007324:	f381 8811 	msr	BASEPRI, r1
 8007328:	61fb      	str	r3, [r7, #28]
 800732a:	4825      	ldr	r0, [pc, #148]	; (80073c0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800732c:	f7ff fd74 	bl	8006e18 <_PreparePacket>
 8007330:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	62bb      	str	r3, [r7, #40]	; 0x28
 800733e:	e00b      	b.n	8007358 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007342:	b2da      	uxtb	r2, r3
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	1c59      	adds	r1, r3, #1
 8007348:	62f9      	str	r1, [r7, #44]	; 0x2c
 800734a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800734e:	b2d2      	uxtb	r2, r2
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007354:	09db      	lsrs	r3, r3, #7
 8007356:	62bb      	str	r3, [r7, #40]	; 0x28
 8007358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735a:	2b7f      	cmp	r3, #127	; 0x7f
 800735c:	d8f0      	bhi.n	8007340 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800735e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007366:	b2d2      	uxtb	r2, r2
 8007368:	701a      	strb	r2, [r3, #0]
 800736a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	627b      	str	r3, [r7, #36]	; 0x24
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	623b      	str	r3, [r7, #32]
 8007376:	e00b      	b.n	8007390 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	b2da      	uxtb	r2, r3
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	1c59      	adds	r1, r3, #1
 8007380:	6279      	str	r1, [r7, #36]	; 0x24
 8007382:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007386:	b2d2      	uxtb	r2, r2
 8007388:	701a      	strb	r2, [r3, #0]
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	09db      	lsrs	r3, r3, #7
 800738e:	623b      	str	r3, [r7, #32]
 8007390:	6a3b      	ldr	r3, [r7, #32]
 8007392:	2b7f      	cmp	r3, #127	; 0x7f
 8007394:	d8f0      	bhi.n	8007378 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	1c5a      	adds	r2, r3, #1
 800739a:	627a      	str	r2, [r7, #36]	; 0x24
 800739c:	6a3a      	ldr	r2, [r7, #32]
 800739e:	b2d2      	uxtb	r2, r2
 80073a0:	701a      	strb	r2, [r3, #0]
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	6979      	ldr	r1, [r7, #20]
 80073aa:	69b8      	ldr	r0, [r7, #24]
 80073ac:	f7ff fe1e 	bl	8006fec <_SendPacket>
  RECORD_END();
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	f383 8811 	msr	BASEPRI, r3
}
 80073b6:	bf00      	nop
 80073b8:	3730      	adds	r7, #48	; 0x30
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20002948 	.word	0x20002948

080073c4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b08e      	sub	sp, #56	; 0x38
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80073d2:	f3ef 8311 	mrs	r3, BASEPRI
 80073d6:	f04f 0120 	mov.w	r1, #32
 80073da:	f381 8811 	msr	BASEPRI, r1
 80073de:	61fb      	str	r3, [r7, #28]
 80073e0:	4832      	ldr	r0, [pc, #200]	; (80074ac <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80073e2:	f7ff fd19 	bl	8006e18 <_PreparePacket>
 80073e6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	637b      	str	r3, [r7, #52]	; 0x34
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	633b      	str	r3, [r7, #48]	; 0x30
 80073f4:	e00b      	b.n	800740e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fc:	1c59      	adds	r1, r3, #1
 80073fe:	6379      	str	r1, [r7, #52]	; 0x34
 8007400:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007404:	b2d2      	uxtb	r2, r2
 8007406:	701a      	strb	r2, [r3, #0]
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	09db      	lsrs	r3, r3, #7
 800740c:	633b      	str	r3, [r7, #48]	; 0x30
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	2b7f      	cmp	r3, #127	; 0x7f
 8007412:	d8f0      	bhi.n	80073f6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8007414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007416:	1c5a      	adds	r2, r3, #1
 8007418:	637a      	str	r2, [r7, #52]	; 0x34
 800741a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800741c:	b2d2      	uxtb	r2, r2
 800741e:	701a      	strb	r2, [r3, #0]
 8007420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007422:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	62bb      	str	r3, [r7, #40]	; 0x28
 800742c:	e00b      	b.n	8007446 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007430:	b2da      	uxtb	r2, r3
 8007432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007434:	1c59      	adds	r1, r3, #1
 8007436:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007438:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800743c:	b2d2      	uxtb	r2, r2
 800743e:	701a      	strb	r2, [r3, #0]
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	09db      	lsrs	r3, r3, #7
 8007444:	62bb      	str	r3, [r7, #40]	; 0x28
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	2b7f      	cmp	r3, #127	; 0x7f
 800744a:	d8f0      	bhi.n	800742e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800744c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744e:	1c5a      	adds	r2, r3, #1
 8007450:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007454:	b2d2      	uxtb	r2, r2
 8007456:	701a      	strb	r2, [r3, #0]
 8007458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	627b      	str	r3, [r7, #36]	; 0x24
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	623b      	str	r3, [r7, #32]
 8007464:	e00b      	b.n	800747e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	b2da      	uxtb	r2, r3
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	1c59      	adds	r1, r3, #1
 800746e:	6279      	str	r1, [r7, #36]	; 0x24
 8007470:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007474:	b2d2      	uxtb	r2, r2
 8007476:	701a      	strb	r2, [r3, #0]
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	09db      	lsrs	r3, r3, #7
 800747c:	623b      	str	r3, [r7, #32]
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	2b7f      	cmp	r3, #127	; 0x7f
 8007482:	d8f0      	bhi.n	8007466 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	627a      	str	r2, [r7, #36]	; 0x24
 800748a:	6a3a      	ldr	r2, [r7, #32]
 800748c:	b2d2      	uxtb	r2, r2
 800748e:	701a      	strb	r2, [r3, #0]
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	6979      	ldr	r1, [r7, #20]
 8007498:	69b8      	ldr	r0, [r7, #24]
 800749a:	f7ff fda7 	bl	8006fec <_SendPacket>
  RECORD_END();
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	f383 8811 	msr	BASEPRI, r3
}
 80074a4:	bf00      	nop
 80074a6:	3738      	adds	r7, #56	; 0x38
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	20002948 	.word	0x20002948

080074b0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b090      	sub	sp, #64	; 0x40
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
 80074bc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80074be:	f3ef 8311 	mrs	r3, BASEPRI
 80074c2:	f04f 0120 	mov.w	r1, #32
 80074c6:	f381 8811 	msr	BASEPRI, r1
 80074ca:	61fb      	str	r3, [r7, #28]
 80074cc:	4840      	ldr	r0, [pc, #256]	; (80075d0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80074ce:	f7ff fca3 	bl	8006e18 <_PreparePacket>
 80074d2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	63bb      	str	r3, [r7, #56]	; 0x38
 80074e0:	e00b      	b.n	80074fa <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80074e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e8:	1c59      	adds	r1, r3, #1
 80074ea:	63f9      	str	r1, [r7, #60]	; 0x3c
 80074ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074f0:	b2d2      	uxtb	r2, r2
 80074f2:	701a      	strb	r2, [r3, #0]
 80074f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f6:	09db      	lsrs	r3, r3, #7
 80074f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80074fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fc:	2b7f      	cmp	r3, #127	; 0x7f
 80074fe:	d8f0      	bhi.n	80074e2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8007500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007508:	b2d2      	uxtb	r2, r2
 800750a:	701a      	strb	r2, [r3, #0]
 800750c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800750e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	637b      	str	r3, [r7, #52]	; 0x34
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	633b      	str	r3, [r7, #48]	; 0x30
 8007518:	e00b      	b.n	8007532 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	b2da      	uxtb	r2, r3
 800751e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007520:	1c59      	adds	r1, r3, #1
 8007522:	6379      	str	r1, [r7, #52]	; 0x34
 8007524:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007528:	b2d2      	uxtb	r2, r2
 800752a:	701a      	strb	r2, [r3, #0]
 800752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752e:	09db      	lsrs	r3, r3, #7
 8007530:	633b      	str	r3, [r7, #48]	; 0x30
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	2b7f      	cmp	r3, #127	; 0x7f
 8007536:	d8f0      	bhi.n	800751a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753a:	1c5a      	adds	r2, r3, #1
 800753c:	637a      	str	r2, [r7, #52]	; 0x34
 800753e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007540:	b2d2      	uxtb	r2, r2
 8007542:	701a      	strb	r2, [r3, #0]
 8007544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007546:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007550:	e00b      	b.n	800756a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8007552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007554:	b2da      	uxtb	r2, r3
 8007556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007558:	1c59      	adds	r1, r3, #1
 800755a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800755c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007560:	b2d2      	uxtb	r2, r2
 8007562:	701a      	strb	r2, [r3, #0]
 8007564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007566:	09db      	lsrs	r3, r3, #7
 8007568:	62bb      	str	r3, [r7, #40]	; 0x28
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	2b7f      	cmp	r3, #127	; 0x7f
 800756e:	d8f0      	bhi.n	8007552 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8007570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007578:	b2d2      	uxtb	r2, r2
 800757a:	701a      	strb	r2, [r3, #0]
 800757c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	627b      	str	r3, [r7, #36]	; 0x24
 8007584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007586:	623b      	str	r3, [r7, #32]
 8007588:	e00b      	b.n	80075a2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	b2da      	uxtb	r2, r3
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	1c59      	adds	r1, r3, #1
 8007592:	6279      	str	r1, [r7, #36]	; 0x24
 8007594:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007598:	b2d2      	uxtb	r2, r2
 800759a:	701a      	strb	r2, [r3, #0]
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	09db      	lsrs	r3, r3, #7
 80075a0:	623b      	str	r3, [r7, #32]
 80075a2:	6a3b      	ldr	r3, [r7, #32]
 80075a4:	2b7f      	cmp	r3, #127	; 0x7f
 80075a6:	d8f0      	bhi.n	800758a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	627a      	str	r2, [r7, #36]	; 0x24
 80075ae:	6a3a      	ldr	r2, [r7, #32]
 80075b0:	b2d2      	uxtb	r2, r2
 80075b2:	701a      	strb	r2, [r3, #0]
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	6979      	ldr	r1, [r7, #20]
 80075bc:	69b8      	ldr	r0, [r7, #24]
 80075be:	f7ff fd15 	bl	8006fec <_SendPacket>
  RECORD_END();
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	f383 8811 	msr	BASEPRI, r3
}
 80075c8:	bf00      	nop
 80075ca:	3740      	adds	r7, #64	; 0x40
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	20002948 	.word	0x20002948

080075d4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08c      	sub	sp, #48	; 0x30
 80075d8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80075da:	4b58      	ldr	r3, [pc, #352]	; (800773c <SEGGER_SYSVIEW_Start+0x168>)
 80075dc:	2201      	movs	r2, #1
 80075de:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80075e0:	f3ef 8311 	mrs	r3, BASEPRI
 80075e4:	f04f 0120 	mov.w	r1, #32
 80075e8:	f381 8811 	msr	BASEPRI, r1
 80075ec:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80075ee:	4b53      	ldr	r3, [pc, #332]	; (800773c <SEGGER_SYSVIEW_Start+0x168>)
 80075f0:	785b      	ldrb	r3, [r3, #1]
 80075f2:	220a      	movs	r2, #10
 80075f4:	4952      	ldr	r1, [pc, #328]	; (8007740 <SEGGER_SYSVIEW_Start+0x16c>)
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7f8 fdaa 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007602:	200a      	movs	r0, #10
 8007604:	f7ff fe2a 	bl	800725c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007608:	f3ef 8311 	mrs	r3, BASEPRI
 800760c:	f04f 0120 	mov.w	r1, #32
 8007610:	f381 8811 	msr	BASEPRI, r1
 8007614:	60bb      	str	r3, [r7, #8]
 8007616:	484b      	ldr	r0, [pc, #300]	; (8007744 <SEGGER_SYSVIEW_Start+0x170>)
 8007618:	f7ff fbfe 	bl	8006e18 <_PreparePacket>
 800761c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007626:	4b45      	ldr	r3, [pc, #276]	; (800773c <SEGGER_SYSVIEW_Start+0x168>)
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	62bb      	str	r3, [r7, #40]	; 0x28
 800762c:	e00b      	b.n	8007646 <SEGGER_SYSVIEW_Start+0x72>
 800762e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007630:	b2da      	uxtb	r2, r3
 8007632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007634:	1c59      	adds	r1, r3, #1
 8007636:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007638:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800763c:	b2d2      	uxtb	r2, r2
 800763e:	701a      	strb	r2, [r3, #0]
 8007640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007642:	09db      	lsrs	r3, r3, #7
 8007644:	62bb      	str	r3, [r7, #40]	; 0x28
 8007646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007648:	2b7f      	cmp	r3, #127	; 0x7f
 800764a:	d8f0      	bhi.n	800762e <SEGGER_SYSVIEW_Start+0x5a>
 800764c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007654:	b2d2      	uxtb	r2, r2
 8007656:	701a      	strb	r2, [r3, #0]
 8007658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	627b      	str	r3, [r7, #36]	; 0x24
 8007660:	4b36      	ldr	r3, [pc, #216]	; (800773c <SEGGER_SYSVIEW_Start+0x168>)
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	623b      	str	r3, [r7, #32]
 8007666:	e00b      	b.n	8007680 <SEGGER_SYSVIEW_Start+0xac>
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	b2da      	uxtb	r2, r3
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	1c59      	adds	r1, r3, #1
 8007670:	6279      	str	r1, [r7, #36]	; 0x24
 8007672:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007676:	b2d2      	uxtb	r2, r2
 8007678:	701a      	strb	r2, [r3, #0]
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	09db      	lsrs	r3, r3, #7
 800767e:	623b      	str	r3, [r7, #32]
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	2b7f      	cmp	r3, #127	; 0x7f
 8007684:	d8f0      	bhi.n	8007668 <SEGGER_SYSVIEW_Start+0x94>
 8007686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	627a      	str	r2, [r7, #36]	; 0x24
 800768c:	6a3a      	ldr	r2, [r7, #32]
 800768e:	b2d2      	uxtb	r2, r2
 8007690:	701a      	strb	r2, [r3, #0]
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	61fb      	str	r3, [r7, #28]
 800769a:	4b28      	ldr	r3, [pc, #160]	; (800773c <SEGGER_SYSVIEW_Start+0x168>)
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	61bb      	str	r3, [r7, #24]
 80076a0:	e00b      	b.n	80076ba <SEGGER_SYSVIEW_Start+0xe6>
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	b2da      	uxtb	r2, r3
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	1c59      	adds	r1, r3, #1
 80076aa:	61f9      	str	r1, [r7, #28]
 80076ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076b0:	b2d2      	uxtb	r2, r2
 80076b2:	701a      	strb	r2, [r3, #0]
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	09db      	lsrs	r3, r3, #7
 80076b8:	61bb      	str	r3, [r7, #24]
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	2b7f      	cmp	r3, #127	; 0x7f
 80076be:	d8f0      	bhi.n	80076a2 <SEGGER_SYSVIEW_Start+0xce>
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	61fa      	str	r2, [r7, #28]
 80076c6:	69ba      	ldr	r2, [r7, #24]
 80076c8:	b2d2      	uxtb	r2, r2
 80076ca:	701a      	strb	r2, [r3, #0]
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	617b      	str	r3, [r7, #20]
 80076d4:	2300      	movs	r3, #0
 80076d6:	613b      	str	r3, [r7, #16]
 80076d8:	e00b      	b.n	80076f2 <SEGGER_SYSVIEW_Start+0x11e>
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	1c59      	adds	r1, r3, #1
 80076e2:	6179      	str	r1, [r7, #20]
 80076e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076e8:	b2d2      	uxtb	r2, r2
 80076ea:	701a      	strb	r2, [r3, #0]
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	09db      	lsrs	r3, r3, #7
 80076f0:	613b      	str	r3, [r7, #16]
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	2b7f      	cmp	r3, #127	; 0x7f
 80076f6:	d8f0      	bhi.n	80076da <SEGGER_SYSVIEW_Start+0x106>
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	1c5a      	adds	r2, r3, #1
 80076fc:	617a      	str	r2, [r7, #20]
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	b2d2      	uxtb	r2, r2
 8007702:	701a      	strb	r2, [r3, #0]
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007708:	2218      	movs	r2, #24
 800770a:	6839      	ldr	r1, [r7, #0]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7ff fc6d 	bl	8006fec <_SendPacket>
      RECORD_END();
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007718:	4b08      	ldr	r3, [pc, #32]	; (800773c <SEGGER_SYSVIEW_Start+0x168>)
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007720:	4b06      	ldr	r3, [pc, #24]	; (800773c <SEGGER_SYSVIEW_Start+0x168>)
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007726:	f000 f9eb 	bl	8007b00 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800772a:	f000 f9b1 	bl	8007a90 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800772e:	f000 fc81 	bl	8008034 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8007732:	bf00      	nop
 8007734:	3730      	adds	r7, #48	; 0x30
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	20002918 	.word	0x20002918
 8007740:	08008bb4 	.word	0x08008bb4
 8007744:	20002948 	.word	0x20002948

08007748 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800774e:	f3ef 8311 	mrs	r3, BASEPRI
 8007752:	f04f 0120 	mov.w	r1, #32
 8007756:	f381 8811 	msr	BASEPRI, r1
 800775a:	607b      	str	r3, [r7, #4]
 800775c:	480b      	ldr	r0, [pc, #44]	; (800778c <SEGGER_SYSVIEW_Stop+0x44>)
 800775e:	f7ff fb5b 	bl	8006e18 <_PreparePacket>
 8007762:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007764:	4b0a      	ldr	r3, [pc, #40]	; (8007790 <SEGGER_SYSVIEW_Stop+0x48>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d007      	beq.n	800777c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800776c:	220b      	movs	r2, #11
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6838      	ldr	r0, [r7, #0]
 8007772:	f7ff fc3b 	bl	8006fec <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8007776:	4b06      	ldr	r3, [pc, #24]	; (8007790 <SEGGER_SYSVIEW_Stop+0x48>)
 8007778:	2200      	movs	r2, #0
 800777a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f383 8811 	msr	BASEPRI, r3
}
 8007782:	bf00      	nop
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	20002948 	.word	0x20002948
 8007790:	20002918 	.word	0x20002918

08007794 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007794:	b580      	push	{r7, lr}
 8007796:	b08c      	sub	sp, #48	; 0x30
 8007798:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800779a:	f3ef 8311 	mrs	r3, BASEPRI
 800779e:	f04f 0120 	mov.w	r1, #32
 80077a2:	f381 8811 	msr	BASEPRI, r1
 80077a6:	60fb      	str	r3, [r7, #12]
 80077a8:	4845      	ldr	r0, [pc, #276]	; (80078c0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80077aa:	f7ff fb35 	bl	8006e18 <_PreparePacket>
 80077ae:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077b8:	4b42      	ldr	r3, [pc, #264]	; (80078c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80077be:	e00b      	b.n	80077d8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c6:	1c59      	adds	r1, r3, #1
 80077c8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80077ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077ce:	b2d2      	uxtb	r2, r2
 80077d0:	701a      	strb	r2, [r3, #0]
 80077d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d4:	09db      	lsrs	r3, r3, #7
 80077d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80077d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077da:	2b7f      	cmp	r3, #127	; 0x7f
 80077dc:	d8f0      	bhi.n	80077c0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80077de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e0:	1c5a      	adds	r2, r3, #1
 80077e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077e6:	b2d2      	uxtb	r2, r2
 80077e8:	701a      	strb	r2, [r3, #0]
 80077ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	627b      	str	r3, [r7, #36]	; 0x24
 80077f2:	4b34      	ldr	r3, [pc, #208]	; (80078c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	623b      	str	r3, [r7, #32]
 80077f8:	e00b      	b.n	8007812 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007800:	1c59      	adds	r1, r3, #1
 8007802:	6279      	str	r1, [r7, #36]	; 0x24
 8007804:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007808:	b2d2      	uxtb	r2, r2
 800780a:	701a      	strb	r2, [r3, #0]
 800780c:	6a3b      	ldr	r3, [r7, #32]
 800780e:	09db      	lsrs	r3, r3, #7
 8007810:	623b      	str	r3, [r7, #32]
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	2b7f      	cmp	r3, #127	; 0x7f
 8007816:	d8f0      	bhi.n	80077fa <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	1c5a      	adds	r2, r3, #1
 800781c:	627a      	str	r2, [r7, #36]	; 0x24
 800781e:	6a3a      	ldr	r2, [r7, #32]
 8007820:	b2d2      	uxtb	r2, r2
 8007822:	701a      	strb	r2, [r3, #0]
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	61fb      	str	r3, [r7, #28]
 800782c:	4b25      	ldr	r3, [pc, #148]	; (80078c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	61bb      	str	r3, [r7, #24]
 8007832:	e00b      	b.n	800784c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	b2da      	uxtb	r2, r3
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	1c59      	adds	r1, r3, #1
 800783c:	61f9      	str	r1, [r7, #28]
 800783e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007842:	b2d2      	uxtb	r2, r2
 8007844:	701a      	strb	r2, [r3, #0]
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	09db      	lsrs	r3, r3, #7
 800784a:	61bb      	str	r3, [r7, #24]
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	2b7f      	cmp	r3, #127	; 0x7f
 8007850:	d8f0      	bhi.n	8007834 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	1c5a      	adds	r2, r3, #1
 8007856:	61fa      	str	r2, [r7, #28]
 8007858:	69ba      	ldr	r2, [r7, #24]
 800785a:	b2d2      	uxtb	r2, r2
 800785c:	701a      	strb	r2, [r3, #0]
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	617b      	str	r3, [r7, #20]
 8007866:	2300      	movs	r3, #0
 8007868:	613b      	str	r3, [r7, #16]
 800786a:	e00b      	b.n	8007884 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	b2da      	uxtb	r2, r3
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	1c59      	adds	r1, r3, #1
 8007874:	6179      	str	r1, [r7, #20]
 8007876:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800787a:	b2d2      	uxtb	r2, r2
 800787c:	701a      	strb	r2, [r3, #0]
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	09db      	lsrs	r3, r3, #7
 8007882:	613b      	str	r3, [r7, #16]
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	2b7f      	cmp	r3, #127	; 0x7f
 8007888:	d8f0      	bhi.n	800786c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	1c5a      	adds	r2, r3, #1
 800788e:	617a      	str	r2, [r7, #20]
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	b2d2      	uxtb	r2, r2
 8007894:	701a      	strb	r2, [r3, #0]
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800789a:	2218      	movs	r2, #24
 800789c:	6879      	ldr	r1, [r7, #4]
 800789e:	68b8      	ldr	r0, [r7, #8]
 80078a0:	f7ff fba4 	bl	8006fec <_SendPacket>
  RECORD_END();
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80078aa:	4b06      	ldr	r3, [pc, #24]	; (80078c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80078b2:	4b04      	ldr	r3, [pc, #16]	; (80078c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80078b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b6:	4798      	blx	r3
  }
}
 80078b8:	bf00      	nop
 80078ba:	3730      	adds	r7, #48	; 0x30
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	20002948 	.word	0x20002948
 80078c4:	20002918 	.word	0x20002918

080078c8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b092      	sub	sp, #72	; 0x48
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80078d0:	f3ef 8311 	mrs	r3, BASEPRI
 80078d4:	f04f 0120 	mov.w	r1, #32
 80078d8:	f381 8811 	msr	BASEPRI, r1
 80078dc:	617b      	str	r3, [r7, #20]
 80078de:	486a      	ldr	r0, [pc, #424]	; (8007a88 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80078e0:	f7ff fa9a 	bl	8006e18 <_PreparePacket>
 80078e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	647b      	str	r3, [r7, #68]	; 0x44
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	4b66      	ldr	r3, [pc, #408]	; (8007a8c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	643b      	str	r3, [r7, #64]	; 0x40
 80078fa:	e00b      	b.n	8007914 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80078fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007902:	1c59      	adds	r1, r3, #1
 8007904:	6479      	str	r1, [r7, #68]	; 0x44
 8007906:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800790a:	b2d2      	uxtb	r2, r2
 800790c:	701a      	strb	r2, [r3, #0]
 800790e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007910:	09db      	lsrs	r3, r3, #7
 8007912:	643b      	str	r3, [r7, #64]	; 0x40
 8007914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007916:	2b7f      	cmp	r3, #127	; 0x7f
 8007918:	d8f0      	bhi.n	80078fc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800791a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800791c:	1c5a      	adds	r2, r3, #1
 800791e:	647a      	str	r2, [r7, #68]	; 0x44
 8007920:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007922:	b2d2      	uxtb	r2, r2
 8007924:	701a      	strb	r2, [r3, #0]
 8007926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007928:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	63bb      	str	r3, [r7, #56]	; 0x38
 8007934:	e00b      	b.n	800794e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007938:	b2da      	uxtb	r2, r3
 800793a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800793c:	1c59      	adds	r1, r3, #1
 800793e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007940:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007944:	b2d2      	uxtb	r2, r2
 8007946:	701a      	strb	r2, [r3, #0]
 8007948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794a:	09db      	lsrs	r3, r3, #7
 800794c:	63bb      	str	r3, [r7, #56]	; 0x38
 800794e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007950:	2b7f      	cmp	r3, #127	; 0x7f
 8007952:	d8f0      	bhi.n	8007936 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	63fa      	str	r2, [r7, #60]	; 0x3c
 800795a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800795c:	b2d2      	uxtb	r2, r2
 800795e:	701a      	strb	r2, [r3, #0]
 8007960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007962:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	2220      	movs	r2, #32
 800796a:	4619      	mov	r1, r3
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f7ff fa07 	bl	8006d80 <_EncodeStr>
 8007972:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007974:	2209      	movs	r2, #9
 8007976:	68f9      	ldr	r1, [r7, #12]
 8007978:	6938      	ldr	r0, [r7, #16]
 800797a:	f7ff fb37 	bl	8006fec <_SendPacket>
  //
  pPayload = pPayloadStart;
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	637b      	str	r3, [r7, #52]	; 0x34
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	4b40      	ldr	r3, [pc, #256]	; (8007a8c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	633b      	str	r3, [r7, #48]	; 0x30
 8007992:	e00b      	b.n	80079ac <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	b2da      	uxtb	r2, r3
 8007998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800799a:	1c59      	adds	r1, r3, #1
 800799c:	6379      	str	r1, [r7, #52]	; 0x34
 800799e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079a2:	b2d2      	uxtb	r2, r2
 80079a4:	701a      	strb	r2, [r3, #0]
 80079a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a8:	09db      	lsrs	r3, r3, #7
 80079aa:	633b      	str	r3, [r7, #48]	; 0x30
 80079ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ae:	2b7f      	cmp	r3, #127	; 0x7f
 80079b0:	d8f0      	bhi.n	8007994 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80079b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	637a      	str	r2, [r7, #52]	; 0x34
 80079b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ba:	b2d2      	uxtb	r2, r2
 80079bc:	701a      	strb	r2, [r3, #0]
 80079be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80079cc:	e00b      	b.n	80079e6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d4:	1c59      	adds	r1, r3, #1
 80079d6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80079d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079dc:	b2d2      	uxtb	r2, r2
 80079de:	701a      	strb	r2, [r3, #0]
 80079e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e2:	09db      	lsrs	r3, r3, #7
 80079e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80079e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e8:	2b7f      	cmp	r3, #127	; 0x7f
 80079ea:	d8f0      	bhi.n	80079ce <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80079ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ee:	1c5a      	adds	r2, r3, #1
 80079f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079f4:	b2d2      	uxtb	r2, r2
 80079f6:	701a      	strb	r2, [r3, #0]
 80079f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	623b      	str	r3, [r7, #32]
 8007a06:	e00b      	b.n	8007a20 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	b2da      	uxtb	r2, r3
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0e:	1c59      	adds	r1, r3, #1
 8007a10:	6279      	str	r1, [r7, #36]	; 0x24
 8007a12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a16:	b2d2      	uxtb	r2, r2
 8007a18:	701a      	strb	r2, [r3, #0]
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	09db      	lsrs	r3, r3, #7
 8007a1e:	623b      	str	r3, [r7, #32]
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	2b7f      	cmp	r3, #127	; 0x7f
 8007a24:	d8f0      	bhi.n	8007a08 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	627a      	str	r2, [r7, #36]	; 0x24
 8007a2c:	6a3a      	ldr	r2, [r7, #32]
 8007a2e:	b2d2      	uxtb	r2, r2
 8007a30:	701a      	strb	r2, [r3, #0]
 8007a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	61fb      	str	r3, [r7, #28]
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	61bb      	str	r3, [r7, #24]
 8007a3e:	e00b      	b.n	8007a58 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	1c59      	adds	r1, r3, #1
 8007a48:	61f9      	str	r1, [r7, #28]
 8007a4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a4e:	b2d2      	uxtb	r2, r2
 8007a50:	701a      	strb	r2, [r3, #0]
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	09db      	lsrs	r3, r3, #7
 8007a56:	61bb      	str	r3, [r7, #24]
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8007a5c:	d8f0      	bhi.n	8007a40 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	61fa      	str	r2, [r7, #28]
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	b2d2      	uxtb	r2, r2
 8007a68:	701a      	strb	r2, [r3, #0]
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007a6e:	2215      	movs	r2, #21
 8007a70:	68f9      	ldr	r1, [r7, #12]
 8007a72:	6938      	ldr	r0, [r7, #16]
 8007a74:	f7ff faba 	bl	8006fec <_SendPacket>
  RECORD_END();
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f383 8811 	msr	BASEPRI, r3
}
 8007a7e:	bf00      	nop
 8007a80:	3748      	adds	r7, #72	; 0x48
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	20002948 	.word	0x20002948
 8007a8c:	20002918 	.word	0x20002918

08007a90 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007a94:	4b07      	ldr	r3, [pc, #28]	; (8007ab4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007a96:	6a1b      	ldr	r3, [r3, #32]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d008      	beq.n	8007aae <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007a9c:	4b05      	ldr	r3, [pc, #20]	; (8007ab4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007aa6:	4b03      	ldr	r3, [pc, #12]	; (8007ab4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	4798      	blx	r3
  }
}
 8007aae:	bf00      	nop
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20002918 	.word	0x20002918

08007ab8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007ac0:	f3ef 8311 	mrs	r3, BASEPRI
 8007ac4:	f04f 0120 	mov.w	r1, #32
 8007ac8:	f381 8811 	msr	BASEPRI, r1
 8007acc:	617b      	str	r3, [r7, #20]
 8007ace:	480b      	ldr	r0, [pc, #44]	; (8007afc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007ad0:	f7ff f9a2 	bl	8006e18 <_PreparePacket>
 8007ad4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007ad6:	2280      	movs	r2, #128	; 0x80
 8007ad8:	6879      	ldr	r1, [r7, #4]
 8007ada:	6938      	ldr	r0, [r7, #16]
 8007adc:	f7ff f950 	bl	8006d80 <_EncodeStr>
 8007ae0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007ae2:	220e      	movs	r2, #14
 8007ae4:	68f9      	ldr	r1, [r7, #12]
 8007ae6:	6938      	ldr	r0, [r7, #16]
 8007ae8:	f7ff fa80 	bl	8006fec <_SendPacket>
  RECORD_END();
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f383 8811 	msr	BASEPRI, r3
}
 8007af2:	bf00      	nop
 8007af4:	3718      	adds	r7, #24
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	20002948 	.word	0x20002948

08007b00 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007b00:	b590      	push	{r4, r7, lr}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007b06:	4b14      	ldr	r3, [pc, #80]	; (8007b58 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d019      	beq.n	8007b42 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8007b0e:	4b12      	ldr	r3, [pc, #72]	; (8007b58 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d014      	beq.n	8007b42 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007b18:	4b0f      	ldr	r3, [pc, #60]	; (8007b58 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007b1a:	6a1b      	ldr	r3, [r3, #32]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4798      	blx	r3
 8007b20:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007b24:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007b26:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007b2a:	f04f 0300 	mov.w	r3, #0
 8007b2e:	f04f 0400 	mov.w	r4, #0
 8007b32:	0013      	movs	r3, r2
 8007b34:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007b36:	461a      	mov	r2, r3
 8007b38:	4601      	mov	r1, r0
 8007b3a:	200d      	movs	r0, #13
 8007b3c:	f7ff fbe8 	bl	8007310 <SEGGER_SYSVIEW_RecordU32x2>
 8007b40:	e005      	b.n	8007b4e <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007b42:	4b06      	ldr	r3, [pc, #24]	; (8007b5c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4619      	mov	r1, r3
 8007b48:	200c      	movs	r0, #12
 8007b4a:	f7ff fba5 	bl	8007298 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007b4e:	bf00      	nop
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd90      	pop	{r4, r7, pc}
 8007b56:	bf00      	nop
 8007b58:	20002918 	.word	0x20002918
 8007b5c:	e0001004 	.word	0xe0001004

08007b60 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007b66:	f3ef 8311 	mrs	r3, BASEPRI
 8007b6a:	f04f 0120 	mov.w	r1, #32
 8007b6e:	f381 8811 	msr	BASEPRI, r1
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	4819      	ldr	r0, [pc, #100]	; (8007bdc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007b76:	f7ff f94f 	bl	8006e18 <_PreparePacket>
 8007b7a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007b80:	4b17      	ldr	r3, [pc, #92]	; (8007be0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b88:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	617b      	str	r3, [r7, #20]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	613b      	str	r3, [r7, #16]
 8007b92:	e00b      	b.n	8007bac <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	1c59      	adds	r1, r3, #1
 8007b9c:	6179      	str	r1, [r7, #20]
 8007b9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ba2:	b2d2      	uxtb	r2, r2
 8007ba4:	701a      	strb	r2, [r3, #0]
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	09db      	lsrs	r3, r3, #7
 8007baa:	613b      	str	r3, [r7, #16]
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	2b7f      	cmp	r3, #127	; 0x7f
 8007bb0:	d8f0      	bhi.n	8007b94 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	1c5a      	adds	r2, r3, #1
 8007bb6:	617a      	str	r2, [r7, #20]
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	b2d2      	uxtb	r2, r2
 8007bbc:	701a      	strb	r2, [r3, #0]
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007bc2:	2202      	movs	r2, #2
 8007bc4:	6879      	ldr	r1, [r7, #4]
 8007bc6:	68b8      	ldr	r0, [r7, #8]
 8007bc8:	f7ff fa10 	bl	8006fec <_SendPacket>
  RECORD_END();
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f383 8811 	msr	BASEPRI, r3
}
 8007bd2:	bf00      	nop
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20002948 	.word	0x20002948
 8007be0:	e000ed04 	.word	0xe000ed04

08007be4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007bea:	f3ef 8311 	mrs	r3, BASEPRI
 8007bee:	f04f 0120 	mov.w	r1, #32
 8007bf2:	f381 8811 	msr	BASEPRI, r1
 8007bf6:	607b      	str	r3, [r7, #4]
 8007bf8:	4807      	ldr	r0, [pc, #28]	; (8007c18 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007bfa:	f7ff f90d 	bl	8006e18 <_PreparePacket>
 8007bfe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007c00:	2203      	movs	r2, #3
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6838      	ldr	r0, [r7, #0]
 8007c06:	f7ff f9f1 	bl	8006fec <_SendPacket>
  RECORD_END();
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f383 8811 	msr	BASEPRI, r3
}
 8007c10:	bf00      	nop
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	20002948 	.word	0x20002948

08007c1c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007c22:	f3ef 8311 	mrs	r3, BASEPRI
 8007c26:	f04f 0120 	mov.w	r1, #32
 8007c2a:	f381 8811 	msr	BASEPRI, r1
 8007c2e:	607b      	str	r3, [r7, #4]
 8007c30:	4807      	ldr	r0, [pc, #28]	; (8007c50 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007c32:	f7ff f8f1 	bl	8006e18 <_PreparePacket>
 8007c36:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007c38:	2212      	movs	r2, #18
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6838      	ldr	r0, [r7, #0]
 8007c3e:	f7ff f9d5 	bl	8006fec <_SendPacket>
  RECORD_END();
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f383 8811 	msr	BASEPRI, r3
}
 8007c48:	bf00      	nop
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	20002948 	.word	0x20002948

08007c54 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007c5a:	f3ef 8311 	mrs	r3, BASEPRI
 8007c5e:	f04f 0120 	mov.w	r1, #32
 8007c62:	f381 8811 	msr	BASEPRI, r1
 8007c66:	607b      	str	r3, [r7, #4]
 8007c68:	4807      	ldr	r0, [pc, #28]	; (8007c88 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007c6a:	f7ff f8d5 	bl	8006e18 <_PreparePacket>
 8007c6e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007c70:	2211      	movs	r2, #17
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6838      	ldr	r0, [r7, #0]
 8007c76:	f7ff f9b9 	bl	8006fec <_SendPacket>
  RECORD_END();
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f383 8811 	msr	BASEPRI, r3
}
 8007c80:	bf00      	nop
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	20002948 	.word	0x20002948

08007c8c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b088      	sub	sp, #32
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007c94:	f3ef 8311 	mrs	r3, BASEPRI
 8007c98:	f04f 0120 	mov.w	r1, #32
 8007c9c:	f381 8811 	msr	BASEPRI, r1
 8007ca0:	617b      	str	r3, [r7, #20]
 8007ca2:	4819      	ldr	r0, [pc, #100]	; (8007d08 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007ca4:	f7ff f8b8 	bl	8006e18 <_PreparePacket>
 8007ca8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007cae:	4b17      	ldr	r3, [pc, #92]	; (8007d0c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	61fb      	str	r3, [r7, #28]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	61bb      	str	r3, [r7, #24]
 8007cc0:	e00b      	b.n	8007cda <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	1c59      	adds	r1, r3, #1
 8007cca:	61f9      	str	r1, [r7, #28]
 8007ccc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cd0:	b2d2      	uxtb	r2, r2
 8007cd2:	701a      	strb	r2, [r3, #0]
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	09db      	lsrs	r3, r3, #7
 8007cd8:	61bb      	str	r3, [r7, #24]
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	2b7f      	cmp	r3, #127	; 0x7f
 8007cde:	d8f0      	bhi.n	8007cc2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	1c5a      	adds	r2, r3, #1
 8007ce4:	61fa      	str	r2, [r7, #28]
 8007ce6:	69ba      	ldr	r2, [r7, #24]
 8007ce8:	b2d2      	uxtb	r2, r2
 8007cea:	701a      	strb	r2, [r3, #0]
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007cf0:	2208      	movs	r2, #8
 8007cf2:	68f9      	ldr	r1, [r7, #12]
 8007cf4:	6938      	ldr	r0, [r7, #16]
 8007cf6:	f7ff f979 	bl	8006fec <_SendPacket>
  RECORD_END();
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f383 8811 	msr	BASEPRI, r3
}
 8007d00:	bf00      	nop
 8007d02:	3720      	adds	r7, #32
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	20002948 	.word	0x20002948
 8007d0c:	20002918 	.word	0x20002918

08007d10 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b088      	sub	sp, #32
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007d18:	f3ef 8311 	mrs	r3, BASEPRI
 8007d1c:	f04f 0120 	mov.w	r1, #32
 8007d20:	f381 8811 	msr	BASEPRI, r1
 8007d24:	617b      	str	r3, [r7, #20]
 8007d26:	4819      	ldr	r0, [pc, #100]	; (8007d8c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007d28:	f7ff f876 	bl	8006e18 <_PreparePacket>
 8007d2c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007d32:	4b17      	ldr	r3, [pc, #92]	; (8007d90 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	61fb      	str	r3, [r7, #28]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	61bb      	str	r3, [r7, #24]
 8007d44:	e00b      	b.n	8007d5e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	1c59      	adds	r1, r3, #1
 8007d4e:	61f9      	str	r1, [r7, #28]
 8007d50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d54:	b2d2      	uxtb	r2, r2
 8007d56:	701a      	strb	r2, [r3, #0]
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	09db      	lsrs	r3, r3, #7
 8007d5c:	61bb      	str	r3, [r7, #24]
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	2b7f      	cmp	r3, #127	; 0x7f
 8007d62:	d8f0      	bhi.n	8007d46 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	1c5a      	adds	r2, r3, #1
 8007d68:	61fa      	str	r2, [r7, #28]
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	b2d2      	uxtb	r2, r2
 8007d6e:	701a      	strb	r2, [r3, #0]
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007d74:	2204      	movs	r2, #4
 8007d76:	68f9      	ldr	r1, [r7, #12]
 8007d78:	6938      	ldr	r0, [r7, #16]
 8007d7a:	f7ff f937 	bl	8006fec <_SendPacket>
  RECORD_END();
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f383 8811 	msr	BASEPRI, r3
}
 8007d84:	bf00      	nop
 8007d86:	3720      	adds	r7, #32
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	20002948 	.word	0x20002948
 8007d90:	20002918 	.word	0x20002918

08007d94 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b088      	sub	sp, #32
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007d9c:	f3ef 8311 	mrs	r3, BASEPRI
 8007da0:	f04f 0120 	mov.w	r1, #32
 8007da4:	f381 8811 	msr	BASEPRI, r1
 8007da8:	617b      	str	r3, [r7, #20]
 8007daa:	4819      	ldr	r0, [pc, #100]	; (8007e10 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007dac:	f7ff f834 	bl	8006e18 <_PreparePacket>
 8007db0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007db6:	4b17      	ldr	r3, [pc, #92]	; (8007e14 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	61fb      	str	r3, [r7, #28]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	61bb      	str	r3, [r7, #24]
 8007dc8:	e00b      	b.n	8007de2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	1c59      	adds	r1, r3, #1
 8007dd2:	61f9      	str	r1, [r7, #28]
 8007dd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007dd8:	b2d2      	uxtb	r2, r2
 8007dda:	701a      	strb	r2, [r3, #0]
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	09db      	lsrs	r3, r3, #7
 8007de0:	61bb      	str	r3, [r7, #24]
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	2b7f      	cmp	r3, #127	; 0x7f
 8007de6:	d8f0      	bhi.n	8007dca <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	61fa      	str	r2, [r7, #28]
 8007dee:	69ba      	ldr	r2, [r7, #24]
 8007df0:	b2d2      	uxtb	r2, r2
 8007df2:	701a      	strb	r2, [r3, #0]
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007df8:	2206      	movs	r2, #6
 8007dfa:	68f9      	ldr	r1, [r7, #12]
 8007dfc:	6938      	ldr	r0, [r7, #16]
 8007dfe:	f7ff f8f5 	bl	8006fec <_SendPacket>
  RECORD_END();
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f383 8811 	msr	BASEPRI, r3
}
 8007e08:	bf00      	nop
 8007e0a:	3720      	adds	r7, #32
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	20002948 	.word	0x20002948
 8007e14:	20002918 	.word	0x20002918

08007e18 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b08a      	sub	sp, #40	; 0x28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007e22:	f3ef 8311 	mrs	r3, BASEPRI
 8007e26:	f04f 0120 	mov.w	r1, #32
 8007e2a:	f381 8811 	msr	BASEPRI, r1
 8007e2e:	617b      	str	r3, [r7, #20]
 8007e30:	4827      	ldr	r0, [pc, #156]	; (8007ed0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007e32:	f7fe fff1 	bl	8006e18 <_PreparePacket>
 8007e36:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007e3c:	4b25      	ldr	r3, [pc, #148]	; (8007ed4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	627b      	str	r3, [r7, #36]	; 0x24
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	623b      	str	r3, [r7, #32]
 8007e4e:	e00b      	b.n	8007e68 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e56:	1c59      	adds	r1, r3, #1
 8007e58:	6279      	str	r1, [r7, #36]	; 0x24
 8007e5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e5e:	b2d2      	uxtb	r2, r2
 8007e60:	701a      	strb	r2, [r3, #0]
 8007e62:	6a3b      	ldr	r3, [r7, #32]
 8007e64:	09db      	lsrs	r3, r3, #7
 8007e66:	623b      	str	r3, [r7, #32]
 8007e68:	6a3b      	ldr	r3, [r7, #32]
 8007e6a:	2b7f      	cmp	r3, #127	; 0x7f
 8007e6c:	d8f0      	bhi.n	8007e50 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e70:	1c5a      	adds	r2, r3, #1
 8007e72:	627a      	str	r2, [r7, #36]	; 0x24
 8007e74:	6a3a      	ldr	r2, [r7, #32]
 8007e76:	b2d2      	uxtb	r2, r2
 8007e78:	701a      	strb	r2, [r3, #0]
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	61fb      	str	r3, [r7, #28]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	61bb      	str	r3, [r7, #24]
 8007e86:	e00b      	b.n	8007ea0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	1c59      	adds	r1, r3, #1
 8007e90:	61f9      	str	r1, [r7, #28]
 8007e92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e96:	b2d2      	uxtb	r2, r2
 8007e98:	701a      	strb	r2, [r3, #0]
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	09db      	lsrs	r3, r3, #7
 8007e9e:	61bb      	str	r3, [r7, #24]
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ea4:	d8f0      	bhi.n	8007e88 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	61fa      	str	r2, [r7, #28]
 8007eac:	69ba      	ldr	r2, [r7, #24]
 8007eae:	b2d2      	uxtb	r2, r2
 8007eb0:	701a      	strb	r2, [r3, #0]
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007eb6:	2207      	movs	r2, #7
 8007eb8:	68f9      	ldr	r1, [r7, #12]
 8007eba:	6938      	ldr	r0, [r7, #16]
 8007ebc:	f7ff f896 	bl	8006fec <_SendPacket>
  RECORD_END();
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	f383 8811 	msr	BASEPRI, r3
}
 8007ec6:	bf00      	nop
 8007ec8:	3728      	adds	r7, #40	; 0x28
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20002948 	.word	0x20002948
 8007ed4:	20002918 	.word	0x20002918

08007ed8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007ee0:	4b04      	ldr	r3, [pc, #16]	; (8007ef4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	1ad3      	subs	r3, r2, r3
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bc80      	pop	{r7}
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	20002918 	.word	0x20002918

08007ef8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08c      	sub	sp, #48	; 0x30
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	4603      	mov	r3, r0
 8007f00:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007f02:	4b3b      	ldr	r3, [pc, #236]	; (8007ff0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d06d      	beq.n	8007fe6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007f0a:	4b39      	ldr	r3, [pc, #228]	; (8007ff0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007f10:	2300      	movs	r3, #0
 8007f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f14:	e008      	b.n	8007f28 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d007      	beq.n	8007f32 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f24:	3301      	adds	r3, #1
 8007f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f28:	79fb      	ldrb	r3, [r7, #7]
 8007f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d3f2      	bcc.n	8007f16 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007f30:	e000      	b.n	8007f34 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007f32:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d055      	beq.n	8007fe6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007f3a:	f3ef 8311 	mrs	r3, BASEPRI
 8007f3e:	f04f 0120 	mov.w	r1, #32
 8007f42:	f381 8811 	msr	BASEPRI, r1
 8007f46:	617b      	str	r3, [r7, #20]
 8007f48:	482a      	ldr	r0, [pc, #168]	; (8007ff4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007f4a:	f7fe ff65 	bl	8006e18 <_PreparePacket>
 8007f4e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	627b      	str	r3, [r7, #36]	; 0x24
 8007f58:	79fb      	ldrb	r3, [r7, #7]
 8007f5a:	623b      	str	r3, [r7, #32]
 8007f5c:	e00b      	b.n	8007f76 <SEGGER_SYSVIEW_SendModule+0x7e>
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	b2da      	uxtb	r2, r3
 8007f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f64:	1c59      	adds	r1, r3, #1
 8007f66:	6279      	str	r1, [r7, #36]	; 0x24
 8007f68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f6c:	b2d2      	uxtb	r2, r2
 8007f6e:	701a      	strb	r2, [r3, #0]
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	09db      	lsrs	r3, r3, #7
 8007f74:	623b      	str	r3, [r7, #32]
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	2b7f      	cmp	r3, #127	; 0x7f
 8007f7a:	d8f0      	bhi.n	8007f5e <SEGGER_SYSVIEW_SendModule+0x66>
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	1c5a      	adds	r2, r3, #1
 8007f80:	627a      	str	r2, [r7, #36]	; 0x24
 8007f82:	6a3a      	ldr	r2, [r7, #32]
 8007f84:	b2d2      	uxtb	r2, r2
 8007f86:	701a      	strb	r2, [r3, #0]
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	61fb      	str	r3, [r7, #28]
 8007f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	61bb      	str	r3, [r7, #24]
 8007f96:	e00b      	b.n	8007fb0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	1c59      	adds	r1, r3, #1
 8007fa0:	61f9      	str	r1, [r7, #28]
 8007fa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007fa6:	b2d2      	uxtb	r2, r2
 8007fa8:	701a      	strb	r2, [r3, #0]
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	09db      	lsrs	r3, r3, #7
 8007fae:	61bb      	str	r3, [r7, #24]
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	2b7f      	cmp	r3, #127	; 0x7f
 8007fb4:	d8f0      	bhi.n	8007f98 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	1c5a      	adds	r2, r3, #1
 8007fba:	61fa      	str	r2, [r7, #28]
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	b2d2      	uxtb	r2, r2
 8007fc0:	701a      	strb	r2, [r3, #0]
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2280      	movs	r2, #128	; 0x80
 8007fcc:	4619      	mov	r1, r3
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f7fe fed6 	bl	8006d80 <_EncodeStr>
 8007fd4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007fd6:	2216      	movs	r2, #22
 8007fd8:	68f9      	ldr	r1, [r7, #12]
 8007fda:	6938      	ldr	r0, [r7, #16]
 8007fdc:	f7ff f806 	bl	8006fec <_SendPacket>
      RECORD_END();
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007fe6:	bf00      	nop
 8007fe8:	3730      	adds	r7, #48	; 0x30
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	20002940 	.word	0x20002940
 8007ff4:	20002948 	.word	0x20002948

08007ff8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007ffe:	4b0c      	ldr	r3, [pc, #48]	; (8008030 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00f      	beq.n	8008026 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8008006:	4b0a      	ldr	r3, [pc, #40]	; (8008030 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d002      	beq.n	800801a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1f2      	bne.n	800800c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8008026:	bf00      	nop
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	20002940 	.word	0x20002940

08008034 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800803a:	f3ef 8311 	mrs	r3, BASEPRI
 800803e:	f04f 0120 	mov.w	r1, #32
 8008042:	f381 8811 	msr	BASEPRI, r1
 8008046:	60fb      	str	r3, [r7, #12]
 8008048:	4817      	ldr	r0, [pc, #92]	; (80080a8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800804a:	f7fe fee5 	bl	8006e18 <_PreparePacket>
 800804e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	617b      	str	r3, [r7, #20]
 8008058:	4b14      	ldr	r3, [pc, #80]	; (80080ac <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	613b      	str	r3, [r7, #16]
 800805e:	e00b      	b.n	8008078 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	b2da      	uxtb	r2, r3
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	1c59      	adds	r1, r3, #1
 8008068:	6179      	str	r1, [r7, #20]
 800806a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800806e:	b2d2      	uxtb	r2, r2
 8008070:	701a      	strb	r2, [r3, #0]
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	09db      	lsrs	r3, r3, #7
 8008076:	613b      	str	r3, [r7, #16]
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	2b7f      	cmp	r3, #127	; 0x7f
 800807c:	d8f0      	bhi.n	8008060 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	617a      	str	r2, [r7, #20]
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	b2d2      	uxtb	r2, r2
 8008088:	701a      	strb	r2, [r3, #0]
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800808e:	221b      	movs	r2, #27
 8008090:	6879      	ldr	r1, [r7, #4]
 8008092:	68b8      	ldr	r0, [r7, #8]
 8008094:	f7fe ffaa 	bl	8006fec <_SendPacket>
  RECORD_END();
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f383 8811 	msr	BASEPRI, r3
}
 800809e:	bf00      	nop
 80080a0:	3718      	adds	r7, #24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	20002948 	.word	0x20002948
 80080ac:	20002944 	.word	0x20002944

080080b0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08a      	sub	sp, #40	; 0x28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80080b8:	f3ef 8311 	mrs	r3, BASEPRI
 80080bc:	f04f 0120 	mov.w	r1, #32
 80080c0:	f381 8811 	msr	BASEPRI, r1
 80080c4:	617b      	str	r3, [r7, #20]
 80080c6:	4827      	ldr	r0, [pc, #156]	; (8008164 <SEGGER_SYSVIEW_Warn+0xb4>)
 80080c8:	f7fe fea6 	bl	8006e18 <_PreparePacket>
 80080cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80080ce:	2280      	movs	r2, #128	; 0x80
 80080d0:	6879      	ldr	r1, [r7, #4]
 80080d2:	6938      	ldr	r0, [r7, #16]
 80080d4:	f7fe fe54 	bl	8006d80 <_EncodeStr>
 80080d8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	627b      	str	r3, [r7, #36]	; 0x24
 80080de:	2301      	movs	r3, #1
 80080e0:	623b      	str	r3, [r7, #32]
 80080e2:	e00b      	b.n	80080fc <SEGGER_SYSVIEW_Warn+0x4c>
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ea:	1c59      	adds	r1, r3, #1
 80080ec:	6279      	str	r1, [r7, #36]	; 0x24
 80080ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080f2:	b2d2      	uxtb	r2, r2
 80080f4:	701a      	strb	r2, [r3, #0]
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	09db      	lsrs	r3, r3, #7
 80080fa:	623b      	str	r3, [r7, #32]
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	2b7f      	cmp	r3, #127	; 0x7f
 8008100:	d8f0      	bhi.n	80080e4 <SEGGER_SYSVIEW_Warn+0x34>
 8008102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008104:	1c5a      	adds	r2, r3, #1
 8008106:	627a      	str	r2, [r7, #36]	; 0x24
 8008108:	6a3a      	ldr	r2, [r7, #32]
 800810a:	b2d2      	uxtb	r2, r2
 800810c:	701a      	strb	r2, [r3, #0]
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	61fb      	str	r3, [r7, #28]
 8008116:	2300      	movs	r3, #0
 8008118:	61bb      	str	r3, [r7, #24]
 800811a:	e00b      	b.n	8008134 <SEGGER_SYSVIEW_Warn+0x84>
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	b2da      	uxtb	r2, r3
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	1c59      	adds	r1, r3, #1
 8008124:	61f9      	str	r1, [r7, #28]
 8008126:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800812a:	b2d2      	uxtb	r2, r2
 800812c:	701a      	strb	r2, [r3, #0]
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	09db      	lsrs	r3, r3, #7
 8008132:	61bb      	str	r3, [r7, #24]
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	2b7f      	cmp	r3, #127	; 0x7f
 8008138:	d8f0      	bhi.n	800811c <SEGGER_SYSVIEW_Warn+0x6c>
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	61fa      	str	r2, [r7, #28]
 8008140:	69ba      	ldr	r2, [r7, #24]
 8008142:	b2d2      	uxtb	r2, r2
 8008144:	701a      	strb	r2, [r3, #0]
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800814a:	221a      	movs	r2, #26
 800814c:	68f9      	ldr	r1, [r7, #12]
 800814e:	6938      	ldr	r0, [r7, #16]
 8008150:	f7fe ff4c 	bl	8006fec <_SendPacket>
  RECORD_END();
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	f383 8811 	msr	BASEPRI, r3
}
 800815a:	bf00      	nop
 800815c:	3728      	adds	r7, #40	; 0x28
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20002948 	.word	0x20002948

08008168 <__errno>:
 8008168:	4b01      	ldr	r3, [pc, #4]	; (8008170 <__errno+0x8>)
 800816a:	6818      	ldr	r0, [r3, #0]
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	20000024 	.word	0x20000024

08008174 <__libc_init_array>:
 8008174:	b570      	push	{r4, r5, r6, lr}
 8008176:	2500      	movs	r5, #0
 8008178:	4e0c      	ldr	r6, [pc, #48]	; (80081ac <__libc_init_array+0x38>)
 800817a:	4c0d      	ldr	r4, [pc, #52]	; (80081b0 <__libc_init_array+0x3c>)
 800817c:	1ba4      	subs	r4, r4, r6
 800817e:	10a4      	asrs	r4, r4, #2
 8008180:	42a5      	cmp	r5, r4
 8008182:	d109      	bne.n	8008198 <__libc_init_array+0x24>
 8008184:	f000 fc44 	bl	8008a10 <_init>
 8008188:	2500      	movs	r5, #0
 800818a:	4e0a      	ldr	r6, [pc, #40]	; (80081b4 <__libc_init_array+0x40>)
 800818c:	4c0a      	ldr	r4, [pc, #40]	; (80081b8 <__libc_init_array+0x44>)
 800818e:	1ba4      	subs	r4, r4, r6
 8008190:	10a4      	asrs	r4, r4, #2
 8008192:	42a5      	cmp	r5, r4
 8008194:	d105      	bne.n	80081a2 <__libc_init_array+0x2e>
 8008196:	bd70      	pop	{r4, r5, r6, pc}
 8008198:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800819c:	4798      	blx	r3
 800819e:	3501      	adds	r5, #1
 80081a0:	e7ee      	b.n	8008180 <__libc_init_array+0xc>
 80081a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081a6:	4798      	blx	r3
 80081a8:	3501      	adds	r5, #1
 80081aa:	e7f2      	b.n	8008192 <__libc_init_array+0x1e>
 80081ac:	08008bf4 	.word	0x08008bf4
 80081b0:	08008bf4 	.word	0x08008bf4
 80081b4:	08008bf4 	.word	0x08008bf4
 80081b8:	08008bf8 	.word	0x08008bf8

080081bc <memcmp>:
 80081bc:	b530      	push	{r4, r5, lr}
 80081be:	2400      	movs	r4, #0
 80081c0:	42a2      	cmp	r2, r4
 80081c2:	d101      	bne.n	80081c8 <memcmp+0xc>
 80081c4:	2000      	movs	r0, #0
 80081c6:	e007      	b.n	80081d8 <memcmp+0x1c>
 80081c8:	5d03      	ldrb	r3, [r0, r4]
 80081ca:	3401      	adds	r4, #1
 80081cc:	190d      	adds	r5, r1, r4
 80081ce:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80081d2:	42ab      	cmp	r3, r5
 80081d4:	d0f4      	beq.n	80081c0 <memcmp+0x4>
 80081d6:	1b58      	subs	r0, r3, r5
 80081d8:	bd30      	pop	{r4, r5, pc}

080081da <memcpy>:
 80081da:	b510      	push	{r4, lr}
 80081dc:	1e43      	subs	r3, r0, #1
 80081de:	440a      	add	r2, r1
 80081e0:	4291      	cmp	r1, r2
 80081e2:	d100      	bne.n	80081e6 <memcpy+0xc>
 80081e4:	bd10      	pop	{r4, pc}
 80081e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081ee:	e7f7      	b.n	80081e0 <memcpy+0x6>

080081f0 <memset>:
 80081f0:	4603      	mov	r3, r0
 80081f2:	4402      	add	r2, r0
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d100      	bne.n	80081fa <memset+0xa>
 80081f8:	4770      	bx	lr
 80081fa:	f803 1b01 	strb.w	r1, [r3], #1
 80081fe:	e7f9      	b.n	80081f4 <memset+0x4>

08008200 <siprintf>:
 8008200:	b40e      	push	{r1, r2, r3}
 8008202:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008206:	b500      	push	{lr}
 8008208:	b09c      	sub	sp, #112	; 0x70
 800820a:	ab1d      	add	r3, sp, #116	; 0x74
 800820c:	9002      	str	r0, [sp, #8]
 800820e:	9006      	str	r0, [sp, #24]
 8008210:	9107      	str	r1, [sp, #28]
 8008212:	9104      	str	r1, [sp, #16]
 8008214:	4808      	ldr	r0, [pc, #32]	; (8008238 <siprintf+0x38>)
 8008216:	4909      	ldr	r1, [pc, #36]	; (800823c <siprintf+0x3c>)
 8008218:	f853 2b04 	ldr.w	r2, [r3], #4
 800821c:	9105      	str	r1, [sp, #20]
 800821e:	6800      	ldr	r0, [r0, #0]
 8008220:	a902      	add	r1, sp, #8
 8008222:	9301      	str	r3, [sp, #4]
 8008224:	f000 f866 	bl	80082f4 <_svfiprintf_r>
 8008228:	2200      	movs	r2, #0
 800822a:	9b02      	ldr	r3, [sp, #8]
 800822c:	701a      	strb	r2, [r3, #0]
 800822e:	b01c      	add	sp, #112	; 0x70
 8008230:	f85d eb04 	ldr.w	lr, [sp], #4
 8008234:	b003      	add	sp, #12
 8008236:	4770      	bx	lr
 8008238:	20000024 	.word	0x20000024
 800823c:	ffff0208 	.word	0xffff0208

08008240 <__ssputs_r>:
 8008240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008244:	688e      	ldr	r6, [r1, #8]
 8008246:	4682      	mov	sl, r0
 8008248:	429e      	cmp	r6, r3
 800824a:	460c      	mov	r4, r1
 800824c:	4690      	mov	r8, r2
 800824e:	4699      	mov	r9, r3
 8008250:	d837      	bhi.n	80082c2 <__ssputs_r+0x82>
 8008252:	898a      	ldrh	r2, [r1, #12]
 8008254:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008258:	d031      	beq.n	80082be <__ssputs_r+0x7e>
 800825a:	2302      	movs	r3, #2
 800825c:	6825      	ldr	r5, [r4, #0]
 800825e:	6909      	ldr	r1, [r1, #16]
 8008260:	1a6f      	subs	r7, r5, r1
 8008262:	6965      	ldr	r5, [r4, #20]
 8008264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008268:	fb95 f5f3 	sdiv	r5, r5, r3
 800826c:	f109 0301 	add.w	r3, r9, #1
 8008270:	443b      	add	r3, r7
 8008272:	429d      	cmp	r5, r3
 8008274:	bf38      	it	cc
 8008276:	461d      	movcc	r5, r3
 8008278:	0553      	lsls	r3, r2, #21
 800827a:	d530      	bpl.n	80082de <__ssputs_r+0x9e>
 800827c:	4629      	mov	r1, r5
 800827e:	f000 fb2d 	bl	80088dc <_malloc_r>
 8008282:	4606      	mov	r6, r0
 8008284:	b950      	cbnz	r0, 800829c <__ssputs_r+0x5c>
 8008286:	230c      	movs	r3, #12
 8008288:	f04f 30ff 	mov.w	r0, #4294967295
 800828c:	f8ca 3000 	str.w	r3, [sl]
 8008290:	89a3      	ldrh	r3, [r4, #12]
 8008292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008296:	81a3      	strh	r3, [r4, #12]
 8008298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829c:	463a      	mov	r2, r7
 800829e:	6921      	ldr	r1, [r4, #16]
 80082a0:	f7ff ff9b 	bl	80081da <memcpy>
 80082a4:	89a3      	ldrh	r3, [r4, #12]
 80082a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ae:	81a3      	strh	r3, [r4, #12]
 80082b0:	6126      	str	r6, [r4, #16]
 80082b2:	443e      	add	r6, r7
 80082b4:	6026      	str	r6, [r4, #0]
 80082b6:	464e      	mov	r6, r9
 80082b8:	6165      	str	r5, [r4, #20]
 80082ba:	1bed      	subs	r5, r5, r7
 80082bc:	60a5      	str	r5, [r4, #8]
 80082be:	454e      	cmp	r6, r9
 80082c0:	d900      	bls.n	80082c4 <__ssputs_r+0x84>
 80082c2:	464e      	mov	r6, r9
 80082c4:	4632      	mov	r2, r6
 80082c6:	4641      	mov	r1, r8
 80082c8:	6820      	ldr	r0, [r4, #0]
 80082ca:	f000 faa1 	bl	8008810 <memmove>
 80082ce:	68a3      	ldr	r3, [r4, #8]
 80082d0:	2000      	movs	r0, #0
 80082d2:	1b9b      	subs	r3, r3, r6
 80082d4:	60a3      	str	r3, [r4, #8]
 80082d6:	6823      	ldr	r3, [r4, #0]
 80082d8:	441e      	add	r6, r3
 80082da:	6026      	str	r6, [r4, #0]
 80082dc:	e7dc      	b.n	8008298 <__ssputs_r+0x58>
 80082de:	462a      	mov	r2, r5
 80082e0:	f000 fb56 	bl	8008990 <_realloc_r>
 80082e4:	4606      	mov	r6, r0
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d1e2      	bne.n	80082b0 <__ssputs_r+0x70>
 80082ea:	6921      	ldr	r1, [r4, #16]
 80082ec:	4650      	mov	r0, sl
 80082ee:	f000 faa9 	bl	8008844 <_free_r>
 80082f2:	e7c8      	b.n	8008286 <__ssputs_r+0x46>

080082f4 <_svfiprintf_r>:
 80082f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f8:	461d      	mov	r5, r3
 80082fa:	898b      	ldrh	r3, [r1, #12]
 80082fc:	b09d      	sub	sp, #116	; 0x74
 80082fe:	061f      	lsls	r7, r3, #24
 8008300:	4680      	mov	r8, r0
 8008302:	460c      	mov	r4, r1
 8008304:	4616      	mov	r6, r2
 8008306:	d50f      	bpl.n	8008328 <_svfiprintf_r+0x34>
 8008308:	690b      	ldr	r3, [r1, #16]
 800830a:	b96b      	cbnz	r3, 8008328 <_svfiprintf_r+0x34>
 800830c:	2140      	movs	r1, #64	; 0x40
 800830e:	f000 fae5 	bl	80088dc <_malloc_r>
 8008312:	6020      	str	r0, [r4, #0]
 8008314:	6120      	str	r0, [r4, #16]
 8008316:	b928      	cbnz	r0, 8008324 <_svfiprintf_r+0x30>
 8008318:	230c      	movs	r3, #12
 800831a:	f8c8 3000 	str.w	r3, [r8]
 800831e:	f04f 30ff 	mov.w	r0, #4294967295
 8008322:	e0c8      	b.n	80084b6 <_svfiprintf_r+0x1c2>
 8008324:	2340      	movs	r3, #64	; 0x40
 8008326:	6163      	str	r3, [r4, #20]
 8008328:	2300      	movs	r3, #0
 800832a:	9309      	str	r3, [sp, #36]	; 0x24
 800832c:	2320      	movs	r3, #32
 800832e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008332:	2330      	movs	r3, #48	; 0x30
 8008334:	f04f 0b01 	mov.w	fp, #1
 8008338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800833c:	9503      	str	r5, [sp, #12]
 800833e:	4637      	mov	r7, r6
 8008340:	463d      	mov	r5, r7
 8008342:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008346:	b10b      	cbz	r3, 800834c <_svfiprintf_r+0x58>
 8008348:	2b25      	cmp	r3, #37	; 0x25
 800834a:	d13e      	bne.n	80083ca <_svfiprintf_r+0xd6>
 800834c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008350:	d00b      	beq.n	800836a <_svfiprintf_r+0x76>
 8008352:	4653      	mov	r3, sl
 8008354:	4632      	mov	r2, r6
 8008356:	4621      	mov	r1, r4
 8008358:	4640      	mov	r0, r8
 800835a:	f7ff ff71 	bl	8008240 <__ssputs_r>
 800835e:	3001      	adds	r0, #1
 8008360:	f000 80a4 	beq.w	80084ac <_svfiprintf_r+0x1b8>
 8008364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008366:	4453      	add	r3, sl
 8008368:	9309      	str	r3, [sp, #36]	; 0x24
 800836a:	783b      	ldrb	r3, [r7, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 809d 	beq.w	80084ac <_svfiprintf_r+0x1b8>
 8008372:	2300      	movs	r3, #0
 8008374:	f04f 32ff 	mov.w	r2, #4294967295
 8008378:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800837c:	9304      	str	r3, [sp, #16]
 800837e:	9307      	str	r3, [sp, #28]
 8008380:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008384:	931a      	str	r3, [sp, #104]	; 0x68
 8008386:	462f      	mov	r7, r5
 8008388:	2205      	movs	r2, #5
 800838a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800838e:	4850      	ldr	r0, [pc, #320]	; (80084d0 <_svfiprintf_r+0x1dc>)
 8008390:	f000 fa30 	bl	80087f4 <memchr>
 8008394:	9b04      	ldr	r3, [sp, #16]
 8008396:	b9d0      	cbnz	r0, 80083ce <_svfiprintf_r+0xda>
 8008398:	06d9      	lsls	r1, r3, #27
 800839a:	bf44      	itt	mi
 800839c:	2220      	movmi	r2, #32
 800839e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083a2:	071a      	lsls	r2, r3, #28
 80083a4:	bf44      	itt	mi
 80083a6:	222b      	movmi	r2, #43	; 0x2b
 80083a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083ac:	782a      	ldrb	r2, [r5, #0]
 80083ae:	2a2a      	cmp	r2, #42	; 0x2a
 80083b0:	d015      	beq.n	80083de <_svfiprintf_r+0xea>
 80083b2:	462f      	mov	r7, r5
 80083b4:	2000      	movs	r0, #0
 80083b6:	250a      	movs	r5, #10
 80083b8:	9a07      	ldr	r2, [sp, #28]
 80083ba:	4639      	mov	r1, r7
 80083bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083c0:	3b30      	subs	r3, #48	; 0x30
 80083c2:	2b09      	cmp	r3, #9
 80083c4:	d94d      	bls.n	8008462 <_svfiprintf_r+0x16e>
 80083c6:	b1b8      	cbz	r0, 80083f8 <_svfiprintf_r+0x104>
 80083c8:	e00f      	b.n	80083ea <_svfiprintf_r+0xf6>
 80083ca:	462f      	mov	r7, r5
 80083cc:	e7b8      	b.n	8008340 <_svfiprintf_r+0x4c>
 80083ce:	4a40      	ldr	r2, [pc, #256]	; (80084d0 <_svfiprintf_r+0x1dc>)
 80083d0:	463d      	mov	r5, r7
 80083d2:	1a80      	subs	r0, r0, r2
 80083d4:	fa0b f000 	lsl.w	r0, fp, r0
 80083d8:	4318      	orrs	r0, r3
 80083da:	9004      	str	r0, [sp, #16]
 80083dc:	e7d3      	b.n	8008386 <_svfiprintf_r+0x92>
 80083de:	9a03      	ldr	r2, [sp, #12]
 80083e0:	1d11      	adds	r1, r2, #4
 80083e2:	6812      	ldr	r2, [r2, #0]
 80083e4:	9103      	str	r1, [sp, #12]
 80083e6:	2a00      	cmp	r2, #0
 80083e8:	db01      	blt.n	80083ee <_svfiprintf_r+0xfa>
 80083ea:	9207      	str	r2, [sp, #28]
 80083ec:	e004      	b.n	80083f8 <_svfiprintf_r+0x104>
 80083ee:	4252      	negs	r2, r2
 80083f0:	f043 0302 	orr.w	r3, r3, #2
 80083f4:	9207      	str	r2, [sp, #28]
 80083f6:	9304      	str	r3, [sp, #16]
 80083f8:	783b      	ldrb	r3, [r7, #0]
 80083fa:	2b2e      	cmp	r3, #46	; 0x2e
 80083fc:	d10c      	bne.n	8008418 <_svfiprintf_r+0x124>
 80083fe:	787b      	ldrb	r3, [r7, #1]
 8008400:	2b2a      	cmp	r3, #42	; 0x2a
 8008402:	d133      	bne.n	800846c <_svfiprintf_r+0x178>
 8008404:	9b03      	ldr	r3, [sp, #12]
 8008406:	3702      	adds	r7, #2
 8008408:	1d1a      	adds	r2, r3, #4
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	9203      	str	r2, [sp, #12]
 800840e:	2b00      	cmp	r3, #0
 8008410:	bfb8      	it	lt
 8008412:	f04f 33ff 	movlt.w	r3, #4294967295
 8008416:	9305      	str	r3, [sp, #20]
 8008418:	4d2e      	ldr	r5, [pc, #184]	; (80084d4 <_svfiprintf_r+0x1e0>)
 800841a:	2203      	movs	r2, #3
 800841c:	7839      	ldrb	r1, [r7, #0]
 800841e:	4628      	mov	r0, r5
 8008420:	f000 f9e8 	bl	80087f4 <memchr>
 8008424:	b138      	cbz	r0, 8008436 <_svfiprintf_r+0x142>
 8008426:	2340      	movs	r3, #64	; 0x40
 8008428:	1b40      	subs	r0, r0, r5
 800842a:	fa03 f000 	lsl.w	r0, r3, r0
 800842e:	9b04      	ldr	r3, [sp, #16]
 8008430:	3701      	adds	r7, #1
 8008432:	4303      	orrs	r3, r0
 8008434:	9304      	str	r3, [sp, #16]
 8008436:	7839      	ldrb	r1, [r7, #0]
 8008438:	2206      	movs	r2, #6
 800843a:	4827      	ldr	r0, [pc, #156]	; (80084d8 <_svfiprintf_r+0x1e4>)
 800843c:	1c7e      	adds	r6, r7, #1
 800843e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008442:	f000 f9d7 	bl	80087f4 <memchr>
 8008446:	2800      	cmp	r0, #0
 8008448:	d038      	beq.n	80084bc <_svfiprintf_r+0x1c8>
 800844a:	4b24      	ldr	r3, [pc, #144]	; (80084dc <_svfiprintf_r+0x1e8>)
 800844c:	bb13      	cbnz	r3, 8008494 <_svfiprintf_r+0x1a0>
 800844e:	9b03      	ldr	r3, [sp, #12]
 8008450:	3307      	adds	r3, #7
 8008452:	f023 0307 	bic.w	r3, r3, #7
 8008456:	3308      	adds	r3, #8
 8008458:	9303      	str	r3, [sp, #12]
 800845a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800845c:	444b      	add	r3, r9
 800845e:	9309      	str	r3, [sp, #36]	; 0x24
 8008460:	e76d      	b.n	800833e <_svfiprintf_r+0x4a>
 8008462:	fb05 3202 	mla	r2, r5, r2, r3
 8008466:	2001      	movs	r0, #1
 8008468:	460f      	mov	r7, r1
 800846a:	e7a6      	b.n	80083ba <_svfiprintf_r+0xc6>
 800846c:	2300      	movs	r3, #0
 800846e:	250a      	movs	r5, #10
 8008470:	4619      	mov	r1, r3
 8008472:	3701      	adds	r7, #1
 8008474:	9305      	str	r3, [sp, #20]
 8008476:	4638      	mov	r0, r7
 8008478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800847c:	3a30      	subs	r2, #48	; 0x30
 800847e:	2a09      	cmp	r2, #9
 8008480:	d903      	bls.n	800848a <_svfiprintf_r+0x196>
 8008482:	2b00      	cmp	r3, #0
 8008484:	d0c8      	beq.n	8008418 <_svfiprintf_r+0x124>
 8008486:	9105      	str	r1, [sp, #20]
 8008488:	e7c6      	b.n	8008418 <_svfiprintf_r+0x124>
 800848a:	fb05 2101 	mla	r1, r5, r1, r2
 800848e:	2301      	movs	r3, #1
 8008490:	4607      	mov	r7, r0
 8008492:	e7f0      	b.n	8008476 <_svfiprintf_r+0x182>
 8008494:	ab03      	add	r3, sp, #12
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	4622      	mov	r2, r4
 800849a:	4b11      	ldr	r3, [pc, #68]	; (80084e0 <_svfiprintf_r+0x1ec>)
 800849c:	a904      	add	r1, sp, #16
 800849e:	4640      	mov	r0, r8
 80084a0:	f3af 8000 	nop.w
 80084a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80084a8:	4681      	mov	r9, r0
 80084aa:	d1d6      	bne.n	800845a <_svfiprintf_r+0x166>
 80084ac:	89a3      	ldrh	r3, [r4, #12]
 80084ae:	065b      	lsls	r3, r3, #25
 80084b0:	f53f af35 	bmi.w	800831e <_svfiprintf_r+0x2a>
 80084b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084b6:	b01d      	add	sp, #116	; 0x74
 80084b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084bc:	ab03      	add	r3, sp, #12
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	4622      	mov	r2, r4
 80084c2:	4b07      	ldr	r3, [pc, #28]	; (80084e0 <_svfiprintf_r+0x1ec>)
 80084c4:	a904      	add	r1, sp, #16
 80084c6:	4640      	mov	r0, r8
 80084c8:	f000 f882 	bl	80085d0 <_printf_i>
 80084cc:	e7ea      	b.n	80084a4 <_svfiprintf_r+0x1b0>
 80084ce:	bf00      	nop
 80084d0:	08008bbe 	.word	0x08008bbe
 80084d4:	08008bc4 	.word	0x08008bc4
 80084d8:	08008bc8 	.word	0x08008bc8
 80084dc:	00000000 	.word	0x00000000
 80084e0:	08008241 	.word	0x08008241

080084e4 <_printf_common>:
 80084e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e8:	4691      	mov	r9, r2
 80084ea:	461f      	mov	r7, r3
 80084ec:	688a      	ldr	r2, [r1, #8]
 80084ee:	690b      	ldr	r3, [r1, #16]
 80084f0:	4606      	mov	r6, r0
 80084f2:	4293      	cmp	r3, r2
 80084f4:	bfb8      	it	lt
 80084f6:	4613      	movlt	r3, r2
 80084f8:	f8c9 3000 	str.w	r3, [r9]
 80084fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008500:	460c      	mov	r4, r1
 8008502:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008506:	b112      	cbz	r2, 800850e <_printf_common+0x2a>
 8008508:	3301      	adds	r3, #1
 800850a:	f8c9 3000 	str.w	r3, [r9]
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	0699      	lsls	r1, r3, #26
 8008512:	bf42      	ittt	mi
 8008514:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008518:	3302      	addmi	r3, #2
 800851a:	f8c9 3000 	strmi.w	r3, [r9]
 800851e:	6825      	ldr	r5, [r4, #0]
 8008520:	f015 0506 	ands.w	r5, r5, #6
 8008524:	d107      	bne.n	8008536 <_printf_common+0x52>
 8008526:	f104 0a19 	add.w	sl, r4, #25
 800852a:	68e3      	ldr	r3, [r4, #12]
 800852c:	f8d9 2000 	ldr.w	r2, [r9]
 8008530:	1a9b      	subs	r3, r3, r2
 8008532:	42ab      	cmp	r3, r5
 8008534:	dc29      	bgt.n	800858a <_printf_common+0xa6>
 8008536:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800853a:	6822      	ldr	r2, [r4, #0]
 800853c:	3300      	adds	r3, #0
 800853e:	bf18      	it	ne
 8008540:	2301      	movne	r3, #1
 8008542:	0692      	lsls	r2, r2, #26
 8008544:	d42e      	bmi.n	80085a4 <_printf_common+0xc0>
 8008546:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800854a:	4639      	mov	r1, r7
 800854c:	4630      	mov	r0, r6
 800854e:	47c0      	blx	r8
 8008550:	3001      	adds	r0, #1
 8008552:	d021      	beq.n	8008598 <_printf_common+0xb4>
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	68e5      	ldr	r5, [r4, #12]
 8008558:	f003 0306 	and.w	r3, r3, #6
 800855c:	2b04      	cmp	r3, #4
 800855e:	bf18      	it	ne
 8008560:	2500      	movne	r5, #0
 8008562:	f8d9 2000 	ldr.w	r2, [r9]
 8008566:	f04f 0900 	mov.w	r9, #0
 800856a:	bf08      	it	eq
 800856c:	1aad      	subeq	r5, r5, r2
 800856e:	68a3      	ldr	r3, [r4, #8]
 8008570:	6922      	ldr	r2, [r4, #16]
 8008572:	bf08      	it	eq
 8008574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008578:	4293      	cmp	r3, r2
 800857a:	bfc4      	itt	gt
 800857c:	1a9b      	subgt	r3, r3, r2
 800857e:	18ed      	addgt	r5, r5, r3
 8008580:	341a      	adds	r4, #26
 8008582:	454d      	cmp	r5, r9
 8008584:	d11a      	bne.n	80085bc <_printf_common+0xd8>
 8008586:	2000      	movs	r0, #0
 8008588:	e008      	b.n	800859c <_printf_common+0xb8>
 800858a:	2301      	movs	r3, #1
 800858c:	4652      	mov	r2, sl
 800858e:	4639      	mov	r1, r7
 8008590:	4630      	mov	r0, r6
 8008592:	47c0      	blx	r8
 8008594:	3001      	adds	r0, #1
 8008596:	d103      	bne.n	80085a0 <_printf_common+0xbc>
 8008598:	f04f 30ff 	mov.w	r0, #4294967295
 800859c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085a0:	3501      	adds	r5, #1
 80085a2:	e7c2      	b.n	800852a <_printf_common+0x46>
 80085a4:	2030      	movs	r0, #48	; 0x30
 80085a6:	18e1      	adds	r1, r4, r3
 80085a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085ac:	1c5a      	adds	r2, r3, #1
 80085ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085b2:	4422      	add	r2, r4
 80085b4:	3302      	adds	r3, #2
 80085b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085ba:	e7c4      	b.n	8008546 <_printf_common+0x62>
 80085bc:	2301      	movs	r3, #1
 80085be:	4622      	mov	r2, r4
 80085c0:	4639      	mov	r1, r7
 80085c2:	4630      	mov	r0, r6
 80085c4:	47c0      	blx	r8
 80085c6:	3001      	adds	r0, #1
 80085c8:	d0e6      	beq.n	8008598 <_printf_common+0xb4>
 80085ca:	f109 0901 	add.w	r9, r9, #1
 80085ce:	e7d8      	b.n	8008582 <_printf_common+0x9e>

080085d0 <_printf_i>:
 80085d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80085d8:	460c      	mov	r4, r1
 80085da:	7e09      	ldrb	r1, [r1, #24]
 80085dc:	b085      	sub	sp, #20
 80085de:	296e      	cmp	r1, #110	; 0x6e
 80085e0:	4617      	mov	r7, r2
 80085e2:	4606      	mov	r6, r0
 80085e4:	4698      	mov	r8, r3
 80085e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085e8:	f000 80b3 	beq.w	8008752 <_printf_i+0x182>
 80085ec:	d822      	bhi.n	8008634 <_printf_i+0x64>
 80085ee:	2963      	cmp	r1, #99	; 0x63
 80085f0:	d036      	beq.n	8008660 <_printf_i+0x90>
 80085f2:	d80a      	bhi.n	800860a <_printf_i+0x3a>
 80085f4:	2900      	cmp	r1, #0
 80085f6:	f000 80b9 	beq.w	800876c <_printf_i+0x19c>
 80085fa:	2958      	cmp	r1, #88	; 0x58
 80085fc:	f000 8083 	beq.w	8008706 <_printf_i+0x136>
 8008600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008604:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008608:	e032      	b.n	8008670 <_printf_i+0xa0>
 800860a:	2964      	cmp	r1, #100	; 0x64
 800860c:	d001      	beq.n	8008612 <_printf_i+0x42>
 800860e:	2969      	cmp	r1, #105	; 0x69
 8008610:	d1f6      	bne.n	8008600 <_printf_i+0x30>
 8008612:	6820      	ldr	r0, [r4, #0]
 8008614:	6813      	ldr	r3, [r2, #0]
 8008616:	0605      	lsls	r5, r0, #24
 8008618:	f103 0104 	add.w	r1, r3, #4
 800861c:	d52a      	bpl.n	8008674 <_printf_i+0xa4>
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6011      	str	r1, [r2, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	da03      	bge.n	800862e <_printf_i+0x5e>
 8008626:	222d      	movs	r2, #45	; 0x2d
 8008628:	425b      	negs	r3, r3
 800862a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800862e:	486f      	ldr	r0, [pc, #444]	; (80087ec <_printf_i+0x21c>)
 8008630:	220a      	movs	r2, #10
 8008632:	e039      	b.n	80086a8 <_printf_i+0xd8>
 8008634:	2973      	cmp	r1, #115	; 0x73
 8008636:	f000 809d 	beq.w	8008774 <_printf_i+0x1a4>
 800863a:	d808      	bhi.n	800864e <_printf_i+0x7e>
 800863c:	296f      	cmp	r1, #111	; 0x6f
 800863e:	d020      	beq.n	8008682 <_printf_i+0xb2>
 8008640:	2970      	cmp	r1, #112	; 0x70
 8008642:	d1dd      	bne.n	8008600 <_printf_i+0x30>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	f043 0320 	orr.w	r3, r3, #32
 800864a:	6023      	str	r3, [r4, #0]
 800864c:	e003      	b.n	8008656 <_printf_i+0x86>
 800864e:	2975      	cmp	r1, #117	; 0x75
 8008650:	d017      	beq.n	8008682 <_printf_i+0xb2>
 8008652:	2978      	cmp	r1, #120	; 0x78
 8008654:	d1d4      	bne.n	8008600 <_printf_i+0x30>
 8008656:	2378      	movs	r3, #120	; 0x78
 8008658:	4865      	ldr	r0, [pc, #404]	; (80087f0 <_printf_i+0x220>)
 800865a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800865e:	e055      	b.n	800870c <_printf_i+0x13c>
 8008660:	6813      	ldr	r3, [r2, #0]
 8008662:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008666:	1d19      	adds	r1, r3, #4
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	6011      	str	r1, [r2, #0]
 800866c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008670:	2301      	movs	r3, #1
 8008672:	e08c      	b.n	800878e <_printf_i+0x1be>
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f010 0f40 	tst.w	r0, #64	; 0x40
 800867a:	6011      	str	r1, [r2, #0]
 800867c:	bf18      	it	ne
 800867e:	b21b      	sxthne	r3, r3
 8008680:	e7cf      	b.n	8008622 <_printf_i+0x52>
 8008682:	6813      	ldr	r3, [r2, #0]
 8008684:	6825      	ldr	r5, [r4, #0]
 8008686:	1d18      	adds	r0, r3, #4
 8008688:	6010      	str	r0, [r2, #0]
 800868a:	0628      	lsls	r0, r5, #24
 800868c:	d501      	bpl.n	8008692 <_printf_i+0xc2>
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	e002      	b.n	8008698 <_printf_i+0xc8>
 8008692:	0668      	lsls	r0, r5, #25
 8008694:	d5fb      	bpl.n	800868e <_printf_i+0xbe>
 8008696:	881b      	ldrh	r3, [r3, #0]
 8008698:	296f      	cmp	r1, #111	; 0x6f
 800869a:	bf14      	ite	ne
 800869c:	220a      	movne	r2, #10
 800869e:	2208      	moveq	r2, #8
 80086a0:	4852      	ldr	r0, [pc, #328]	; (80087ec <_printf_i+0x21c>)
 80086a2:	2100      	movs	r1, #0
 80086a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086a8:	6865      	ldr	r5, [r4, #4]
 80086aa:	2d00      	cmp	r5, #0
 80086ac:	60a5      	str	r5, [r4, #8]
 80086ae:	f2c0 8095 	blt.w	80087dc <_printf_i+0x20c>
 80086b2:	6821      	ldr	r1, [r4, #0]
 80086b4:	f021 0104 	bic.w	r1, r1, #4
 80086b8:	6021      	str	r1, [r4, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d13d      	bne.n	800873a <_printf_i+0x16a>
 80086be:	2d00      	cmp	r5, #0
 80086c0:	f040 808e 	bne.w	80087e0 <_printf_i+0x210>
 80086c4:	4665      	mov	r5, ip
 80086c6:	2a08      	cmp	r2, #8
 80086c8:	d10b      	bne.n	80086e2 <_printf_i+0x112>
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	07db      	lsls	r3, r3, #31
 80086ce:	d508      	bpl.n	80086e2 <_printf_i+0x112>
 80086d0:	6923      	ldr	r3, [r4, #16]
 80086d2:	6862      	ldr	r2, [r4, #4]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	bfde      	ittt	le
 80086d8:	2330      	movle	r3, #48	; 0x30
 80086da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80086e2:	ebac 0305 	sub.w	r3, ip, r5
 80086e6:	6123      	str	r3, [r4, #16]
 80086e8:	f8cd 8000 	str.w	r8, [sp]
 80086ec:	463b      	mov	r3, r7
 80086ee:	aa03      	add	r2, sp, #12
 80086f0:	4621      	mov	r1, r4
 80086f2:	4630      	mov	r0, r6
 80086f4:	f7ff fef6 	bl	80084e4 <_printf_common>
 80086f8:	3001      	adds	r0, #1
 80086fa:	d14d      	bne.n	8008798 <_printf_i+0x1c8>
 80086fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008700:	b005      	add	sp, #20
 8008702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008706:	4839      	ldr	r0, [pc, #228]	; (80087ec <_printf_i+0x21c>)
 8008708:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800870c:	6813      	ldr	r3, [r2, #0]
 800870e:	6821      	ldr	r1, [r4, #0]
 8008710:	1d1d      	adds	r5, r3, #4
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6015      	str	r5, [r2, #0]
 8008716:	060a      	lsls	r2, r1, #24
 8008718:	d50b      	bpl.n	8008732 <_printf_i+0x162>
 800871a:	07ca      	lsls	r2, r1, #31
 800871c:	bf44      	itt	mi
 800871e:	f041 0120 	orrmi.w	r1, r1, #32
 8008722:	6021      	strmi	r1, [r4, #0]
 8008724:	b91b      	cbnz	r3, 800872e <_printf_i+0x15e>
 8008726:	6822      	ldr	r2, [r4, #0]
 8008728:	f022 0220 	bic.w	r2, r2, #32
 800872c:	6022      	str	r2, [r4, #0]
 800872e:	2210      	movs	r2, #16
 8008730:	e7b7      	b.n	80086a2 <_printf_i+0xd2>
 8008732:	064d      	lsls	r5, r1, #25
 8008734:	bf48      	it	mi
 8008736:	b29b      	uxthmi	r3, r3
 8008738:	e7ef      	b.n	800871a <_printf_i+0x14a>
 800873a:	4665      	mov	r5, ip
 800873c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008740:	fb02 3311 	mls	r3, r2, r1, r3
 8008744:	5cc3      	ldrb	r3, [r0, r3]
 8008746:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800874a:	460b      	mov	r3, r1
 800874c:	2900      	cmp	r1, #0
 800874e:	d1f5      	bne.n	800873c <_printf_i+0x16c>
 8008750:	e7b9      	b.n	80086c6 <_printf_i+0xf6>
 8008752:	6813      	ldr	r3, [r2, #0]
 8008754:	6825      	ldr	r5, [r4, #0]
 8008756:	1d18      	adds	r0, r3, #4
 8008758:	6961      	ldr	r1, [r4, #20]
 800875a:	6010      	str	r0, [r2, #0]
 800875c:	0628      	lsls	r0, r5, #24
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	d501      	bpl.n	8008766 <_printf_i+0x196>
 8008762:	6019      	str	r1, [r3, #0]
 8008764:	e002      	b.n	800876c <_printf_i+0x19c>
 8008766:	066a      	lsls	r2, r5, #25
 8008768:	d5fb      	bpl.n	8008762 <_printf_i+0x192>
 800876a:	8019      	strh	r1, [r3, #0]
 800876c:	2300      	movs	r3, #0
 800876e:	4665      	mov	r5, ip
 8008770:	6123      	str	r3, [r4, #16]
 8008772:	e7b9      	b.n	80086e8 <_printf_i+0x118>
 8008774:	6813      	ldr	r3, [r2, #0]
 8008776:	1d19      	adds	r1, r3, #4
 8008778:	6011      	str	r1, [r2, #0]
 800877a:	681d      	ldr	r5, [r3, #0]
 800877c:	6862      	ldr	r2, [r4, #4]
 800877e:	2100      	movs	r1, #0
 8008780:	4628      	mov	r0, r5
 8008782:	f000 f837 	bl	80087f4 <memchr>
 8008786:	b108      	cbz	r0, 800878c <_printf_i+0x1bc>
 8008788:	1b40      	subs	r0, r0, r5
 800878a:	6060      	str	r0, [r4, #4]
 800878c:	6863      	ldr	r3, [r4, #4]
 800878e:	6123      	str	r3, [r4, #16]
 8008790:	2300      	movs	r3, #0
 8008792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008796:	e7a7      	b.n	80086e8 <_printf_i+0x118>
 8008798:	6923      	ldr	r3, [r4, #16]
 800879a:	462a      	mov	r2, r5
 800879c:	4639      	mov	r1, r7
 800879e:	4630      	mov	r0, r6
 80087a0:	47c0      	blx	r8
 80087a2:	3001      	adds	r0, #1
 80087a4:	d0aa      	beq.n	80086fc <_printf_i+0x12c>
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	079b      	lsls	r3, r3, #30
 80087aa:	d413      	bmi.n	80087d4 <_printf_i+0x204>
 80087ac:	68e0      	ldr	r0, [r4, #12]
 80087ae:	9b03      	ldr	r3, [sp, #12]
 80087b0:	4298      	cmp	r0, r3
 80087b2:	bfb8      	it	lt
 80087b4:	4618      	movlt	r0, r3
 80087b6:	e7a3      	b.n	8008700 <_printf_i+0x130>
 80087b8:	2301      	movs	r3, #1
 80087ba:	464a      	mov	r2, r9
 80087bc:	4639      	mov	r1, r7
 80087be:	4630      	mov	r0, r6
 80087c0:	47c0      	blx	r8
 80087c2:	3001      	adds	r0, #1
 80087c4:	d09a      	beq.n	80086fc <_printf_i+0x12c>
 80087c6:	3501      	adds	r5, #1
 80087c8:	68e3      	ldr	r3, [r4, #12]
 80087ca:	9a03      	ldr	r2, [sp, #12]
 80087cc:	1a9b      	subs	r3, r3, r2
 80087ce:	42ab      	cmp	r3, r5
 80087d0:	dcf2      	bgt.n	80087b8 <_printf_i+0x1e8>
 80087d2:	e7eb      	b.n	80087ac <_printf_i+0x1dc>
 80087d4:	2500      	movs	r5, #0
 80087d6:	f104 0919 	add.w	r9, r4, #25
 80087da:	e7f5      	b.n	80087c8 <_printf_i+0x1f8>
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1ac      	bne.n	800873a <_printf_i+0x16a>
 80087e0:	7803      	ldrb	r3, [r0, #0]
 80087e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087ea:	e76c      	b.n	80086c6 <_printf_i+0xf6>
 80087ec:	08008bcf 	.word	0x08008bcf
 80087f0:	08008be0 	.word	0x08008be0

080087f4 <memchr>:
 80087f4:	b510      	push	{r4, lr}
 80087f6:	b2c9      	uxtb	r1, r1
 80087f8:	4402      	add	r2, r0
 80087fa:	4290      	cmp	r0, r2
 80087fc:	4603      	mov	r3, r0
 80087fe:	d101      	bne.n	8008804 <memchr+0x10>
 8008800:	2300      	movs	r3, #0
 8008802:	e003      	b.n	800880c <memchr+0x18>
 8008804:	781c      	ldrb	r4, [r3, #0]
 8008806:	3001      	adds	r0, #1
 8008808:	428c      	cmp	r4, r1
 800880a:	d1f6      	bne.n	80087fa <memchr+0x6>
 800880c:	4618      	mov	r0, r3
 800880e:	bd10      	pop	{r4, pc}

08008810 <memmove>:
 8008810:	4288      	cmp	r0, r1
 8008812:	b510      	push	{r4, lr}
 8008814:	eb01 0302 	add.w	r3, r1, r2
 8008818:	d807      	bhi.n	800882a <memmove+0x1a>
 800881a:	1e42      	subs	r2, r0, #1
 800881c:	4299      	cmp	r1, r3
 800881e:	d00a      	beq.n	8008836 <memmove+0x26>
 8008820:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008824:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008828:	e7f8      	b.n	800881c <memmove+0xc>
 800882a:	4283      	cmp	r3, r0
 800882c:	d9f5      	bls.n	800881a <memmove+0xa>
 800882e:	1881      	adds	r1, r0, r2
 8008830:	1ad2      	subs	r2, r2, r3
 8008832:	42d3      	cmn	r3, r2
 8008834:	d100      	bne.n	8008838 <memmove+0x28>
 8008836:	bd10      	pop	{r4, pc}
 8008838:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800883c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008840:	e7f7      	b.n	8008832 <memmove+0x22>
	...

08008844 <_free_r>:
 8008844:	b538      	push	{r3, r4, r5, lr}
 8008846:	4605      	mov	r5, r0
 8008848:	2900      	cmp	r1, #0
 800884a:	d043      	beq.n	80088d4 <_free_r+0x90>
 800884c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008850:	1f0c      	subs	r4, r1, #4
 8008852:	2b00      	cmp	r3, #0
 8008854:	bfb8      	it	lt
 8008856:	18e4      	addlt	r4, r4, r3
 8008858:	f000 f8d0 	bl	80089fc <__malloc_lock>
 800885c:	4a1e      	ldr	r2, [pc, #120]	; (80088d8 <_free_r+0x94>)
 800885e:	6813      	ldr	r3, [r2, #0]
 8008860:	4610      	mov	r0, r2
 8008862:	b933      	cbnz	r3, 8008872 <_free_r+0x2e>
 8008864:	6063      	str	r3, [r4, #4]
 8008866:	6014      	str	r4, [r2, #0]
 8008868:	4628      	mov	r0, r5
 800886a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800886e:	f000 b8c6 	b.w	80089fe <__malloc_unlock>
 8008872:	42a3      	cmp	r3, r4
 8008874:	d90b      	bls.n	800888e <_free_r+0x4a>
 8008876:	6821      	ldr	r1, [r4, #0]
 8008878:	1862      	adds	r2, r4, r1
 800887a:	4293      	cmp	r3, r2
 800887c:	bf01      	itttt	eq
 800887e:	681a      	ldreq	r2, [r3, #0]
 8008880:	685b      	ldreq	r3, [r3, #4]
 8008882:	1852      	addeq	r2, r2, r1
 8008884:	6022      	streq	r2, [r4, #0]
 8008886:	6063      	str	r3, [r4, #4]
 8008888:	6004      	str	r4, [r0, #0]
 800888a:	e7ed      	b.n	8008868 <_free_r+0x24>
 800888c:	4613      	mov	r3, r2
 800888e:	685a      	ldr	r2, [r3, #4]
 8008890:	b10a      	cbz	r2, 8008896 <_free_r+0x52>
 8008892:	42a2      	cmp	r2, r4
 8008894:	d9fa      	bls.n	800888c <_free_r+0x48>
 8008896:	6819      	ldr	r1, [r3, #0]
 8008898:	1858      	adds	r0, r3, r1
 800889a:	42a0      	cmp	r0, r4
 800889c:	d10b      	bne.n	80088b6 <_free_r+0x72>
 800889e:	6820      	ldr	r0, [r4, #0]
 80088a0:	4401      	add	r1, r0
 80088a2:	1858      	adds	r0, r3, r1
 80088a4:	4282      	cmp	r2, r0
 80088a6:	6019      	str	r1, [r3, #0]
 80088a8:	d1de      	bne.n	8008868 <_free_r+0x24>
 80088aa:	6810      	ldr	r0, [r2, #0]
 80088ac:	6852      	ldr	r2, [r2, #4]
 80088ae:	4401      	add	r1, r0
 80088b0:	6019      	str	r1, [r3, #0]
 80088b2:	605a      	str	r2, [r3, #4]
 80088b4:	e7d8      	b.n	8008868 <_free_r+0x24>
 80088b6:	d902      	bls.n	80088be <_free_r+0x7a>
 80088b8:	230c      	movs	r3, #12
 80088ba:	602b      	str	r3, [r5, #0]
 80088bc:	e7d4      	b.n	8008868 <_free_r+0x24>
 80088be:	6820      	ldr	r0, [r4, #0]
 80088c0:	1821      	adds	r1, r4, r0
 80088c2:	428a      	cmp	r2, r1
 80088c4:	bf01      	itttt	eq
 80088c6:	6811      	ldreq	r1, [r2, #0]
 80088c8:	6852      	ldreq	r2, [r2, #4]
 80088ca:	1809      	addeq	r1, r1, r0
 80088cc:	6021      	streq	r1, [r4, #0]
 80088ce:	6062      	str	r2, [r4, #4]
 80088d0:	605c      	str	r4, [r3, #4]
 80088d2:	e7c9      	b.n	8008868 <_free_r+0x24>
 80088d4:	bd38      	pop	{r3, r4, r5, pc}
 80088d6:	bf00      	nop
 80088d8:	20002a2c 	.word	0x20002a2c

080088dc <_malloc_r>:
 80088dc:	b570      	push	{r4, r5, r6, lr}
 80088de:	1ccd      	adds	r5, r1, #3
 80088e0:	f025 0503 	bic.w	r5, r5, #3
 80088e4:	3508      	adds	r5, #8
 80088e6:	2d0c      	cmp	r5, #12
 80088e8:	bf38      	it	cc
 80088ea:	250c      	movcc	r5, #12
 80088ec:	2d00      	cmp	r5, #0
 80088ee:	4606      	mov	r6, r0
 80088f0:	db01      	blt.n	80088f6 <_malloc_r+0x1a>
 80088f2:	42a9      	cmp	r1, r5
 80088f4:	d903      	bls.n	80088fe <_malloc_r+0x22>
 80088f6:	230c      	movs	r3, #12
 80088f8:	6033      	str	r3, [r6, #0]
 80088fa:	2000      	movs	r0, #0
 80088fc:	bd70      	pop	{r4, r5, r6, pc}
 80088fe:	f000 f87d 	bl	80089fc <__malloc_lock>
 8008902:	4a21      	ldr	r2, [pc, #132]	; (8008988 <_malloc_r+0xac>)
 8008904:	6814      	ldr	r4, [r2, #0]
 8008906:	4621      	mov	r1, r4
 8008908:	b991      	cbnz	r1, 8008930 <_malloc_r+0x54>
 800890a:	4c20      	ldr	r4, [pc, #128]	; (800898c <_malloc_r+0xb0>)
 800890c:	6823      	ldr	r3, [r4, #0]
 800890e:	b91b      	cbnz	r3, 8008918 <_malloc_r+0x3c>
 8008910:	4630      	mov	r0, r6
 8008912:	f000 f863 	bl	80089dc <_sbrk_r>
 8008916:	6020      	str	r0, [r4, #0]
 8008918:	4629      	mov	r1, r5
 800891a:	4630      	mov	r0, r6
 800891c:	f000 f85e 	bl	80089dc <_sbrk_r>
 8008920:	1c43      	adds	r3, r0, #1
 8008922:	d124      	bne.n	800896e <_malloc_r+0x92>
 8008924:	230c      	movs	r3, #12
 8008926:	4630      	mov	r0, r6
 8008928:	6033      	str	r3, [r6, #0]
 800892a:	f000 f868 	bl	80089fe <__malloc_unlock>
 800892e:	e7e4      	b.n	80088fa <_malloc_r+0x1e>
 8008930:	680b      	ldr	r3, [r1, #0]
 8008932:	1b5b      	subs	r3, r3, r5
 8008934:	d418      	bmi.n	8008968 <_malloc_r+0x8c>
 8008936:	2b0b      	cmp	r3, #11
 8008938:	d90f      	bls.n	800895a <_malloc_r+0x7e>
 800893a:	600b      	str	r3, [r1, #0]
 800893c:	18cc      	adds	r4, r1, r3
 800893e:	50cd      	str	r5, [r1, r3]
 8008940:	4630      	mov	r0, r6
 8008942:	f000 f85c 	bl	80089fe <__malloc_unlock>
 8008946:	f104 000b 	add.w	r0, r4, #11
 800894a:	1d23      	adds	r3, r4, #4
 800894c:	f020 0007 	bic.w	r0, r0, #7
 8008950:	1ac3      	subs	r3, r0, r3
 8008952:	d0d3      	beq.n	80088fc <_malloc_r+0x20>
 8008954:	425a      	negs	r2, r3
 8008956:	50e2      	str	r2, [r4, r3]
 8008958:	e7d0      	b.n	80088fc <_malloc_r+0x20>
 800895a:	684b      	ldr	r3, [r1, #4]
 800895c:	428c      	cmp	r4, r1
 800895e:	bf16      	itet	ne
 8008960:	6063      	strne	r3, [r4, #4]
 8008962:	6013      	streq	r3, [r2, #0]
 8008964:	460c      	movne	r4, r1
 8008966:	e7eb      	b.n	8008940 <_malloc_r+0x64>
 8008968:	460c      	mov	r4, r1
 800896a:	6849      	ldr	r1, [r1, #4]
 800896c:	e7cc      	b.n	8008908 <_malloc_r+0x2c>
 800896e:	1cc4      	adds	r4, r0, #3
 8008970:	f024 0403 	bic.w	r4, r4, #3
 8008974:	42a0      	cmp	r0, r4
 8008976:	d005      	beq.n	8008984 <_malloc_r+0xa8>
 8008978:	1a21      	subs	r1, r4, r0
 800897a:	4630      	mov	r0, r6
 800897c:	f000 f82e 	bl	80089dc <_sbrk_r>
 8008980:	3001      	adds	r0, #1
 8008982:	d0cf      	beq.n	8008924 <_malloc_r+0x48>
 8008984:	6025      	str	r5, [r4, #0]
 8008986:	e7db      	b.n	8008940 <_malloc_r+0x64>
 8008988:	20002a2c 	.word	0x20002a2c
 800898c:	20002a30 	.word	0x20002a30

08008990 <_realloc_r>:
 8008990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008992:	4607      	mov	r7, r0
 8008994:	4614      	mov	r4, r2
 8008996:	460e      	mov	r6, r1
 8008998:	b921      	cbnz	r1, 80089a4 <_realloc_r+0x14>
 800899a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800899e:	4611      	mov	r1, r2
 80089a0:	f7ff bf9c 	b.w	80088dc <_malloc_r>
 80089a4:	b922      	cbnz	r2, 80089b0 <_realloc_r+0x20>
 80089a6:	f7ff ff4d 	bl	8008844 <_free_r>
 80089aa:	4625      	mov	r5, r4
 80089ac:	4628      	mov	r0, r5
 80089ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089b0:	f000 f826 	bl	8008a00 <_malloc_usable_size_r>
 80089b4:	42a0      	cmp	r0, r4
 80089b6:	d20f      	bcs.n	80089d8 <_realloc_r+0x48>
 80089b8:	4621      	mov	r1, r4
 80089ba:	4638      	mov	r0, r7
 80089bc:	f7ff ff8e 	bl	80088dc <_malloc_r>
 80089c0:	4605      	mov	r5, r0
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d0f2      	beq.n	80089ac <_realloc_r+0x1c>
 80089c6:	4631      	mov	r1, r6
 80089c8:	4622      	mov	r2, r4
 80089ca:	f7ff fc06 	bl	80081da <memcpy>
 80089ce:	4631      	mov	r1, r6
 80089d0:	4638      	mov	r0, r7
 80089d2:	f7ff ff37 	bl	8008844 <_free_r>
 80089d6:	e7e9      	b.n	80089ac <_realloc_r+0x1c>
 80089d8:	4635      	mov	r5, r6
 80089da:	e7e7      	b.n	80089ac <_realloc_r+0x1c>

080089dc <_sbrk_r>:
 80089dc:	b538      	push	{r3, r4, r5, lr}
 80089de:	2300      	movs	r3, #0
 80089e0:	4c05      	ldr	r4, [pc, #20]	; (80089f8 <_sbrk_r+0x1c>)
 80089e2:	4605      	mov	r5, r0
 80089e4:	4608      	mov	r0, r1
 80089e6:	6023      	str	r3, [r4, #0]
 80089e8:	f7f9 f9e4 	bl	8001db4 <_sbrk>
 80089ec:	1c43      	adds	r3, r0, #1
 80089ee:	d102      	bne.n	80089f6 <_sbrk_r+0x1a>
 80089f0:	6823      	ldr	r3, [r4, #0]
 80089f2:	b103      	cbz	r3, 80089f6 <_sbrk_r+0x1a>
 80089f4:	602b      	str	r3, [r5, #0]
 80089f6:	bd38      	pop	{r3, r4, r5, pc}
 80089f8:	20002c18 	.word	0x20002c18

080089fc <__malloc_lock>:
 80089fc:	4770      	bx	lr

080089fe <__malloc_unlock>:
 80089fe:	4770      	bx	lr

08008a00 <_malloc_usable_size_r>:
 8008a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a04:	1f18      	subs	r0, r3, #4
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	bfbc      	itt	lt
 8008a0a:	580b      	ldrlt	r3, [r1, r0]
 8008a0c:	18c0      	addlt	r0, r0, r3
 8008a0e:	4770      	bx	lr

08008a10 <_init>:
 8008a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a12:	bf00      	nop
 8008a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a16:	bc08      	pop	{r3}
 8008a18:	469e      	mov	lr, r3
 8008a1a:	4770      	bx	lr

08008a1c <_fini>:
 8008a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1e:	bf00      	nop
 8008a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a22:	bc08      	pop	{r3}
 8008a24:	469e      	mov	lr, r3
 8008a26:	4770      	bx	lr
