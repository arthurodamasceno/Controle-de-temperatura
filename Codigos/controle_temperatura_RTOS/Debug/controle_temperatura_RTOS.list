
controle_temperatura_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bc8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08006cd8  08006cd8  00016cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e08  08006e08  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08006e08  08006e08  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e08  08006e08  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e08  08006e08  00016e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e0c  08006e0c  00016e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f18  20000088  08006e98  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002fa0  08006e98  00022fa0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e88  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c37  00000000  00000000  00032f39  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e0  00000000  00000000  00035b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa8  00000000  00000000  00036c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019ce0  00000000  00000000  00037bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e708  00000000  00000000  000518d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096973  00000000  00000000  0005ffe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f6953  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b08  00000000  00000000  000f69d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08006cc0 	.word	0x08006cc0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08006cc0 	.word	0x08006cc0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	; 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a58:	f1a2 0201 	sub.w	r2, r2, #1
 8000a5c:	d1ed      	bne.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c0a:	2afd      	cmp	r2, #253	; 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	; 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	; 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	; 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__gesf2>:
 8000e58:	f04f 3cff 	mov.w	ip, #4294967295
 8000e5c:	e006      	b.n	8000e6c <__cmpsf2+0x4>
 8000e5e:	bf00      	nop

08000e60 <__lesf2>:
 8000e60:	f04f 0c01 	mov.w	ip, #1
 8000e64:	e002      	b.n	8000e6c <__cmpsf2+0x4>
 8000e66:	bf00      	nop

08000e68 <__cmpsf2>:
 8000e68:	f04f 0c01 	mov.w	ip, #1
 8000e6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e7c:	bf18      	it	ne
 8000e7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e82:	d011      	beq.n	8000ea8 <__cmpsf2+0x40>
 8000e84:	b001      	add	sp, #4
 8000e86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e8a:	bf18      	it	ne
 8000e8c:	ea90 0f01 	teqne	r0, r1
 8000e90:	bf58      	it	pl
 8000e92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e96:	bf88      	it	hi
 8000e98:	17c8      	asrhi	r0, r1, #31
 8000e9a:	bf38      	it	cc
 8000e9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ea0:	bf18      	it	ne
 8000ea2:	f040 0001 	orrne.w	r0, r0, #1
 8000ea6:	4770      	bx	lr
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	d102      	bne.n	8000eb4 <__cmpsf2+0x4c>
 8000eae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eb2:	d105      	bne.n	8000ec0 <__cmpsf2+0x58>
 8000eb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000eb8:	d1e4      	bne.n	8000e84 <__cmpsf2+0x1c>
 8000eba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ebe:	d0e1      	beq.n	8000e84 <__cmpsf2+0x1c>
 8000ec0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_cfrcmple>:
 8000ec8:	4684      	mov	ip, r0
 8000eca:	4608      	mov	r0, r1
 8000ecc:	4661      	mov	r1, ip
 8000ece:	e7ff      	b.n	8000ed0 <__aeabi_cfcmpeq>

08000ed0 <__aeabi_cfcmpeq>:
 8000ed0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ed2:	f7ff ffc9 	bl	8000e68 <__cmpsf2>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	bf48      	it	mi
 8000eda:	f110 0f00 	cmnmi.w	r0, #0
 8000ede:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ee0 <__aeabi_fcmpeq>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff fff4 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000ee8:	bf0c      	ite	eq
 8000eea:	2001      	moveq	r0, #1
 8000eec:	2000      	movne	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmplt>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffea 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000efc:	bf34      	ite	cc
 8000efe:	2001      	movcc	r0, #1
 8000f00:	2000      	movcs	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmple>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffe0 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpge>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffd2 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f24:	bf94      	ite	ls
 8000f26:	2001      	movls	r0, #1
 8000f28:	2000      	movhi	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmpgt>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffc8 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f38:	bf34      	ite	cc
 8000f3a:	2001      	movcc	r0, #1
 8000f3c:	2000      	movcs	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <__aeabi_f2uiz>:
 8000f90:	0042      	lsls	r2, r0, #1
 8000f92:	d20e      	bcs.n	8000fb2 <__aeabi_f2uiz+0x22>
 8000f94:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f98:	d30b      	bcc.n	8000fb2 <__aeabi_f2uiz+0x22>
 8000f9a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f9e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fa2:	d409      	bmi.n	8000fb8 <__aeabi_f2uiz+0x28>
 8000fa4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fac:	fa23 f002 	lsr.w	r0, r3, r2
 8000fb0:	4770      	bx	lr
 8000fb2:	f04f 0000 	mov.w	r0, #0
 8000fb6:	4770      	bx	lr
 8000fb8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fbc:	d101      	bne.n	8000fc2 <__aeabi_f2uiz+0x32>
 8000fbe:	0242      	lsls	r2, r0, #9
 8000fc0:	d102      	bne.n	8000fc8 <__aeabi_f2uiz+0x38>
 8000fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc6:	4770      	bx	lr
 8000fc8:	f04f 0000 	mov.w	r0, #0
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <FIRFilter_Init>:
#include "FIRFilter.h"

/* Designed filter coefficients*/
static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {0.02840647f, 0.23700821f, 0.46917063f, 0.23700821f, 0.02840647f};

void FIRFilter_Init(FIRFilter *fir){
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	
	/* Clear filter buffer */
	for(uint8_t n=0; n<FIR_FILTER_LENGTH;n++){
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e008      	b.n	8000ff0 <FIRFilter_Init+0x20>
		
		fir->buf[n] = 0.0f;
 8000fde:	7bfa      	ldrb	r2, [r7, #15]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f04f 0100 	mov.w	r1, #0
 8000fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t n=0; n<FIR_FILTER_LENGTH;n++){
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	3301      	adds	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	d9f3      	bls.n	8000fde <FIRFilter_Init+0xe>
	
	}
	
	/* Reset buffer index */
	fir->bufindex = 0;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	751a      	strb	r2, [r3, #20]
	
	/* Clear filter output */
	fir->out = 0.0f;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
	...

08001010 <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter *fir, float inp){
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	
	/* Store latest sample in buffer */
	fir->buf[fir->bufindex] = inp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7d1b      	ldrb	r3, [r3, #20]
 800101e:	4619      	mov	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	
	/* Increment buffer index and wrap around if necessary */
	fir->bufindex++;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7d1b      	ldrb	r3, [r3, #20]
 800102c:	3301      	adds	r3, #1
 800102e:	b2da      	uxtb	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	751a      	strb	r2, [r3, #20]
	
	if(fir->bufindex == FIR_FILTER_LENGTH){
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7d1b      	ldrb	r3, [r3, #20]
 8001038:	2b05      	cmp	r3, #5
 800103a:	d102      	bne.n	8001042 <FIRFilter_Update+0x32>
		
		fir->bufindex = 0;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	751a      	strb	r2, [r3, #20]
		
	}
	
	/* Compute new output sample (via convolution) */
	fir->out = 0.0f;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
	
	uint8_t sumIndex = fir->bufindex;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	7d1b      	ldrb	r3, [r3, #20]
 800104e:	73fb      	strb	r3, [r7, #15]
	
	for(uint8_t n=0; n<FIR_FILTER_LENGTH;n++){
 8001050:	2300      	movs	r3, #0
 8001052:	73bb      	strb	r3, [r7, #14]
 8001054:	e021      	b.n	800109a <FIRFilter_Update+0x8a>
		
		/* Decrement index and wrap if necessary */
		if(sumIndex>0){
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <FIRFilter_Update+0x54>
			
			sumIndex--;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	3b01      	subs	r3, #1
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	e001      	b.n	8001068 <FIRFilter_Update+0x58>
			
		}else{
			
			sumIndex = FIR_FILTER_LENGTH -1;
 8001064:	2304      	movs	r3, #4
 8001066:	73fb      	strb	r3, [r7, #15]
			
		}
		
		/* Multiply impulse response with shifted input sample and add to output */
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	699c      	ldr	r4, [r3, #24]
 800106c:	7bbb      	ldrb	r3, [r7, #14]
 800106e:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <FIRFilter_Update+0x9c>)
 8001070:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800107c:	4619      	mov	r1, r3
 800107e:	f7ff fd9b 	bl	8000bb8 <__aeabi_fmul>
 8001082:	4603      	mov	r3, r0
 8001084:	4619      	mov	r1, r3
 8001086:	4620      	mov	r0, r4
 8001088:	f7ff fc8e 	bl	80009a8 <__addsf3>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	619a      	str	r2, [r3, #24]
	for(uint8_t n=0; n<FIR_FILTER_LENGTH;n++){
 8001094:	7bbb      	ldrb	r3, [r7, #14]
 8001096:	3301      	adds	r3, #1
 8001098:	73bb      	strb	r3, [r7, #14]
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	2b04      	cmp	r3, #4
 800109e:	d9da      	bls.n	8001056 <FIRFilter_Update+0x46>
	}
	
	/* Return filtered output */
	return fir->out;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	699b      	ldr	r3, [r3, #24]
	
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	20000000 	.word	0x20000000

080010b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4a07      	ldr	r2, [pc, #28]	; (80010dc <vApplicationGetIdleTaskMemory+0x2c>)
 80010c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <vApplicationGetIdleTaskMemory+0x30>)
 80010c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ce:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	200000a4 	.word	0x200000a4
 80010e0:	200000f8 	.word	0x200000f8

080010e4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010ea:	f000 fe83 	bl	8001df4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010ee:	f000 f885 	bl	80011fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010f2:	f000 f9cb 	bl	800148c <MX_GPIO_Init>
	MX_ADC1_Init();
 80010f6:	f000 f8dd 	bl	80012b4 <MX_ADC1_Init>
	MX_TIM1_Init();
 80010fa:	f000 f919 	bl	8001330 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 80010fe:	f000 f99b 	bl	8001438 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 8001102:	482d      	ldr	r0, [pc, #180]	; (80011b8 <main+0xd4>)
 8001104:	f000 ff80 	bl	8002008 <HAL_ADC_Start>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <main+0x2e>
		Error_Handler();
 800110e:	f000 fc81 	bl	8001a14 <Error_Handler>
	}

	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) {
 8001112:	2100      	movs	r1, #0
 8001114:	4829      	ldr	r0, [pc, #164]	; (80011bc <main+0xd8>)
 8001116:	f002 fbed 	bl	80038f4 <HAL_TIM_PWM_Start>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <main+0x40>
		Error_Handler();
 8001120:	f000 fc78 	bl	8001a14 <Error_Handler>
	}

	FIRFilter_Init(&tempFilter);
 8001124:	4826      	ldr	r0, [pc, #152]	; (80011c0 <main+0xdc>)
 8001126:	f7ff ff53 	bl	8000fd0 <FIRFilter_Init>
	/* Create the thread(s) */
	/* definition and creation of defaultTask */

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	tempQueue = xQueueCreate(1, sizeof(float));
 800112a:	2200      	movs	r2, #0
 800112c:	2104      	movs	r1, #4
 800112e:	2001      	movs	r0, #1
 8001130:	f003 fc0a 	bl	8004948 <xQueueGenericCreate>
 8001134:	4602      	mov	r2, r0
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <main+0xe0>)
 8001138:	601a      	str	r2, [r3, #0]
	if (tempQueue == 0) {
 800113a:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <main+0xe0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <main+0x62>
		Error_Handler();
 8001142:	f000 fc67 	bl	8001a14 <Error_Handler>
	}
	filteredTempQueue = xQueueCreate(1, sizeof(float));
 8001146:	2200      	movs	r2, #0
 8001148:	2104      	movs	r1, #4
 800114a:	2001      	movs	r0, #1
 800114c:	f003 fbfc 	bl	8004948 <xQueueGenericCreate>
 8001150:	4602      	mov	r2, r0
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <main+0xe4>)
 8001154:	601a      	str	r2, [r3, #0]
	if (tempQueue == 0) {
 8001156:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <main+0xe0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <main+0x7e>
		Error_Handler();
 800115e:	f000 fc59 	bl	8001a14 <Error_Handler>
	}

	xTaskCreate(Temp_taskF, "TempTask", 128, NULL, 3, &Temp_Task);
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <main+0xe8>)
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	2303      	movs	r3, #3
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2300      	movs	r3, #0
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	4918      	ldr	r1, [pc, #96]	; (80011d0 <main+0xec>)
 8001170:	4818      	ldr	r0, [pc, #96]	; (80011d4 <main+0xf0>)
 8001172:	f003 ff84 	bl	800507e <xTaskCreate>
	xTaskCreate(Filter_taskF, "FilterTask", 128, NULL, 2, &Filter_Task);
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <main+0xf4>)
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	2302      	movs	r3, #2
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2300      	movs	r3, #0
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	4916      	ldr	r1, [pc, #88]	; (80011dc <main+0xf8>)
 8001184:	4816      	ldr	r0, [pc, #88]	; (80011e0 <main+0xfc>)
 8001186:	f003 ff7a 	bl	800507e <xTaskCreate>
	xTaskCreate(Control_taskF, "ControlTask", 128, NULL, 4, &Control_Task);
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <main+0x100>)
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	2304      	movs	r3, #4
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2300      	movs	r3, #0
 8001194:	2280      	movs	r2, #128	; 0x80
 8001196:	4914      	ldr	r1, [pc, #80]	; (80011e8 <main+0x104>)
 8001198:	4814      	ldr	r0, [pc, #80]	; (80011ec <main+0x108>)
 800119a:	f003 ff70 	bl	800507e <xTaskCreate>
	xTaskCreate(Display_taskF, "DisplayTask", 128, NULL, 1, &Display_Task);
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <main+0x10c>)
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	2301      	movs	r3, #1
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2300      	movs	r3, #0
 80011a8:	2280      	movs	r2, #128	; 0x80
 80011aa:	4912      	ldr	r1, [pc, #72]	; (80011f4 <main+0x110>)
 80011ac:	4812      	ldr	r0, [pc, #72]	; (80011f8 <main+0x114>)
 80011ae:	f003 ff66 	bl	800507e <xTaskCreate>

	vTaskStartScheduler();
 80011b2:	f004 f8c5 	bl	8005340 <vTaskStartScheduler>
	/* Start scheduler */

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80011b6:	e7fe      	b.n	80011b6 <main+0xd2>
 80011b8:	20002e64 	.word	0x20002e64
 80011bc:	20002efc 	.word	0x20002efc
 80011c0:	20002ee0 	.word	0x20002ee0
 80011c4:	20002e60 	.word	0x20002e60
 80011c8:	20002e94 	.word	0x20002e94
 80011cc:	20002f48 	.word	0x20002f48
 80011d0:	08006cd8 	.word	0x08006cd8
 80011d4:	0800159d 	.word	0x0800159d
 80011d8:	20002f4c 	.word	0x20002f4c
 80011dc:	08006ce4 	.word	0x08006ce4
 80011e0:	08001675 	.word	0x08001675
 80011e4:	20002f44 	.word	0x20002f44
 80011e8:	08006cf0 	.word	0x08006cf0
 80011ec:	080016d9 	.word	0x080016d9
 80011f0:	20002edc 	.word	0x20002edc
 80011f4:	08006cfc 	.word	0x08006cfc
 80011f8:	08001811 	.word	0x08001811

080011fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b094      	sub	sp, #80	; 0x50
 8001200:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001206:	2228      	movs	r2, #40	; 0x28
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f005 f947 	bl	800649e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800122c:	2301      	movs	r3, #1
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123a:	2301      	movs	r3, #1
 800123c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2302      	movs	r3, #2
 8001240:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001246:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001248:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800124c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800124e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001252:	4618      	mov	r0, r3
 8001254:	f001 fc96 	bl	8002b84 <HAL_RCC_OscConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x66>
		Error_Handler();
 800125e:	f000 fbd9 	bl	8001a14 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001262:	230f      	movs	r3, #15
 8001264:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001266:	2302      	movs	r3, #2
 8001268:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800126e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001272:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2102      	movs	r1, #2
 800127e:	4618      	mov	r0, r3
 8001280:	f001 ff00 	bl	8003084 <HAL_RCC_ClockConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0x92>
		Error_Handler();
 800128a:	f000 fbc3 	bl	8001a14 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800128e:	2302      	movs	r3, #2
 8001290:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001296:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	4618      	mov	r0, r3
 800129c:	f002 f8be 	bl	800341c <HAL_RCCEx_PeriphCLKConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0xae>
		Error_Handler();
 80012a6:	f000 fbb5 	bl	8001a14 <Error_Handler>
	}
}
 80012aa:	bf00      	nop
 80012ac:	3750      	adds	r7, #80	; 0x50
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_ADC1_Init+0x74>)
 80012c6:	4a19      	ldr	r2, [pc, #100]	; (800132c <MX_ADC1_Init+0x78>)
 80012c8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <MX_ADC1_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <MX_ADC1_Init+0x74>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_ADC1_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <MX_ADC1_Init+0x74>)
 80012de:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012e2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <MX_ADC1_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_ADC1_Init+0x74>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80012f0:	480d      	ldr	r0, [pc, #52]	; (8001328 <MX_ADC1_Init+0x74>)
 80012f2:	f000 fdb1 	bl	8001e58 <HAL_ADC_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_ADC1_Init+0x4c>
		Error_Handler();
 80012fc:	f000 fb8a 	bl	8001a14 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001304:	2301      	movs	r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001308:	2303      	movs	r3, #3
 800130a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_ADC1_Init+0x74>)
 8001312:	f001 f839 	bl	8002388 <HAL_ADC_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC1_Init+0x6c>
		Error_Handler();
 800131c:	f000 fb7a 	bl	8001a14 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20002e64 	.word	0x20002e64
 800132c:	40012400 	.word	0x40012400

08001330 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b092      	sub	sp, #72	; 0x48
 8001334:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001336:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
 8001350:	615a      	str	r2, [r3, #20]
 8001352:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2220      	movs	r2, #32
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f005 f89f 	bl	800649e <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001360:	4b33      	ldr	r3, [pc, #204]	; (8001430 <MX_TIM1_Init+0x100>)
 8001362:	4a34      	ldr	r2, [pc, #208]	; (8001434 <MX_TIM1_Init+0x104>)
 8001364:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1;
 8001366:	4b32      	ldr	r3, [pc, #200]	; (8001430 <MX_TIM1_Init+0x100>)
 8001368:	2201      	movs	r2, #1
 800136a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b30      	ldr	r3, [pc, #192]	; (8001430 <MX_TIM1_Init+0x100>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 18000 - 1;
 8001372:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <MX_TIM1_Init+0x100>)
 8001374:	f244 624f 	movw	r2, #17999	; 0x464f
 8001378:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <MX_TIM1_Init+0x100>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001380:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <MX_TIM1_Init+0x100>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001386:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <MX_TIM1_Init+0x100>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800138c:	4828      	ldr	r0, [pc, #160]	; (8001430 <MX_TIM1_Init+0x100>)
 800138e:	f002 fa61 	bl	8003854 <HAL_TIM_PWM_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0x6c>
		Error_Handler();
 8001398:	f000 fb3c 	bl	8001a14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139c:	2300      	movs	r3, #0
 800139e:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80013a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013a8:	4619      	mov	r1, r3
 80013aa:	4821      	ldr	r0, [pc, #132]	; (8001430 <MX_TIM1_Init+0x100>)
 80013ac:	f002 ff3c 	bl	8004228 <HAL_TIMEx_MasterConfigSynchronization>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80013b6:	f000 fb2d 	bl	8001a14 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ba:	2360      	movs	r3, #96	; 0x60
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013c6:	2300      	movs	r3, #0
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80013d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013da:	2200      	movs	r2, #0
 80013dc:	4619      	mov	r1, r3
 80013de:	4814      	ldr	r0, [pc, #80]	; (8001430 <MX_TIM1_Init+0x100>)
 80013e0:	f002 fc32 	bl	8003c48 <HAL_TIM_PWM_ConfigChannel>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 80013ea:	f000 fb13 	bl	8001a14 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001402:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001406:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	4619      	mov	r1, r3
 8001410:	4807      	ldr	r0, [pc, #28]	; (8001430 <MX_TIM1_Init+0x100>)
 8001412:	f002 ff67 	bl	80042e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM1_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 800141c:	f000 fafa 	bl	8001a14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001420:	4803      	ldr	r0, [pc, #12]	; (8001430 <MX_TIM1_Init+0x100>)
 8001422:	f000 fb8d 	bl	8001b40 <HAL_TIM_MspPostInit>

}
 8001426:	bf00      	nop
 8001428:	3748      	adds	r7, #72	; 0x48
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20002efc 	.word	0x20002efc
 8001434:	40012c00 	.word	0x40012c00

08001438 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 800143e:	4a12      	ldr	r2, [pc, #72]	; (8001488 <MX_USART1_UART_Init+0x50>)
 8001440:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 8001444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001448:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 800145e:	2208      	movs	r2, #8
 8001460:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 8001470:	f002 ff9b 	bl	80043aa <HAL_UART_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800147a:	f000 facb 	bl	8001a14 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20002e98 	.word	0x20002e98
 8001488:	40013800 	.word	0x40013800

0800148c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001492:	f107 0310 	add.w	r3, r7, #16
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014a0:	4b3b      	ldr	r3, [pc, #236]	; (8001590 <MX_GPIO_Init+0x104>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a3a      	ldr	r2, [pc, #232]	; (8001590 <MX_GPIO_Init+0x104>)
 80014a6:	f043 0310 	orr.w	r3, r3, #16
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b38      	ldr	r3, [pc, #224]	; (8001590 <MX_GPIO_Init+0x104>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0310 	and.w	r3, r3, #16
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80014b8:	4b35      	ldr	r3, [pc, #212]	; (8001590 <MX_GPIO_Init+0x104>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a34      	ldr	r2, [pc, #208]	; (8001590 <MX_GPIO_Init+0x104>)
 80014be:	f043 0320 	orr.w	r3, r3, #32
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b32      	ldr	r3, [pc, #200]	; (8001590 <MX_GPIO_Init+0x104>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0320 	and.w	r3, r3, #32
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <MX_GPIO_Init+0x104>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a2e      	ldr	r2, [pc, #184]	; (8001590 <MX_GPIO_Init+0x104>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <MX_GPIO_Init+0x104>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80014e8:	4b29      	ldr	r3, [pc, #164]	; (8001590 <MX_GPIO_Init+0x104>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a28      	ldr	r2, [pc, #160]	; (8001590 <MX_GPIO_Init+0x104>)
 80014ee:	f043 0308 	orr.w	r3, r3, #8
 80014f2:	6193      	str	r3, [r2, #24]
 80014f4:	4b26      	ldr	r3, [pc, #152]	; (8001590 <MX_GPIO_Init+0x104>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001506:	4823      	ldr	r0, [pc, #140]	; (8001594 <MX_GPIO_Init+0x108>)
 8001508:	f001 fb23 	bl	8002b52 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	2108      	movs	r1, #8
 8001510:	4821      	ldr	r0, [pc, #132]	; (8001598 <MX_GPIO_Init+0x10c>)
 8001512:	f001 fb1e 	bl	8002b52 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800151a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	2301      	movs	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2302      	movs	r3, #2
 8001526:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	f107 0310 	add.w	r3, r7, #16
 800152c:	4619      	mov	r1, r3
 800152e:	4819      	ldr	r0, [pc, #100]	; (8001594 <MX_GPIO_Init+0x108>)
 8001530:	f001 f99e 	bl	8002870 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001534:	2308      	movs	r3, #8
 8001536:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2302      	movs	r3, #2
 8001542:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	4619      	mov	r1, r3
 800154a:	4813      	ldr	r0, [pc, #76]	; (8001598 <MX_GPIO_Init+0x10c>)
 800154c:	f001 f990 	bl	8002870 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001550:	2310      	movs	r3, #16
 8001552:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	4619      	mov	r1, r3
 8001562:	480d      	ldr	r0, [pc, #52]	; (8001598 <MX_GPIO_Init+0x10c>)
 8001564:	f001 f984 	bl	8002870 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001568:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800156c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156e:	2301      	movs	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2302      	movs	r3, #2
 8001578:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	4619      	mov	r1, r3
 8001580:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_GPIO_Init+0x10c>)
 8001582:	f001 f975 	bl	8002870 <HAL_GPIO_Init>

}
 8001586:	bf00      	nop
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	40010800 	.word	0x40010800
 8001598:	40010c00 	.word	0x40010c00

0800159c <Temp_taskF>:

/* USER CODE BEGIN 4 */
void Temp_taskF(void *pvParameters) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	while (1) {
		uint8_t tempdata[16];
		uint16_t temp16;

		CSen
 80015a4:	2200      	movs	r2, #0
 80015a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015aa:	482f      	ldr	r0, [pc, #188]	; (8001668 <Temp_taskF+0xcc>)
 80015ac:	f001 fad1 	bl	8002b52 <HAL_GPIO_WritePin>
		for (int i = 0; i < 16; i++) {
 80015b0:	2300      	movs	r3, #0
 80015b2:	623b      	str	r3, [r7, #32]
 80015b4:	e018      	b.n	80015e8 <Temp_taskF+0x4c>
			SCK_H
 80015b6:	2200      	movs	r2, #0
 80015b8:	2108      	movs	r1, #8
 80015ba:	482c      	ldr	r0, [pc, #176]	; (800166c <Temp_taskF+0xd0>)
 80015bc:	f001 fac9 	bl	8002b52 <HAL_GPIO_WritePin>
			tempdata[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 80015c0:	2110      	movs	r1, #16
 80015c2:	482a      	ldr	r0, [pc, #168]	; (800166c <Temp_taskF+0xd0>)
 80015c4:	f001 faae 	bl	8002b24 <HAL_GPIO_ReadPin>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4619      	mov	r1, r3
 80015cc:	f107 020c 	add.w	r2, r7, #12
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	4413      	add	r3, r2
 80015d4:	460a      	mov	r2, r1
 80015d6:	701a      	strb	r2, [r3, #0]
			SCK_L
 80015d8:	2201      	movs	r2, #1
 80015da:	2108      	movs	r1, #8
 80015dc:	4823      	ldr	r0, [pc, #140]	; (800166c <Temp_taskF+0xd0>)
 80015de:	f001 fab8 	bl	8002b52 <HAL_GPIO_WritePin>
		for (int i = 0; i < 16; i++) {
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	3301      	adds	r3, #1
 80015e6:	623b      	str	r3, [r7, #32]
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	2b0f      	cmp	r3, #15
 80015ec:	dde3      	ble.n	80015b6 <Temp_taskF+0x1a>
		}
		CSdis
 80015ee:	2201      	movs	r2, #1
 80015f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f4:	481c      	ldr	r0, [pc, #112]	; (8001668 <Temp_taskF+0xcc>)
 80015f6:	f001 faac 	bl	8002b52 <HAL_GPIO_WritePin>

		if (tempdata[13] == 0) {
 80015fa:	7e7b      	ldrb	r3, [r7, #25]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d11b      	bne.n	8001638 <Temp_taskF+0x9c>

			for (int n = 1; n < 13; n++) {
 8001600:	2301      	movs	r3, #1
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	e015      	b.n	8001632 <Temp_taskF+0x96>
				temp16 += tempdata[n] * (2048 / (1 << (n - 1)));
 8001606:	f107 020c 	add.w	r2, r7, #12
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	4413      	add	r3, r2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b29b      	uxth	r3, r3
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	3a01      	subs	r2, #1
 8001616:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800161a:	fa41 f202 	asr.w	r2, r1, r2
 800161e:	b292      	uxth	r2, r2
 8001620:	fb02 f303 	mul.w	r3, r2, r3
 8001624:	b29a      	uxth	r2, r3
 8001626:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001628:	4413      	add	r3, r2
 800162a:	84fb      	strh	r3, [r7, #38]	; 0x26
			for (int n = 1; n < 13; n++) {
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	3301      	adds	r3, #1
 8001630:	61fb      	str	r3, [r7, #28]
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	2b0c      	cmp	r3, #12
 8001636:	dde6      	ble.n	8001606 <Temp_taskF+0x6a>
			}

		}

		float temp = (float) temp16 / 4;
 8001638:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fa64 	bl	8000b08 <__aeabi_ui2f>
 8001640:	4603      	mov	r3, r0
 8001642:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fb6a 	bl	8000d20 <__aeabi_fdiv>
 800164c:	4603      	mov	r3, r0
 800164e:	60bb      	str	r3, [r7, #8]

		if (xQueueSend(tempQueue, &temp, 10) == pdPASS) {
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <Temp_taskF+0xd4>)
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	f107 0108 	add.w	r1, r7, #8
 8001658:	2300      	movs	r3, #0
 800165a:	220a      	movs	r2, #10
 800165c:	f003 f9d0 	bl	8004a00 <xQueueGenericSend>
		}

		vTaskDelay(200); /*5Hz frequency*/
 8001660:	20c8      	movs	r0, #200	; 0xc8
 8001662:	f003 fe39 	bl	80052d8 <vTaskDelay>
	while (1) {
 8001666:	e79d      	b.n	80015a4 <Temp_taskF+0x8>
 8001668:	40010800 	.word	0x40010800
 800166c:	40010c00 	.word	0x40010c00
 8001670:	20002e60 	.word	0x20002e60

08001674 <Filter_taskF>:
	}
}

void Filter_taskF(void *pvParameters) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	while (1) {
		float rx_temp;
		uint8_t aux = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]
		if (xQueueReceive(tempQueue, &rx_temp, 10)) {
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <Filter_taskF+0x54>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f107 0108 	add.w	r1, r7, #8
 8001688:	220a      	movs	r2, #10
 800168a:	4618      	mov	r0, r3
 800168c:	f003 fab2 	bl	8004bf4 <xQueueReceive>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f2      	beq.n	800167c <Filter_taskF+0x8>
			aux++;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	3301      	adds	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
			filteredTemp = FIRFilter_Update(&tempFilter, rx_temp);
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	4619      	mov	r1, r3
 80016a0:	480a      	ldr	r0, [pc, #40]	; (80016cc <Filter_taskF+0x58>)
 80016a2:	f7ff fcb5 	bl	8001010 <FIRFilter_Update>
 80016a6:	4602      	mov	r2, r0
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <Filter_taskF+0x5c>)
 80016aa:	601a      	str	r2, [r3, #0]

			if (aux == 5) {
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	2b05      	cmp	r3, #5
 80016b0:	d1e4      	bne.n	800167c <Filter_taskF+0x8>
				aux = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	73fb      	strb	r3, [r7, #15]
				if (xQueueSend(filteredTempQueue, &filteredTemp, 10) == pdPASS) {
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <Filter_taskF+0x60>)
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	2300      	movs	r3, #0
 80016bc:	220a      	movs	r2, #10
 80016be:	4904      	ldr	r1, [pc, #16]	; (80016d0 <Filter_taskF+0x5c>)
 80016c0:	f003 f99e 	bl	8004a00 <xQueueGenericSend>
	while (1) {
 80016c4:	e7da      	b.n	800167c <Filter_taskF+0x8>
 80016c6:	bf00      	nop
 80016c8:	20002e60 	.word	0x20002e60
 80016cc:	20002ee0 	.word	0x20002ee0
 80016d0:	200004f8 	.word	0x200004f8
 80016d4:	20002e94 	.word	0x20002e94

080016d8 <Control_taskF>:
			}
		}
	}
}

void Control_taskF(void *pvParameters) {
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	while (1) {
		float rx_filteredTemp;

		if (xQueueReceive(filteredTempQueue, &rx_filteredTemp, 10)) {
 80016e0:	4b3f      	ldr	r3, [pc, #252]	; (80017e0 <Control_taskF+0x108>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f107 010c 	add.w	r1, r7, #12
 80016e8:	220a      	movs	r2, #10
 80016ea:	4618      	mov	r0, r3
 80016ec:	f003 fa82 	bl	8004bf4 <xQueueReceive>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f4      	beq.n	80016e0 <Control_taskF+0x8>

			HAL_ADC_PollForConversion(&hadc1, 10);
 80016f6:	210a      	movs	r1, #10
 80016f8:	483a      	ldr	r0, [pc, #232]	; (80017e4 <Control_taskF+0x10c>)
 80016fa:	f000 fd33 	bl	8002164 <HAL_ADC_PollForConversion>
			ref = (float) HAL_ADC_GetValue(&hadc1) / 27.3; // leitura do potenciometro convertido em ref até 150°C
 80016fe:	4839      	ldr	r0, [pc, #228]	; (80017e4 <Control_taskF+0x10c>)
 8001700:	f000 fe36 	bl	8002370 <HAL_ADC_GetValue>
 8001704:	4603      	mov	r3, r0
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff f9fe 	bl	8000b08 <__aeabi_ui2f>
 800170c:	4603      	mov	r3, r0
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fe8a 	bl	8000428 <__aeabi_f2d>
 8001714:	a330      	add	r3, pc, #192	; (adr r3, 80017d8 <Control_taskF+0x100>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7ff f807 	bl	800072c <__aeabi_ddiv>
 800171e:	4603      	mov	r3, r0
 8001720:	460c      	mov	r4, r1
 8001722:	4618      	mov	r0, r3
 8001724:	4621      	mov	r1, r4
 8001726:	f7ff f8e9 	bl	80008fc <__aeabi_d2f>
 800172a:	4602      	mov	r2, r0
 800172c:	4b2e      	ldr	r3, [pc, #184]	; (80017e8 <Control_taskF+0x110>)
 800172e:	601a      	str	r2, [r3, #0]

			float uk;
			static float u1 = 0;

			float ek = ref - rx_filteredTemp;
 8001730:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <Control_taskF+0x110>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff f933 	bl	80009a4 <__aeabi_fsub>
 800173e:	4603      	mov	r3, r0
 8001740:	617b      	str	r3, [r7, #20]
			if (ek < -5.0) {
 8001742:	492a      	ldr	r1, [pc, #168]	; (80017ec <Control_taskF+0x114>)
 8001744:	6978      	ldr	r0, [r7, #20]
 8001746:	f7ff fbd5 	bl	8000ef4 <__aeabi_fcmplt>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <Control_taskF+0x86>

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001750:	2201      	movs	r2, #1
 8001752:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001756:	4826      	ldr	r0, [pc, #152]	; (80017f0 <Control_taskF+0x118>)
 8001758:	f001 f9fb 	bl	8002b52 <HAL_GPIO_WritePin>
 800175c:	e7c0      	b.n	80016e0 <Control_taskF+0x8>

			} else {

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001764:	4822      	ldr	r0, [pc, #136]	; (80017f0 <Control_taskF+0x118>)
 8001766:	f001 f9f4 	bl	8002b52 <HAL_GPIO_WritePin>
				u1 = p * u1 + r * ek;
 800176a:	4922      	ldr	r1, [pc, #136]	; (80017f4 <Control_taskF+0x11c>)
 800176c:	6978      	ldr	r0, [r7, #20]
 800176e:	f7ff fa23 	bl	8000bb8 <__aeabi_fmul>
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <Control_taskF+0x120>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4619      	mov	r1, r3
 800177c:	4610      	mov	r0, r2
 800177e:	f7ff f913 	bl	80009a8 <__addsf3>
 8001782:	4603      	mov	r3, r0
 8001784:	461a      	mov	r2, r3
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <Control_taskF+0x120>)
 8001788:	601a      	str	r2, [r3, #0]

				uk = k * ek + u1;
 800178a:	491c      	ldr	r1, [pc, #112]	; (80017fc <Control_taskF+0x124>)
 800178c:	6978      	ldr	r0, [r7, #20]
 800178e:	f7ff fa13 	bl	8000bb8 <__aeabi_fmul>
 8001792:	4603      	mov	r3, r0
 8001794:	461a      	mov	r2, r3
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <Control_taskF+0x120>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4619      	mov	r1, r3
 800179c:	4610      	mov	r0, r2
 800179e:	f7ff f903 	bl	80009a8 <__addsf3>
 80017a2:	4603      	mov	r3, r0
 80017a4:	613b      	str	r3, [r7, #16]

				uk = uk * 4500;  //converte ação de controle em periodo pwm
 80017a6:	4916      	ldr	r1, [pc, #88]	; (8001800 <Control_taskF+0x128>)
 80017a8:	6938      	ldr	r0, [r7, #16]
 80017aa:	f7ff fa05 	bl	8000bb8 <__aeabi_fmul>
 80017ae:	4603      	mov	r3, r0
 80017b0:	613b      	str	r3, [r7, #16]
				dutyCycle = uk / 18000; //converte ação de controle em razão cíclica
 80017b2:	4914      	ldr	r1, [pc, #80]	; (8001804 <Control_taskF+0x12c>)
 80017b4:	6938      	ldr	r0, [r7, #16]
 80017b6:	f7ff fab3 	bl	8000d20 <__aeabi_fdiv>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461a      	mov	r2, r3
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <Control_taskF+0x130>)
 80017c0:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, uk);
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <Control_taskF+0x134>)
 80017c4:	681c      	ldr	r4, [r3, #0]
 80017c6:	6938      	ldr	r0, [r7, #16]
 80017c8:	f7ff fbe2 	bl	8000f90 <__aeabi_f2uiz>
 80017cc:	4603      	mov	r3, r0
 80017ce:	6363      	str	r3, [r4, #52]	; 0x34
	while (1) {
 80017d0:	e786      	b.n	80016e0 <Control_taskF+0x8>
 80017d2:	bf00      	nop
 80017d4:	f3af 8000 	nop.w
 80017d8:	cccccccd 	.word	0xcccccccd
 80017dc:	403b4ccc 	.word	0x403b4ccc
 80017e0:	20002e94 	.word	0x20002e94
 80017e4:	20002e64 	.word	0x20002e64
 80017e8:	200004fc 	.word	0x200004fc
 80017ec:	c0a00000 	.word	0xc0a00000
 80017f0:	40010c00 	.word	0x40010c00
 80017f4:	38de7008 	.word	0x38de7008
 80017f8:	20000504 	.word	0x20000504
 80017fc:	3cf66bfa 	.word	0x3cf66bfa
 8001800:	458ca000 	.word	0x458ca000
 8001804:	468ca000 	.word	0x468ca000
 8001808:	20000500 	.word	0x20000500
 800180c:	20002efc 	.word	0x20002efc

08001810 <Display_taskF>:
		}

	}
}

void Display_taskF(void *pvParameters) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b09e      	sub	sp, #120	; 0x78
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	while (1) {
		char str[100];
		uint8_t Cmd_End[3] = { 0xFF, 0xFF, 0xFF };
 8001818:	4a69      	ldr	r2, [pc, #420]	; (80019c0 <Display_taskF+0x1b0>)
 800181a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	4611      	mov	r1, r2
 8001822:	8019      	strh	r1, [r3, #0]
 8001824:	3302      	adds	r3, #2
 8001826:	0c12      	lsrs	r2, r2, #16
 8001828:	701a      	strb	r2, [r3, #0]

		int32_t number = ref * 100;
 800182a:	4b66      	ldr	r3, [pc, #408]	; (80019c4 <Display_taskF+0x1b4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4966      	ldr	r1, [pc, #408]	; (80019c8 <Display_taskF+0x1b8>)
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff f9c1 	bl	8000bb8 <__aeabi_fmul>
 8001836:	4603      	mov	r3, r0
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fb83 	bl	8000f44 <__aeabi_f2iz>
 800183e:	4603      	mov	r3, r0
 8001840:	677b      	str	r3, [r7, #116]	; 0x74
		sprintf(str, "setPoint.vvs1=%d", 2);
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	2202      	movs	r2, #2
 8001848:	4960      	ldr	r1, [pc, #384]	; (80019cc <Display_taskF+0x1bc>)
 800184a:	4618      	mov	r0, r3
 800184c:	f004 fe30 	bl	80064b0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 10);
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fc7b 	bl	8000150 <strlen>
 800185a:	4603      	mov	r3, r0
 800185c:	b29a      	uxth	r2, r3
 800185e:	f107 010c 	add.w	r1, r7, #12
 8001862:	230a      	movs	r3, #10
 8001864:	485a      	ldr	r0, [pc, #360]	; (80019d0 <Display_taskF+0x1c0>)
 8001866:	f002 fded 	bl	8004444 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, Cmd_End, 3, 10);
 800186a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800186e:	230a      	movs	r3, #10
 8001870:	2203      	movs	r2, #3
 8001872:	4857      	ldr	r0, [pc, #348]	; (80019d0 <Display_taskF+0x1c0>)
 8001874:	f002 fde6 	bl	8004444 <HAL_UART_Transmit>
		sprintf(str, "setPoint.val=%ld", number);
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800187e:	4955      	ldr	r1, [pc, #340]	; (80019d4 <Display_taskF+0x1c4>)
 8001880:	4618      	mov	r0, r3
 8001882:	f004 fe15 	bl	80064b0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 10);
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fc60 	bl	8000150 <strlen>
 8001890:	4603      	mov	r3, r0
 8001892:	b29a      	uxth	r2, r3
 8001894:	f107 010c 	add.w	r1, r7, #12
 8001898:	230a      	movs	r3, #10
 800189a:	484d      	ldr	r0, [pc, #308]	; (80019d0 <Display_taskF+0x1c0>)
 800189c:	f002 fdd2 	bl	8004444 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, Cmd_End, 3, 10);
 80018a0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80018a4:	230a      	movs	r3, #10
 80018a6:	2203      	movs	r2, #3
 80018a8:	4849      	ldr	r0, [pc, #292]	; (80019d0 <Display_taskF+0x1c0>)
 80018aa:	f002 fdcb 	bl	8004444 <HAL_UART_Transmit>

		number = filteredTemp * 100;
 80018ae:	4b4a      	ldr	r3, [pc, #296]	; (80019d8 <Display_taskF+0x1c8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4945      	ldr	r1, [pc, #276]	; (80019c8 <Display_taskF+0x1b8>)
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff f97f 	bl	8000bb8 <__aeabi_fmul>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fb41 	bl	8000f44 <__aeabi_f2iz>
 80018c2:	4603      	mov	r3, r0
 80018c4:	677b      	str	r3, [r7, #116]	; 0x74
		sprintf(str, "filteredTemp.vvs1=%d", 2);
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	2202      	movs	r2, #2
 80018cc:	4943      	ldr	r1, [pc, #268]	; (80019dc <Display_taskF+0x1cc>)
 80018ce:	4618      	mov	r0, r3
 80018d0:	f004 fdee 	bl	80064b0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 10);
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fc39 	bl	8000150 <strlen>
 80018de:	4603      	mov	r3, r0
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	f107 010c 	add.w	r1, r7, #12
 80018e6:	230a      	movs	r3, #10
 80018e8:	4839      	ldr	r0, [pc, #228]	; (80019d0 <Display_taskF+0x1c0>)
 80018ea:	f002 fdab 	bl	8004444 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, Cmd_End, 3, 10);
 80018ee:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80018f2:	230a      	movs	r3, #10
 80018f4:	2203      	movs	r2, #3
 80018f6:	4836      	ldr	r0, [pc, #216]	; (80019d0 <Display_taskF+0x1c0>)
 80018f8:	f002 fda4 	bl	8004444 <HAL_UART_Transmit>
		sprintf(str, "filteredTemp.val=%ld", number);
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001902:	4937      	ldr	r1, [pc, #220]	; (80019e0 <Display_taskF+0x1d0>)
 8001904:	4618      	mov	r0, r3
 8001906:	f004 fdd3 	bl	80064b0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 10);
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fc1e 	bl	8000150 <strlen>
 8001914:	4603      	mov	r3, r0
 8001916:	b29a      	uxth	r2, r3
 8001918:	f107 010c 	add.w	r1, r7, #12
 800191c:	230a      	movs	r3, #10
 800191e:	482c      	ldr	r0, [pc, #176]	; (80019d0 <Display_taskF+0x1c0>)
 8001920:	f002 fd90 	bl	8004444 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, Cmd_End, 3, 10);
 8001924:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001928:	230a      	movs	r3, #10
 800192a:	2203      	movs	r2, #3
 800192c:	4828      	ldr	r0, [pc, #160]	; (80019d0 <Display_taskF+0x1c0>)
 800192e:	f002 fd89 	bl	8004444 <HAL_UART_Transmit>

		number = dutyCycle * 100;
 8001932:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <Display_taskF+0x1d4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4924      	ldr	r1, [pc, #144]	; (80019c8 <Display_taskF+0x1b8>)
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff f93d 	bl	8000bb8 <__aeabi_fmul>
 800193e:	4603      	mov	r3, r0
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff faff 	bl	8000f44 <__aeabi_f2iz>
 8001946:	4603      	mov	r3, r0
 8001948:	677b      	str	r3, [r7, #116]	; 0x74
		sprintf(str, "dutyCycle.vvs1=%d", 2);
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	2202      	movs	r2, #2
 8001950:	4925      	ldr	r1, [pc, #148]	; (80019e8 <Display_taskF+0x1d8>)
 8001952:	4618      	mov	r0, r3
 8001954:	f004 fdac 	bl	80064b0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 10);
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fbf7 	bl	8000150 <strlen>
 8001962:	4603      	mov	r3, r0
 8001964:	b29a      	uxth	r2, r3
 8001966:	f107 010c 	add.w	r1, r7, #12
 800196a:	230a      	movs	r3, #10
 800196c:	4818      	ldr	r0, [pc, #96]	; (80019d0 <Display_taskF+0x1c0>)
 800196e:	f002 fd69 	bl	8004444 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, Cmd_End, 3, 10);
 8001972:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001976:	230a      	movs	r3, #10
 8001978:	2203      	movs	r2, #3
 800197a:	4815      	ldr	r0, [pc, #84]	; (80019d0 <Display_taskF+0x1c0>)
 800197c:	f002 fd62 	bl	8004444 <HAL_UART_Transmit>
		sprintf(str, "dutyCycle.val=%ld", number);
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001986:	4919      	ldr	r1, [pc, #100]	; (80019ec <Display_taskF+0x1dc>)
 8001988:	4618      	mov	r0, r3
 800198a:	f004 fd91 	bl	80064b0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 10);
 800198e:	f107 030c 	add.w	r3, r7, #12
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fbdc 	bl	8000150 <strlen>
 8001998:	4603      	mov	r3, r0
 800199a:	b29a      	uxth	r2, r3
 800199c:	f107 010c 	add.w	r1, r7, #12
 80019a0:	230a      	movs	r3, #10
 80019a2:	480b      	ldr	r0, [pc, #44]	; (80019d0 <Display_taskF+0x1c0>)
 80019a4:	f002 fd4e 	bl	8004444 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, Cmd_End, 3, 10);
 80019a8:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80019ac:	230a      	movs	r3, #10
 80019ae:	2203      	movs	r2, #3
 80019b0:	4807      	ldr	r0, [pc, #28]	; (80019d0 <Display_taskF+0x1c0>)
 80019b2:	f002 fd47 	bl	8004444 <HAL_UART_Transmit>
		vTaskDelay(1000); /*1Hz frequency*/
 80019b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ba:	f003 fc8d 	bl	80052d8 <vTaskDelay>
	while (1) {
 80019be:	e72b      	b.n	8001818 <Display_taskF+0x8>
 80019c0:	08006d88 	.word	0x08006d88
 80019c4:	200004fc 	.word	0x200004fc
 80019c8:	42c80000 	.word	0x42c80000
 80019cc:	08006d08 	.word	0x08006d08
 80019d0:	20002e98 	.word	0x20002e98
 80019d4:	08006d1c 	.word	0x08006d1c
 80019d8:	200004f8 	.word	0x200004f8
 80019dc:	08006d30 	.word	0x08006d30
 80019e0:	08006d48 	.word	0x08006d48
 80019e4:	20000500 	.word	0x20000500
 80019e8:	08006d60 	.word	0x08006d60
 80019ec:	08006d74 	.word	0x08006d74

080019f0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a04      	ldr	r2, [pc, #16]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d101      	bne.n	8001a06 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001a02:	f000 fa0d 	bl	8001e20 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40000800 	.word	0x40000800

08001a14 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a18:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a1a:	e7fe      	b.n	8001a1a <Error_Handler+0x6>

08001a1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <HAL_MspInit+0x68>)
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	4a17      	ldr	r2, [pc, #92]	; (8001a84 <HAL_MspInit+0x68>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6193      	str	r3, [r2, #24]
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <HAL_MspInit+0x68>)
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_MspInit+0x68>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	4a11      	ldr	r2, [pc, #68]	; (8001a84 <HAL_MspInit+0x68>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a44:	61d3      	str	r3, [r2, #28]
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_MspInit+0x68>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	210f      	movs	r1, #15
 8001a56:	f06f 0001 	mvn.w	r0, #1
 8001a5a:	f000 fede 	bl	800281a <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_MspInit+0x6c>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <HAL_MspInit+0x6c>)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40010000 	.word	0x40010000

08001a8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a14      	ldr	r2, [pc, #80]	; (8001af8 <HAL_ADC_MspInit+0x6c>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d121      	bne.n	8001af0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <HAL_ADC_MspInit+0x70>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	4a12      	ldr	r2, [pc, #72]	; (8001afc <HAL_ADC_MspInit+0x70>)
 8001ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab6:	6193      	str	r3, [r2, #24]
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_ADC_MspInit+0x70>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac4:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <HAL_ADC_MspInit+0x70>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	4a0c      	ldr	r2, [pc, #48]	; (8001afc <HAL_ADC_MspInit+0x70>)
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	6193      	str	r3, [r2, #24]
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_ADC_MspInit+0x70>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001adc:	2301      	movs	r3, #1
 8001ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f107 0310 	add.w	r3, r7, #16
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4805      	ldr	r0, [pc, #20]	; (8001b00 <HAL_ADC_MspInit+0x74>)
 8001aec:	f000 fec0 	bl	8002870 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001af0:	bf00      	nop
 8001af2:	3720      	adds	r7, #32
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40012400 	.word	0x40012400
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40010800 	.word	0x40010800

08001b04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a09      	ldr	r2, [pc, #36]	; (8001b38 <HAL_TIM_PWM_MspInit+0x34>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d10b      	bne.n	8001b2e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_TIM_PWM_MspInit+0x38>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <HAL_TIM_PWM_MspInit+0x38>)
 8001b1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b20:	6193      	str	r3, [r2, #24]
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_TIM_PWM_MspInit+0x38>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b2e:	bf00      	nop
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	40012c00 	.word	0x40012c00
 8001b3c:	40021000 	.word	0x40021000

08001b40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a10      	ldr	r2, [pc, #64]	; (8001b9c <HAL_TIM_MspPostInit+0x5c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d118      	bne.n	8001b92 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_TIM_MspPostInit+0x60>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <HAL_TIM_MspPostInit+0x60>)
 8001b66:	f043 0304 	orr.w	r3, r3, #4
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_TIM_MspPostInit+0x60>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2302      	movs	r3, #2
 8001b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b86:	f107 0310 	add.w	r3, r7, #16
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <HAL_TIM_MspPostInit+0x64>)
 8001b8e:	f000 fe6f 	bl	8002870 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b92:	bf00      	nop
 8001b94:	3720      	adds	r7, #32
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40012c00 	.word	0x40012c00
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010800 	.word	0x40010800

08001ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <HAL_UART_MspInit+0x8c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d131      	bne.n	8001c2c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_UART_MspInit+0x90>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4a1a      	ldr	r2, [pc, #104]	; (8001c38 <HAL_UART_MspInit+0x90>)
 8001bce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd2:	6193      	str	r3, [r2, #24]
 8001bd4:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_UART_MspInit+0x90>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <HAL_UART_MspInit+0x90>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <HAL_UART_MspInit+0x90>)
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_UART_MspInit+0x90>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c02:	2303      	movs	r3, #3
 8001c04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	f107 0310 	add.w	r3, r7, #16
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480b      	ldr	r0, [pc, #44]	; (8001c3c <HAL_UART_MspInit+0x94>)
 8001c0e:	f000 fe2f 	bl	8002870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	4619      	mov	r1, r3
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <HAL_UART_MspInit+0x94>)
 8001c28:	f000 fe22 	bl	8002870 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c2c:	bf00      	nop
 8001c2e:	3720      	adds	r7, #32
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40013800 	.word	0x40013800
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010800 	.word	0x40010800

08001c40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08c      	sub	sp, #48	; 0x30
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	201e      	movs	r0, #30
 8001c56:	f000 fde0 	bl	800281a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c5a:	201e      	movs	r0, #30
 8001c5c:	f000 fdf9 	bl	8002852 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <HAL_InitTick+0xa0>)
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	4a1e      	ldr	r2, [pc, #120]	; (8001ce0 <HAL_InitTick+0xa0>)
 8001c66:	f043 0304 	orr.w	r3, r3, #4
 8001c6a:	61d3      	str	r3, [r2, #28]
 8001c6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <HAL_InitTick+0xa0>)
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c78:	f107 0210 	add.w	r2, r7, #16
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4611      	mov	r1, r2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f001 fb7c 	bl	8003380 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001c88:	f001 fb52 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c94:	4a13      	ldr	r2, [pc, #76]	; (8001ce4 <HAL_InitTick+0xa4>)
 8001c96:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9a:	0c9b      	lsrs	r3, r3, #18
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <HAL_InitTick+0xa8>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <HAL_InitTick+0xac>)
 8001ca4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <HAL_InitTick+0xa8>)
 8001ca8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cac:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001cae:	4a0e      	ldr	r2, [pc, #56]	; (8001ce8 <HAL_InitTick+0xa8>)
 8001cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <HAL_InitTick+0xa8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_InitTick+0xa8>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001cc0:	4809      	ldr	r0, [pc, #36]	; (8001ce8 <HAL_InitTick+0xa8>)
 8001cc2:	f001 fd1d 	bl	8003700 <HAL_TIM_Base_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d104      	bne.n	8001cd6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001ccc:	4806      	ldr	r0, [pc, #24]	; (8001ce8 <HAL_InitTick+0xa8>)
 8001cce:	f001 fd6f 	bl	80037b0 <HAL_TIM_Base_Start_IT>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	e000      	b.n	8001cd8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3730      	adds	r7, #48	; 0x30
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	431bde83 	.word	0x431bde83
 8001ce8:	20002f50 	.word	0x20002f50
 8001cec:	40000800 	.word	0x40000800

08001cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <NMI_Handler+0x4>

08001cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfa:	e7fe      	b.n	8001cfa <HardFault_Handler+0x4>

08001cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <MemManage_Handler+0x4>

08001d02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d06:	e7fe      	b.n	8001d06 <BusFault_Handler+0x4>

08001d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <UsageFault_Handler+0x4>

08001d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
	...

08001d1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <TIM4_IRQHandler+0x10>)
 8001d22:	f001 fe89 	bl	8003a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20002f50 	.word	0x20002f50

08001d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d38:	4a14      	ldr	r2, [pc, #80]	; (8001d8c <_sbrk+0x5c>)
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <_sbrk+0x60>)
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d44:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <_sbrk+0x64>)
 8001d4e:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <_sbrk+0x68>)
 8001d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d207      	bcs.n	8001d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d60:	f004 fb68 	bl	8006434 <__errno>
 8001d64:	4602      	mov	r2, r0
 8001d66:	230c      	movs	r3, #12
 8001d68:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6e:	e009      	b.n	8001d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <_sbrk+0x64>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <_sbrk+0x64>)
 8001d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d82:	68fb      	ldr	r3, [r7, #12]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20005000 	.word	0x20005000
 8001d90:	00000400 	.word	0x00000400
 8001d94:	20000508 	.word	0x20000508
 8001d98:	20002fa0 	.word	0x20002fa0

08001d9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da8:	480c      	ldr	r0, [pc, #48]	; (8001ddc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001daa:	490d      	ldr	r1, [pc, #52]	; (8001de0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dac:	4a0d      	ldr	r2, [pc, #52]	; (8001de4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db0:	e002      	b.n	8001db8 <LoopCopyDataInit>

08001db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db6:	3304      	adds	r3, #4

08001db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dbc:	d3f9      	bcc.n	8001db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dc0:	4c0a      	ldr	r4, [pc, #40]	; (8001dec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc4:	e001      	b.n	8001dca <LoopFillZerobss>

08001dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc8:	3204      	adds	r2, #4

08001dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dcc:	d3fb      	bcc.n	8001dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dce:	f7ff ffe5 	bl	8001d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dd2:	f004 fb35 	bl	8006440 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dd6:	f7ff f985 	bl	80010e4 <main>
  bx lr
 8001dda:	4770      	bx	lr
  ldr r0, =_sdata
 8001ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001de4:	08006e10 	.word	0x08006e10
  ldr r2, =_sbss
 8001de8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001dec:	20002fa0 	.word	0x20002fa0

08001df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001df0:	e7fe      	b.n	8001df0 <ADC1_2_IRQHandler>
	...

08001df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <HAL_Init+0x28>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <HAL_Init+0x28>)
 8001dfe:	f043 0310 	orr.w	r3, r3, #16
 8001e02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e04:	2003      	movs	r0, #3
 8001e06:	f000 fcfd 	bl	8002804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7ff ff18 	bl	8001c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e10:	f7ff fe04 	bl	8001a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40022000 	.word	0x40022000

08001e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_IncTick+0x1c>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_IncTick+0x20>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a03      	ldr	r2, [pc, #12]	; (8001e40 <HAL_IncTick+0x20>)
 8001e32:	6013      	str	r3, [r2, #0]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	2000001c 	.word	0x2000001c
 8001e40:	20002f98 	.word	0x20002f98

08001e44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return uwTick;
 8001e48:	4b02      	ldr	r3, [pc, #8]	; (8001e54 <HAL_GetTick+0x10>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	20002f98 	.word	0x20002f98

08001e58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e0be      	b.n	8001ff8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d109      	bne.n	8001e9c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fdf8 	bl	8001a8c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 fbc5 	bl	800262c <ADC_ConversionStop_Disable>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 8099 	bne.w	8001fe6 <HAL_ADC_Init+0x18e>
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f040 8095 	bne.w	8001fe6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ec4:	f023 0302 	bic.w	r3, r3, #2
 8001ec8:	f043 0202 	orr.w	r2, r3, #2
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ed8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7b1b      	ldrb	r3, [r3, #12]
 8001ede:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ee0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ef0:	d003      	beq.n	8001efa <HAL_ADC_Init+0xa2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d102      	bne.n	8001f00 <HAL_ADC_Init+0xa8>
 8001efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001efe:	e000      	b.n	8001f02 <HAL_ADC_Init+0xaa>
 8001f00:	2300      	movs	r3, #0
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	7d1b      	ldrb	r3, [r3, #20]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d119      	bne.n	8001f44 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	7b1b      	ldrb	r3, [r3, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d109      	bne.n	8001f2c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	035a      	lsls	r2, r3, #13
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	e00b      	b.n	8001f44 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	f043 0220 	orr.w	r2, r3, #32
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	f043 0201 	orr.w	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	4b28      	ldr	r3, [pc, #160]	; (8002000 <HAL_ADC_Init+0x1a8>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	68b9      	ldr	r1, [r7, #8]
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f74:	d003      	beq.n	8001f7e <HAL_ADC_Init+0x126>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d104      	bne.n	8001f88 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	051b      	lsls	r3, r3, #20
 8001f86:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	4b18      	ldr	r3, [pc, #96]	; (8002004 <HAL_ADC_Init+0x1ac>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d10b      	bne.n	8001fc4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb6:	f023 0303 	bic.w	r3, r3, #3
 8001fba:	f043 0201 	orr.w	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fc2:	e018      	b.n	8001ff6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc8:	f023 0312 	bic.w	r3, r3, #18
 8001fcc:	f043 0210 	orr.w	r2, r3, #16
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	f043 0201 	orr.w	r2, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fe4:	e007      	b.n	8001ff6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	f043 0210 	orr.w	r2, r3, #16
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	ffe1f7fd 	.word	0xffe1f7fd
 8002004:	ff1f0efe 	.word	0xff1f0efe

08002008 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <HAL_ADC_Start+0x1a>
 800201e:	2302      	movs	r3, #2
 8002020:	e098      	b.n	8002154 <HAL_ADC_Start+0x14c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 faa4 	bl	8002578 <ADC_Enable>
 8002030:	4603      	mov	r3, r0
 8002032:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f040 8087 	bne.w	800214a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002044:	f023 0301 	bic.w	r3, r3, #1
 8002048:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a41      	ldr	r2, [pc, #260]	; (800215c <HAL_ADC_Start+0x154>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d105      	bne.n	8002066 <HAL_ADC_Start+0x5e>
 800205a:	4b41      	ldr	r3, [pc, #260]	; (8002160 <HAL_ADC_Start+0x158>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d115      	bne.n	8002092 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207c:	2b00      	cmp	r3, #0
 800207e:	d026      	beq.n	80020ce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002088:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002090:	e01d      	b.n	80020ce <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a2f      	ldr	r2, [pc, #188]	; (8002160 <HAL_ADC_Start+0x158>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d004      	beq.n	80020b2 <HAL_ADC_Start+0xaa>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a2b      	ldr	r2, [pc, #172]	; (800215c <HAL_ADC_Start+0x154>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d10d      	bne.n	80020ce <HAL_ADC_Start+0xc6>
 80020b2:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <HAL_ADC_Start+0x158>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d006      	beq.n	80020e8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	f023 0206 	bic.w	r2, r3, #6
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80020e6:	e002      	b.n	80020ee <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f06f 0202 	mvn.w	r2, #2
 80020fe:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800210a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800210e:	d113      	bne.n	8002138 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002114:	4a11      	ldr	r2, [pc, #68]	; (800215c <HAL_ADC_Start+0x154>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d105      	bne.n	8002126 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_ADC_Start+0x158>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002122:	2b00      	cmp	r3, #0
 8002124:	d108      	bne.n	8002138 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	e00c      	b.n	8002152 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	e003      	b.n	8002152 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002152:	7bfb      	ldrb	r3, [r7, #15]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40012800 	.word	0x40012800
 8002160:	40012400 	.word	0x40012400

08002164 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800217a:	f7ff fe63 	bl	8001e44 <HAL_GetTick>
 800217e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00b      	beq.n	80021a6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	f043 0220 	orr.w	r2, r3, #32
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0d3      	b.n	800234e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d131      	bne.n	8002218 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d12a      	bne.n	8002218 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021c2:	e021      	b.n	8002208 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ca:	d01d      	beq.n	8002208 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d007      	beq.n	80021e2 <HAL_ADC_PollForConversion+0x7e>
 80021d2:	f7ff fe37 	bl	8001e44 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d212      	bcs.n	8002208 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10b      	bne.n	8002208 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	f043 0204 	orr.w	r2, r3, #4
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0a2      	b.n	800234e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0d6      	beq.n	80021c4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002216:	e070      	b.n	80022fa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002218:	4b4f      	ldr	r3, [pc, #316]	; (8002358 <HAL_ADC_PollForConversion+0x1f4>)
 800221a:	681c      	ldr	r4, [r3, #0]
 800221c:	2002      	movs	r0, #2
 800221e:	f001 f9b3 	bl	8003588 <HAL_RCCEx_GetPeriphCLKFreq>
 8002222:	4603      	mov	r3, r0
 8002224:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6919      	ldr	r1, [r3, #16]
 800222e:	4b4b      	ldr	r3, [pc, #300]	; (800235c <HAL_ADC_PollForConversion+0x1f8>)
 8002230:	400b      	ands	r3, r1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d118      	bne.n	8002268 <HAL_ADC_PollForConversion+0x104>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68d9      	ldr	r1, [r3, #12]
 800223c:	4b48      	ldr	r3, [pc, #288]	; (8002360 <HAL_ADC_PollForConversion+0x1fc>)
 800223e:	400b      	ands	r3, r1
 8002240:	2b00      	cmp	r3, #0
 8002242:	d111      	bne.n	8002268 <HAL_ADC_PollForConversion+0x104>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6919      	ldr	r1, [r3, #16]
 800224a:	4b46      	ldr	r3, [pc, #280]	; (8002364 <HAL_ADC_PollForConversion+0x200>)
 800224c:	400b      	ands	r3, r1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d108      	bne.n	8002264 <HAL_ADC_PollForConversion+0x100>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68d9      	ldr	r1, [r3, #12]
 8002258:	4b43      	ldr	r3, [pc, #268]	; (8002368 <HAL_ADC_PollForConversion+0x204>)
 800225a:	400b      	ands	r3, r1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_ADC_PollForConversion+0x100>
 8002260:	2314      	movs	r3, #20
 8002262:	e020      	b.n	80022a6 <HAL_ADC_PollForConversion+0x142>
 8002264:	2329      	movs	r3, #41	; 0x29
 8002266:	e01e      	b.n	80022a6 <HAL_ADC_PollForConversion+0x142>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6919      	ldr	r1, [r3, #16]
 800226e:	4b3d      	ldr	r3, [pc, #244]	; (8002364 <HAL_ADC_PollForConversion+0x200>)
 8002270:	400b      	ands	r3, r1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_ADC_PollForConversion+0x120>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68d9      	ldr	r1, [r3, #12]
 800227c:	4b3a      	ldr	r3, [pc, #232]	; (8002368 <HAL_ADC_PollForConversion+0x204>)
 800227e:	400b      	ands	r3, r1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00d      	beq.n	80022a0 <HAL_ADC_PollForConversion+0x13c>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6919      	ldr	r1, [r3, #16]
 800228a:	4b38      	ldr	r3, [pc, #224]	; (800236c <HAL_ADC_PollForConversion+0x208>)
 800228c:	400b      	ands	r3, r1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d108      	bne.n	80022a4 <HAL_ADC_PollForConversion+0x140>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68d9      	ldr	r1, [r3, #12]
 8002298:	4b34      	ldr	r3, [pc, #208]	; (800236c <HAL_ADC_PollForConversion+0x208>)
 800229a:	400b      	ands	r3, r1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_ADC_PollForConversion+0x140>
 80022a0:	2354      	movs	r3, #84	; 0x54
 80022a2:	e000      	b.n	80022a6 <HAL_ADC_PollForConversion+0x142>
 80022a4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80022a6:	fb02 f303 	mul.w	r3, r2, r3
 80022aa:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80022ac:	e021      	b.n	80022f2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d01a      	beq.n	80022ec <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d007      	beq.n	80022cc <HAL_ADC_PollForConversion+0x168>
 80022bc:	f7ff fdc2 	bl	8001e44 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d20f      	bcs.n	80022ec <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d90b      	bls.n	80022ec <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d8:	f043 0204 	orr.w	r2, r3, #4
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e030      	b.n	800234e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	3301      	adds	r3, #1
 80022f0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d8d9      	bhi.n	80022ae <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f06f 0212 	mvn.w	r2, #18
 8002302:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800231a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800231e:	d115      	bne.n	800234c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002324:	2b00      	cmp	r3, #0
 8002326:	d111      	bne.n	800234c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002344:	f043 0201 	orr.w	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	bd90      	pop	{r4, r7, pc}
 8002356:	bf00      	nop
 8002358:	20000014 	.word	0x20000014
 800235c:	24924924 	.word	0x24924924
 8002360:	00924924 	.word	0x00924924
 8002364:	12492492 	.word	0x12492492
 8002368:	00492492 	.word	0x00492492
 800236c:	00249249 	.word	0x00249249

08002370 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x20>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e0dc      	b.n	8002562 <HAL_ADC_ConfigChannel+0x1da>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b06      	cmp	r3, #6
 80023b6:	d81c      	bhi.n	80023f2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	3b05      	subs	r3, #5
 80023ca:	221f      	movs	r2, #31
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	4019      	ands	r1, r3
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	3b05      	subs	r3, #5
 80023e4:	fa00 f203 	lsl.w	r2, r0, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	635a      	str	r2, [r3, #52]	; 0x34
 80023f0:	e03c      	b.n	800246c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b0c      	cmp	r3, #12
 80023f8:	d81c      	bhi.n	8002434 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	3b23      	subs	r3, #35	; 0x23
 800240c:	221f      	movs	r2, #31
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	4019      	ands	r1, r3
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	3b23      	subs	r3, #35	; 0x23
 8002426:	fa00 f203 	lsl.w	r2, r0, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	631a      	str	r2, [r3, #48]	; 0x30
 8002432:	e01b      	b.n	800246c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	3b41      	subs	r3, #65	; 0x41
 8002446:	221f      	movs	r2, #31
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	4019      	ands	r1, r3
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	3b41      	subs	r3, #65	; 0x41
 8002460:	fa00 f203 	lsl.w	r2, r0, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b09      	cmp	r3, #9
 8002472:	d91c      	bls.n	80024ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68d9      	ldr	r1, [r3, #12]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	4613      	mov	r3, r2
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	4413      	add	r3, r2
 8002484:	3b1e      	subs	r3, #30
 8002486:	2207      	movs	r2, #7
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	4019      	ands	r1, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6898      	ldr	r0, [r3, #8]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4613      	mov	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	3b1e      	subs	r3, #30
 80024a0:	fa00 f203 	lsl.w	r2, r0, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	60da      	str	r2, [r3, #12]
 80024ac:	e019      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6919      	ldr	r1, [r3, #16]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	2207      	movs	r2, #7
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	4019      	ands	r1, r3
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	6898      	ldr	r0, [r3, #8]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4613      	mov	r3, r2
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4413      	add	r3, r2
 80024d6:	fa00 f203 	lsl.w	r2, r0, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b10      	cmp	r3, #16
 80024e8:	d003      	beq.n	80024f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024ee:	2b11      	cmp	r3, #17
 80024f0:	d132      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1d      	ldr	r2, [pc, #116]	; (800256c <HAL_ADC_ConfigChannel+0x1e4>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d125      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d126      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002518:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b10      	cmp	r3, #16
 8002520:	d11a      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002522:	4b13      	ldr	r3, [pc, #76]	; (8002570 <HAL_ADC_ConfigChannel+0x1e8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a13      	ldr	r2, [pc, #76]	; (8002574 <HAL_ADC_ConfigChannel+0x1ec>)
 8002528:	fba2 2303 	umull	r2, r3, r2, r3
 800252c:	0c9a      	lsrs	r2, r3, #18
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002538:	e002      	b.n	8002540 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	3b01      	subs	r3, #1
 800253e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f9      	bne.n	800253a <HAL_ADC_ConfigChannel+0x1b2>
 8002546:	e007      	b.n	8002558 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254c:	f043 0220 	orr.w	r2, r3, #32
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002560:	7bfb      	ldrb	r3, [r7, #15]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	40012400 	.word	0x40012400
 8002570:	20000014 	.word	0x20000014
 8002574:	431bde83 	.word	0x431bde83

08002578 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b01      	cmp	r3, #1
 8002594:	d040      	beq.n	8002618 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0201 	orr.w	r2, r2, #1
 80025a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025a6:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <ADC_Enable+0xac>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a1f      	ldr	r2, [pc, #124]	; (8002628 <ADC_Enable+0xb0>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	0c9b      	lsrs	r3, r3, #18
 80025b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025b4:	e002      	b.n	80025bc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f9      	bne.n	80025b6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025c2:	f7ff fc3f 	bl	8001e44 <HAL_GetTick>
 80025c6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025c8:	e01f      	b.n	800260a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025ca:	f7ff fc3b 	bl	8001e44 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d918      	bls.n	800260a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d011      	beq.n	800260a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ea:	f043 0210 	orr.w	r2, r3, #16
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f6:	f043 0201 	orr.w	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e007      	b.n	800261a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b01      	cmp	r3, #1
 8002616:	d1d8      	bne.n	80025ca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000014 	.word	0x20000014
 8002628:	431bde83 	.word	0x431bde83

0800262c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b01      	cmp	r3, #1
 8002644:	d12e      	bne.n	80026a4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0201 	bic.w	r2, r2, #1
 8002654:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002656:	f7ff fbf5 	bl	8001e44 <HAL_GetTick>
 800265a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800265c:	e01b      	b.n	8002696 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800265e:	f7ff fbf1 	bl	8001e44 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d914      	bls.n	8002696 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b01      	cmp	r3, #1
 8002678:	d10d      	bne.n	8002696 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267e:	f043 0210 	orr.w	r2, r3, #16
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268a:	f043 0201 	orr.w	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e007      	b.n	80026a6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d0dc      	beq.n	800265e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026cc:	4013      	ands	r3, r2
 80026ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026e2:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	60d3      	str	r3, [r2, #12]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026fc:	4b04      	ldr	r3, [pc, #16]	; (8002710 <__NVIC_GetPriorityGrouping+0x18>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	0a1b      	lsrs	r3, r3, #8
 8002702:	f003 0307 	and.w	r3, r3, #7
}
 8002706:	4618      	mov	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	2b00      	cmp	r3, #0
 8002724:	db0b      	blt.n	800273e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	f003 021f 	and.w	r2, r3, #31
 800272c:	4906      	ldr	r1, [pc, #24]	; (8002748 <__NVIC_EnableIRQ+0x34>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	2001      	movs	r0, #1
 8002736:	fa00 f202 	lsl.w	r2, r0, r2
 800273a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	e000e100 	.word	0xe000e100

0800274c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	6039      	str	r1, [r7, #0]
 8002756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	2b00      	cmp	r3, #0
 800275e:	db0a      	blt.n	8002776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	b2da      	uxtb	r2, r3
 8002764:	490c      	ldr	r1, [pc, #48]	; (8002798 <__NVIC_SetPriority+0x4c>)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	0112      	lsls	r2, r2, #4
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	440b      	add	r3, r1
 8002770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002774:	e00a      	b.n	800278c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	b2da      	uxtb	r2, r3
 800277a:	4908      	ldr	r1, [pc, #32]	; (800279c <__NVIC_SetPriority+0x50>)
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	3b04      	subs	r3, #4
 8002784:	0112      	lsls	r2, r2, #4
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	440b      	add	r3, r1
 800278a:	761a      	strb	r2, [r3, #24]
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000e100 	.word	0xe000e100
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b089      	sub	sp, #36	; 0x24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f1c3 0307 	rsb	r3, r3, #7
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	bf28      	it	cs
 80027be:	2304      	movcs	r3, #4
 80027c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3304      	adds	r3, #4
 80027c6:	2b06      	cmp	r3, #6
 80027c8:	d902      	bls.n	80027d0 <NVIC_EncodePriority+0x30>
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3b03      	subs	r3, #3
 80027ce:	e000      	b.n	80027d2 <NVIC_EncodePriority+0x32>
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d4:	f04f 32ff 	mov.w	r2, #4294967295
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43da      	mvns	r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	401a      	ands	r2, r3
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	fa01 f303 	lsl.w	r3, r1, r3
 80027f2:	43d9      	mvns	r1, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	4313      	orrs	r3, r2
         );
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3724      	adds	r7, #36	; 0x24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff4f 	bl	80026b0 <__NVIC_SetPriorityGrouping>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800282c:	f7ff ff64 	bl	80026f8 <__NVIC_GetPriorityGrouping>
 8002830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	6978      	ldr	r0, [r7, #20]
 8002838:	f7ff ffb2 	bl	80027a0 <NVIC_EncodePriority>
 800283c:	4602      	mov	r2, r0
 800283e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff81 	bl	800274c <__NVIC_SetPriority>
}
 800284a:	bf00      	nop
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff57 	bl	8002714 <__NVIC_EnableIRQ>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002870:	b480      	push	{r7}
 8002872:	b08b      	sub	sp, #44	; 0x2c
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800287a:	2300      	movs	r3, #0
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800287e:	2300      	movs	r3, #0
 8002880:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002882:	e127      	b.n	8002ad4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002884:	2201      	movs	r2, #1
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	429a      	cmp	r2, r3
 800289e:	f040 8116 	bne.w	8002ace <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b12      	cmp	r3, #18
 80028a8:	d034      	beq.n	8002914 <HAL_GPIO_Init+0xa4>
 80028aa:	2b12      	cmp	r3, #18
 80028ac:	d80d      	bhi.n	80028ca <HAL_GPIO_Init+0x5a>
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d02b      	beq.n	800290a <HAL_GPIO_Init+0x9a>
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d804      	bhi.n	80028c0 <HAL_GPIO_Init+0x50>
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d031      	beq.n	800291e <HAL_GPIO_Init+0xae>
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d01c      	beq.n	80028f8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028be:	e048      	b.n	8002952 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d043      	beq.n	800294c <HAL_GPIO_Init+0xdc>
 80028c4:	2b11      	cmp	r3, #17
 80028c6:	d01b      	beq.n	8002900 <HAL_GPIO_Init+0x90>
          break;
 80028c8:	e043      	b.n	8002952 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028ca:	4a89      	ldr	r2, [pc, #548]	; (8002af0 <HAL_GPIO_Init+0x280>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d026      	beq.n	800291e <HAL_GPIO_Init+0xae>
 80028d0:	4a87      	ldr	r2, [pc, #540]	; (8002af0 <HAL_GPIO_Init+0x280>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d806      	bhi.n	80028e4 <HAL_GPIO_Init+0x74>
 80028d6:	4a87      	ldr	r2, [pc, #540]	; (8002af4 <HAL_GPIO_Init+0x284>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d020      	beq.n	800291e <HAL_GPIO_Init+0xae>
 80028dc:	4a86      	ldr	r2, [pc, #536]	; (8002af8 <HAL_GPIO_Init+0x288>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d01d      	beq.n	800291e <HAL_GPIO_Init+0xae>
          break;
 80028e2:	e036      	b.n	8002952 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028e4:	4a85      	ldr	r2, [pc, #532]	; (8002afc <HAL_GPIO_Init+0x28c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d019      	beq.n	800291e <HAL_GPIO_Init+0xae>
 80028ea:	4a85      	ldr	r2, [pc, #532]	; (8002b00 <HAL_GPIO_Init+0x290>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d016      	beq.n	800291e <HAL_GPIO_Init+0xae>
 80028f0:	4a84      	ldr	r2, [pc, #528]	; (8002b04 <HAL_GPIO_Init+0x294>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_GPIO_Init+0xae>
          break;
 80028f6:	e02c      	b.n	8002952 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	623b      	str	r3, [r7, #32]
          break;
 80028fe:	e028      	b.n	8002952 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	3304      	adds	r3, #4
 8002906:	623b      	str	r3, [r7, #32]
          break;
 8002908:	e023      	b.n	8002952 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	3308      	adds	r3, #8
 8002910:	623b      	str	r3, [r7, #32]
          break;
 8002912:	e01e      	b.n	8002952 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	330c      	adds	r3, #12
 800291a:	623b      	str	r3, [r7, #32]
          break;
 800291c:	e019      	b.n	8002952 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d102      	bne.n	800292c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002926:	2304      	movs	r3, #4
 8002928:	623b      	str	r3, [r7, #32]
          break;
 800292a:	e012      	b.n	8002952 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d105      	bne.n	8002940 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002934:	2308      	movs	r3, #8
 8002936:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69fa      	ldr	r2, [r7, #28]
 800293c:	611a      	str	r2, [r3, #16]
          break;
 800293e:	e008      	b.n	8002952 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002940:	2308      	movs	r3, #8
 8002942:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	615a      	str	r2, [r3, #20]
          break;
 800294a:	e002      	b.n	8002952 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800294c:	2300      	movs	r3, #0
 800294e:	623b      	str	r3, [r7, #32]
          break;
 8002950:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	2bff      	cmp	r3, #255	; 0xff
 8002956:	d801      	bhi.n	800295c <HAL_GPIO_Init+0xec>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	e001      	b.n	8002960 <HAL_GPIO_Init+0xf0>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3304      	adds	r3, #4
 8002960:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	2bff      	cmp	r3, #255	; 0xff
 8002966:	d802      	bhi.n	800296e <HAL_GPIO_Init+0xfe>
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	e002      	b.n	8002974 <HAL_GPIO_Init+0x104>
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	3b08      	subs	r3, #8
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	210f      	movs	r1, #15
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	fa01 f303 	lsl.w	r3, r1, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	401a      	ands	r2, r3
 8002986:	6a39      	ldr	r1, [r7, #32]
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	431a      	orrs	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8096 	beq.w	8002ace <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029a2:	4b59      	ldr	r3, [pc, #356]	; (8002b08 <HAL_GPIO_Init+0x298>)
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	4a58      	ldr	r2, [pc, #352]	; (8002b08 <HAL_GPIO_Init+0x298>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6193      	str	r3, [r2, #24]
 80029ae:	4b56      	ldr	r3, [pc, #344]	; (8002b08 <HAL_GPIO_Init+0x298>)
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029ba:	4a54      	ldr	r2, [pc, #336]	; (8002b0c <HAL_GPIO_Init+0x29c>)
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	089b      	lsrs	r3, r3, #2
 80029c0:	3302      	adds	r3, #2
 80029c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	220f      	movs	r2, #15
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4013      	ands	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4b      	ldr	r2, [pc, #300]	; (8002b10 <HAL_GPIO_Init+0x2a0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <HAL_GPIO_Init+0x19e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a4a      	ldr	r2, [pc, #296]	; (8002b14 <HAL_GPIO_Init+0x2a4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00d      	beq.n	8002a0a <HAL_GPIO_Init+0x19a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a49      	ldr	r2, [pc, #292]	; (8002b18 <HAL_GPIO_Init+0x2a8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d007      	beq.n	8002a06 <HAL_GPIO_Init+0x196>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a48      	ldr	r2, [pc, #288]	; (8002b1c <HAL_GPIO_Init+0x2ac>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d101      	bne.n	8002a02 <HAL_GPIO_Init+0x192>
 80029fe:	2303      	movs	r3, #3
 8002a00:	e006      	b.n	8002a10 <HAL_GPIO_Init+0x1a0>
 8002a02:	2304      	movs	r3, #4
 8002a04:	e004      	b.n	8002a10 <HAL_GPIO_Init+0x1a0>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e002      	b.n	8002a10 <HAL_GPIO_Init+0x1a0>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_GPIO_Init+0x1a0>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a12:	f002 0203 	and.w	r2, r2, #3
 8002a16:	0092      	lsls	r2, r2, #2
 8002a18:	4093      	lsls	r3, r2
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a20:	493a      	ldr	r1, [pc, #232]	; (8002b0c <HAL_GPIO_Init+0x29c>)
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	089b      	lsrs	r3, r3, #2
 8002a26:	3302      	adds	r3, #2
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d006      	beq.n	8002a48 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a3a:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <HAL_GPIO_Init+0x2b0>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	4938      	ldr	r1, [pc, #224]	; (8002b20 <HAL_GPIO_Init+0x2b0>)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]
 8002a46:	e006      	b.n	8002a56 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a48:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <HAL_GPIO_Init+0x2b0>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	4933      	ldr	r1, [pc, #204]	; (8002b20 <HAL_GPIO_Init+0x2b0>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d006      	beq.n	8002a70 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a62:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <HAL_GPIO_Init+0x2b0>)
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	492e      	ldr	r1, [pc, #184]	; (8002b20 <HAL_GPIO_Init+0x2b0>)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	604b      	str	r3, [r1, #4]
 8002a6e:	e006      	b.n	8002a7e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a70:	4b2b      	ldr	r3, [pc, #172]	; (8002b20 <HAL_GPIO_Init+0x2b0>)
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	43db      	mvns	r3, r3
 8002a78:	4929      	ldr	r1, [pc, #164]	; (8002b20 <HAL_GPIO_Init+0x2b0>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d006      	beq.n	8002a98 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a8a:	4b25      	ldr	r3, [pc, #148]	; (8002b20 <HAL_GPIO_Init+0x2b0>)
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	4924      	ldr	r1, [pc, #144]	; (8002b20 <HAL_GPIO_Init+0x2b0>)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
 8002a96:	e006      	b.n	8002aa6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a98:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <HAL_GPIO_Init+0x2b0>)
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	491f      	ldr	r1, [pc, #124]	; (8002b20 <HAL_GPIO_Init+0x2b0>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d006      	beq.n	8002ac0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ab2:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <HAL_GPIO_Init+0x2b0>)
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	491a      	ldr	r1, [pc, #104]	; (8002b20 <HAL_GPIO_Init+0x2b0>)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60cb      	str	r3, [r1, #12]
 8002abe:	e006      	b.n	8002ace <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ac0:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <HAL_GPIO_Init+0x2b0>)
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	4915      	ldr	r1, [pc, #84]	; (8002b20 <HAL_GPIO_Init+0x2b0>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	fa22 f303 	lsr.w	r3, r2, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f47f aed0 	bne.w	8002884 <HAL_GPIO_Init+0x14>
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	372c      	adds	r7, #44	; 0x2c
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	10210000 	.word	0x10210000
 8002af4:	10110000 	.word	0x10110000
 8002af8:	10120000 	.word	0x10120000
 8002afc:	10310000 	.word	0x10310000
 8002b00:	10320000 	.word	0x10320000
 8002b04:	10220000 	.word	0x10220000
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40010000 	.word	0x40010000
 8002b10:	40010800 	.word	0x40010800
 8002b14:	40010c00 	.word	0x40010c00
 8002b18:	40011000 	.word	0x40011000
 8002b1c:	40011400 	.word	0x40011400
 8002b20:	40010400 	.word	0x40010400

08002b24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	887b      	ldrh	r3, [r7, #2]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
 8002b40:	e001      	b.n	8002b46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	807b      	strh	r3, [r7, #2]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b62:	787b      	ldrb	r3, [r7, #1]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b68:	887a      	ldrh	r2, [r7, #2]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b6e:	e003      	b.n	8002b78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b70:	887b      	ldrh	r3, [r7, #2]
 8002b72:	041a      	lsls	r2, r3, #16
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	611a      	str	r2, [r3, #16]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr
	...

08002b84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e26c      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 8087 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ba4:	4b92      	ldr	r3, [pc, #584]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d00c      	beq.n	8002bca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bb0:	4b8f      	ldr	r3, [pc, #572]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d112      	bne.n	8002be2 <HAL_RCC_OscConfig+0x5e>
 8002bbc:	4b8c      	ldr	r3, [pc, #560]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc8:	d10b      	bne.n	8002be2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bca:	4b89      	ldr	r3, [pc, #548]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d06c      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x12c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d168      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e246      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bea:	d106      	bne.n	8002bfa <HAL_RCC_OscConfig+0x76>
 8002bec:	4b80      	ldr	r3, [pc, #512]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a7f      	ldr	r2, [pc, #508]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	e02e      	b.n	8002c58 <HAL_RCC_OscConfig+0xd4>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCC_OscConfig+0x98>
 8002c02:	4b7b      	ldr	r3, [pc, #492]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a7a      	ldr	r2, [pc, #488]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	4b78      	ldr	r3, [pc, #480]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a77      	ldr	r2, [pc, #476]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e01d      	b.n	8002c58 <HAL_RCC_OscConfig+0xd4>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0xbc>
 8002c26:	4b72      	ldr	r3, [pc, #456]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a71      	ldr	r2, [pc, #452]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b6f      	ldr	r3, [pc, #444]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a6e      	ldr	r2, [pc, #440]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCC_OscConfig+0xd4>
 8002c40:	4b6b      	ldr	r3, [pc, #428]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a6a      	ldr	r2, [pc, #424]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	4b68      	ldr	r3, [pc, #416]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a67      	ldr	r2, [pc, #412]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d013      	beq.n	8002c88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7ff f8f0 	bl	8001e44 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c68:	f7ff f8ec 	bl	8001e44 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e1fa      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	4b5d      	ldr	r3, [pc, #372]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0xe4>
 8002c86:	e014      	b.n	8002cb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7ff f8dc 	bl	8001e44 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7ff f8d8 	bl	8001e44 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e1e6      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca2:	4b53      	ldr	r3, [pc, #332]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x10c>
 8002cae:	e000      	b.n	8002cb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d063      	beq.n	8002d86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cbe:	4b4c      	ldr	r3, [pc, #304]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00b      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cca:	4b49      	ldr	r3, [pc, #292]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d11c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x18c>
 8002cd6:	4b46      	ldr	r3, [pc, #280]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d116      	bne.n	8002d10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce2:	4b43      	ldr	r3, [pc, #268]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <HAL_RCC_OscConfig+0x176>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d001      	beq.n	8002cfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e1ba      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfa:	4b3d      	ldr	r3, [pc, #244]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4939      	ldr	r1, [pc, #228]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0e:	e03a      	b.n	8002d86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d020      	beq.n	8002d5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d18:	4b36      	ldr	r3, [pc, #216]	; (8002df4 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1e:	f7ff f891 	bl	8001e44 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d26:	f7ff f88d 	bl	8001e44 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e19b      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d38:	4b2d      	ldr	r3, [pc, #180]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d44:	4b2a      	ldr	r3, [pc, #168]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4927      	ldr	r1, [pc, #156]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]
 8002d58:	e015      	b.n	8002d86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5a:	4b26      	ldr	r3, [pc, #152]	; (8002df4 <HAL_RCC_OscConfig+0x270>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7ff f870 	bl	8001e44 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d68:	f7ff f86c 	bl	8001e44 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e17a      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d03a      	beq.n	8002e08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d019      	beq.n	8002dce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9a:	4b17      	ldr	r3, [pc, #92]	; (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da0:	f7ff f850 	bl	8001e44 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da8:	f7ff f84c 	bl	8001e44 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e15a      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	f000 fb0a 	bl	80033e0 <RCC_Delay>
 8002dcc:	e01c      	b.n	8002e08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dce:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd4:	f7ff f836 	bl	8001e44 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dda:	e00f      	b.n	8002dfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ddc:	f7ff f832 	bl	8001e44 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d908      	bls.n	8002dfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e140      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
 8002df4:	42420000 	.word	0x42420000
 8002df8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	4b9e      	ldr	r3, [pc, #632]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1e9      	bne.n	8002ddc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80a6 	beq.w	8002f62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1a:	4b97      	ldr	r3, [pc, #604]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10d      	bne.n	8002e42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e26:	4b94      	ldr	r3, [pc, #592]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	4a93      	ldr	r2, [pc, #588]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e30:	61d3      	str	r3, [r2, #28]
 8002e32:	4b91      	ldr	r3, [pc, #580]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e42:	4b8e      	ldr	r3, [pc, #568]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d118      	bne.n	8002e80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e4e:	4b8b      	ldr	r3, [pc, #556]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a8a      	ldr	r2, [pc, #552]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5a:	f7fe fff3 	bl	8001e44 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e62:	f7fe ffef 	bl	8001e44 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b64      	cmp	r3, #100	; 0x64
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e0fd      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	4b81      	ldr	r3, [pc, #516]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d106      	bne.n	8002e96 <HAL_RCC_OscConfig+0x312>
 8002e88:	4b7b      	ldr	r3, [pc, #492]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4a7a      	ldr	r2, [pc, #488]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6213      	str	r3, [r2, #32]
 8002e94:	e02d      	b.n	8002ef2 <HAL_RCC_OscConfig+0x36e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x334>
 8002e9e:	4b76      	ldr	r3, [pc, #472]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	4a75      	ldr	r2, [pc, #468]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	6213      	str	r3, [r2, #32]
 8002eaa:	4b73      	ldr	r3, [pc, #460]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	4a72      	ldr	r2, [pc, #456]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002eb0:	f023 0304 	bic.w	r3, r3, #4
 8002eb4:	6213      	str	r3, [r2, #32]
 8002eb6:	e01c      	b.n	8002ef2 <HAL_RCC_OscConfig+0x36e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b05      	cmp	r3, #5
 8002ebe:	d10c      	bne.n	8002eda <HAL_RCC_OscConfig+0x356>
 8002ec0:	4b6d      	ldr	r3, [pc, #436]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4a6c      	ldr	r2, [pc, #432]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ec6:	f043 0304 	orr.w	r3, r3, #4
 8002eca:	6213      	str	r3, [r2, #32]
 8002ecc:	4b6a      	ldr	r3, [pc, #424]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	4a69      	ldr	r2, [pc, #420]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6213      	str	r3, [r2, #32]
 8002ed8:	e00b      	b.n	8002ef2 <HAL_RCC_OscConfig+0x36e>
 8002eda:	4b67      	ldr	r3, [pc, #412]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	4a66      	ldr	r2, [pc, #408]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	6213      	str	r3, [r2, #32]
 8002ee6:	4b64      	ldr	r3, [pc, #400]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	4a63      	ldr	r2, [pc, #396]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002eec:	f023 0304 	bic.w	r3, r3, #4
 8002ef0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d015      	beq.n	8002f26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efa:	f7fe ffa3 	bl	8001e44 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f00:	e00a      	b.n	8002f18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f7fe ff9f 	bl	8001e44 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e0ab      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f18:	4b57      	ldr	r3, [pc, #348]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0ee      	beq.n	8002f02 <HAL_RCC_OscConfig+0x37e>
 8002f24:	e014      	b.n	8002f50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f26:	f7fe ff8d 	bl	8001e44 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2e:	f7fe ff89 	bl	8001e44 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e095      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f44:	4b4c      	ldr	r3, [pc, #304]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1ee      	bne.n	8002f2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d105      	bne.n	8002f62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f56:	4b48      	ldr	r3, [pc, #288]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	4a47      	ldr	r2, [pc, #284]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 8081 	beq.w	800306e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f6c:	4b42      	ldr	r3, [pc, #264]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d061      	beq.n	800303c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d146      	bne.n	800300e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f80:	4b3f      	ldr	r3, [pc, #252]	; (8003080 <HAL_RCC_OscConfig+0x4fc>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f86:	f7fe ff5d 	bl	8001e44 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8e:	f7fe ff59 	bl	8001e44 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e067      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa0:	4b35      	ldr	r3, [pc, #212]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f0      	bne.n	8002f8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb4:	d108      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fb6:	4b30      	ldr	r3, [pc, #192]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	492d      	ldr	r1, [pc, #180]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a19      	ldr	r1, [r3, #32]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	4927      	ldr	r1, [pc, #156]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe0:	4b27      	ldr	r3, [pc, #156]	; (8003080 <HAL_RCC_OscConfig+0x4fc>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe6:	f7fe ff2d 	bl	8001e44 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fee:	f7fe ff29 	bl	8001e44 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e037      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003000:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x46a>
 800300c:	e02f      	b.n	800306e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300e:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <HAL_RCC_OscConfig+0x4fc>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7fe ff16 	bl	8001e44 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301c:	f7fe ff12 	bl	8001e44 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e020      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800302e:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x498>
 800303a:	e018      	b.n	800306e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e013      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	429a      	cmp	r2, r3
 800305a:	d106      	bne.n	800306a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003066:	429a      	cmp	r2, r3
 8003068:	d001      	beq.n	800306e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000
 800307c:	40007000 	.word	0x40007000
 8003080:	42420060 	.word	0x42420060

08003084 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0d0      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003098:	4b6a      	ldr	r3, [pc, #424]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d910      	bls.n	80030c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b67      	ldr	r3, [pc, #412]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 0207 	bic.w	r2, r3, #7
 80030ae:	4965      	ldr	r1, [pc, #404]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b63      	ldr	r3, [pc, #396]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0b8      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d020      	beq.n	8003116 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e0:	4b59      	ldr	r3, [pc, #356]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4a58      	ldr	r2, [pc, #352]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f8:	4b53      	ldr	r3, [pc, #332]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4a52      	ldr	r2, [pc, #328]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003102:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003104:	4b50      	ldr	r3, [pc, #320]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	494d      	ldr	r1, [pc, #308]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	4313      	orrs	r3, r2
 8003114:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d040      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	4b47      	ldr	r3, [pc, #284]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d115      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e07f      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003142:	4b41      	ldr	r3, [pc, #260]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e073      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003152:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e06b      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003162:	4b39      	ldr	r3, [pc, #228]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f023 0203 	bic.w	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4936      	ldr	r1, [pc, #216]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	4313      	orrs	r3, r2
 8003172:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003174:	f7fe fe66 	bl	8001e44 <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	e00a      	b.n	8003192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317c:	f7fe fe62 	bl	8001e44 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e053      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 020c 	and.w	r2, r3, #12
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d1eb      	bne.n	800317c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031a4:	4b27      	ldr	r3, [pc, #156]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d210      	bcs.n	80031d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b24      	ldr	r3, [pc, #144]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 0207 	bic.w	r2, r3, #7
 80031ba:	4922      	ldr	r1, [pc, #136]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e032      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e0:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4916      	ldr	r1, [pc, #88]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031fe:	4b12      	ldr	r3, [pc, #72]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	490e      	ldr	r1, [pc, #56]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 800320e:	4313      	orrs	r3, r2
 8003210:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003212:	f000 f821 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 8003216:	4601      	mov	r1, r0
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	4a0a      	ldr	r2, [pc, #40]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003224:	5cd3      	ldrb	r3, [r2, r3]
 8003226:	fa21 f303 	lsr.w	r3, r1, r3
 800322a:	4a09      	ldr	r2, [pc, #36]	; (8003250 <HAL_RCC_ClockConfig+0x1cc>)
 800322c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800322e:	4b09      	ldr	r3, [pc, #36]	; (8003254 <HAL_RCC_ClockConfig+0x1d0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe fd04 	bl	8001c40 <HAL_InitTick>

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40022000 	.word	0x40022000
 8003248:	40021000 	.word	0x40021000
 800324c:	08006dbc 	.word	0x08006dbc
 8003250:	20000014 	.word	0x20000014
 8003254:	20000018 	.word	0x20000018

08003258 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003258:	b490      	push	{r4, r7}
 800325a:	b08a      	sub	sp, #40	; 0x28
 800325c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800325e:	4b2a      	ldr	r3, [pc, #168]	; (8003308 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003260:	1d3c      	adds	r4, r7, #4
 8003262:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003264:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003268:	4b28      	ldr	r3, [pc, #160]	; (800330c <HAL_RCC_GetSysClockFreq+0xb4>)
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	2300      	movs	r3, #0
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	2300      	movs	r3, #0
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003282:	4b23      	ldr	r3, [pc, #140]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 030c 	and.w	r3, r3, #12
 800328e:	2b04      	cmp	r3, #4
 8003290:	d002      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x40>
 8003292:	2b08      	cmp	r3, #8
 8003294:	d003      	beq.n	800329e <HAL_RCC_GetSysClockFreq+0x46>
 8003296:	e02d      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003298:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <HAL_RCC_GetSysClockFreq+0xbc>)
 800329a:	623b      	str	r3, [r7, #32]
      break;
 800329c:	e02d      	b.n	80032fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	0c9b      	lsrs	r3, r3, #18
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032aa:	4413      	add	r3, r2
 80032ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032bc:	4b14      	ldr	r3, [pc, #80]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	0c5b      	lsrs	r3, r3, #17
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032ca:	4413      	add	r3, r2
 80032cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	4a0f      	ldr	r2, [pc, #60]	; (8003314 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032d6:	fb02 f203 	mul.w	r2, r2, r3
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
 80032e2:	e004      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	4a0c      	ldr	r2, [pc, #48]	; (8003318 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	623b      	str	r3, [r7, #32]
      break;
 80032f2:	e002      	b.n	80032fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032f4:	4b07      	ldr	r3, [pc, #28]	; (8003314 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032f6:	623b      	str	r3, [r7, #32]
      break;
 80032f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032fa:	6a3b      	ldr	r3, [r7, #32]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3728      	adds	r7, #40	; 0x28
 8003300:	46bd      	mov	sp, r7
 8003302:	bc90      	pop	{r4, r7}
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	08006d8c 	.word	0x08006d8c
 800330c:	08006d9c 	.word	0x08006d9c
 8003310:	40021000 	.word	0x40021000
 8003314:	007a1200 	.word	0x007a1200
 8003318:	003d0900 	.word	0x003d0900

0800331c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003320:	4b02      	ldr	r3, [pc, #8]	; (800332c <HAL_RCC_GetHCLKFreq+0x10>)
 8003322:	681b      	ldr	r3, [r3, #0]
}
 8003324:	4618      	mov	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr
 800332c:	20000014 	.word	0x20000014

08003330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003334:	f7ff fff2 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8003338:	4601      	mov	r1, r0
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4a03      	ldr	r2, [pc, #12]	; (8003354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003346:	5cd3      	ldrb	r3, [r2, r3]
 8003348:	fa21 f303 	lsr.w	r3, r1, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000
 8003354:	08006dcc 	.word	0x08006dcc

08003358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800335c:	f7ff ffde 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8003360:	4601      	mov	r1, r0
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	0adb      	lsrs	r3, r3, #11
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	4a03      	ldr	r2, [pc, #12]	; (800337c <HAL_RCC_GetPCLK2Freq+0x24>)
 800336e:	5cd3      	ldrb	r3, [r2, r3]
 8003370:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000
 800337c:	08006dcc 	.word	0x08006dcc

08003380 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	220f      	movs	r2, #15
 800338e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003390:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <HAL_RCC_GetClockConfig+0x58>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 0203 	and.w	r2, r3, #3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800339c:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <HAL_RCC_GetClockConfig+0x58>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_RCC_GetClockConfig+0x58>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <HAL_RCC_GetClockConfig+0x58>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	08db      	lsrs	r3, r3, #3
 80033ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033c2:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_RCC_GetClockConfig+0x5c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0207 	and.w	r2, r3, #7
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40022000 	.word	0x40022000

080033e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <RCC_Delay+0x34>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a0a      	ldr	r2, [pc, #40]	; (8003418 <RCC_Delay+0x38>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	0a5b      	lsrs	r3, r3, #9
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	fb02 f303 	mul.w	r3, r2, r3
 80033fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033fc:	bf00      	nop
  }
  while (Delay --);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1e5a      	subs	r2, r3, #1
 8003402:	60fa      	str	r2, [r7, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f9      	bne.n	80033fc <RCC_Delay+0x1c>
}
 8003408:	bf00      	nop
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	20000014 	.word	0x20000014
 8003418:	10624dd3 	.word	0x10624dd3

0800341c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d07d      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003438:	2300      	movs	r3, #0
 800343a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800343c:	4b4f      	ldr	r3, [pc, #316]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10d      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003448:	4b4c      	ldr	r3, [pc, #304]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	4a4b      	ldr	r2, [pc, #300]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003452:	61d3      	str	r3, [r2, #28]
 8003454:	4b49      	ldr	r3, [pc, #292]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003460:	2301      	movs	r3, #1
 8003462:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003464:	4b46      	ldr	r3, [pc, #280]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d118      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003470:	4b43      	ldr	r3, [pc, #268]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a42      	ldr	r2, [pc, #264]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800347c:	f7fe fce2 	bl	8001e44 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003482:	e008      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003484:	f7fe fcde 	bl	8001e44 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	; 0x64
 8003490:	d901      	bls.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e06d      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003496:	4b3a      	ldr	r3, [pc, #232]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034a2:	4b36      	ldr	r3, [pc, #216]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d02e      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d027      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034c0:	4b2e      	ldr	r3, [pc, #184]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ca:	4b2e      	ldr	r3, [pc, #184]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034d0:	4b2c      	ldr	r3, [pc, #176]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034d6:	4a29      	ldr	r2, [pc, #164]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d014      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7fe fcad 	bl	8001e44 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ec:	e00a      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ee:	f7fe fca9 	bl	8001e44 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d901      	bls.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e036      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003504:	4b1d      	ldr	r3, [pc, #116]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0ee      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003510:	4b1a      	ldr	r3, [pc, #104]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	4917      	ldr	r1, [pc, #92]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351e:	4313      	orrs	r3, r2
 8003520:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003522:	7dfb      	ldrb	r3, [r7, #23]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d105      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003528:	4b14      	ldr	r3, [pc, #80]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	4a13      	ldr	r2, [pc, #76]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003532:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003540:	4b0e      	ldr	r3, [pc, #56]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	490b      	ldr	r1, [pc, #44]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800354e:	4313      	orrs	r3, r2
 8003550:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	2b00      	cmp	r3, #0
 800355c:	d008      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800355e:	4b07      	ldr	r3, [pc, #28]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	4904      	ldr	r1, [pc, #16]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40021000 	.word	0x40021000
 8003580:	40007000 	.word	0x40007000
 8003584:	42420440 	.word	0x42420440

08003588 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	b08d      	sub	sp, #52	; 0x34
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003590:	4b55      	ldr	r3, [pc, #340]	; (80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003592:	f107 040c 	add.w	r4, r7, #12
 8003596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003598:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800359c:	4b53      	ldr	r3, [pc, #332]	; (80036ec <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
 80035a6:	2300      	movs	r3, #0
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035aa:	2300      	movs	r3, #0
 80035ac:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	2300      	movs	r3, #0
 80035b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d07f      	beq.n	80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d002      	beq.n	80035c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d048      	beq.n	8003656 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80035c4:	e08b      	b.n	80036de <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80035c6:	4b4a      	ldr	r3, [pc, #296]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80035cc:	4b48      	ldr	r3, [pc, #288]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d07f      	beq.n	80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	0c9b      	lsrs	r3, r3, #18
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80035e4:	4413      	add	r3, r2
 80035e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035ea:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d018      	beq.n	8003628 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035f6:	4b3e      	ldr	r3, [pc, #248]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	0c5b      	lsrs	r3, r3, #17
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003604:	4413      	add	r3, r2
 8003606:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00d      	beq.n	8003632 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003616:	4a37      	ldr	r2, [pc, #220]	; (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	fbb2 f2f3 	udiv	r2, r2, r3
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	fb02 f303 	mul.w	r3, r2, r3
 8003624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003626:	e004      	b.n	8003632 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	4a33      	ldr	r2, [pc, #204]	; (80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800362c:	fb02 f303 	mul.w	r3, r2, r3
 8003630:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003632:	4b2f      	ldr	r3, [pc, #188]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800363e:	d102      	bne.n	8003646 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003642:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003644:	e048      	b.n	80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	4a2c      	ldr	r2, [pc, #176]	; (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800364c:	fba2 2303 	umull	r2, r3, r2, r3
 8003650:	085b      	lsrs	r3, r3, #1
 8003652:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003654:	e040      	b.n	80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003656:	4b26      	ldr	r3, [pc, #152]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003666:	d108      	bne.n	800367a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28
 8003678:	e01f      	b.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003684:	d109      	bne.n	800369a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003686:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003692:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28
 8003698:	e00f      	b.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036a4:	d11a      	bne.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80036a6:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d014      	beq.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80036b2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80036b6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036b8:	e010      	b.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80036ba:	e00f      	b.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80036bc:	f7ff fe4c 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	0b9b      	lsrs	r3, r3, #14
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	3301      	adds	r3, #1
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036d6:	e002      	b.n	80036de <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80036d8:	bf00      	nop
 80036da:	e000      	b.n	80036de <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80036dc:	bf00      	nop
    }
  }
  return (frequency);
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3734      	adds	r7, #52	; 0x34
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd90      	pop	{r4, r7, pc}
 80036e8:	08006da0 	.word	0x08006da0
 80036ec:	08006db0 	.word	0x08006db0
 80036f0:	40021000 	.word	0x40021000
 80036f4:	007a1200 	.word	0x007a1200
 80036f8:	003d0900 	.word	0x003d0900
 80036fc:	aaaaaaab 	.word	0xaaaaaaab

08003700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e041      	b.n	8003796 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f839 	bl	800379e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3304      	adds	r3, #4
 800373c:	4619      	mov	r1, r3
 800373e:	4610      	mov	r0, r2
 8003740:	f000 fb64 	bl	8003e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d001      	beq.n	80037c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e03a      	b.n	800383e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a18      	ldr	r2, [pc, #96]	; (8003848 <HAL_TIM_Base_Start_IT+0x98>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00e      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0x58>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f2:	d009      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0x58>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a14      	ldr	r2, [pc, #80]	; (800384c <HAL_TIM_Base_Start_IT+0x9c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d004      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0x58>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a13      	ldr	r2, [pc, #76]	; (8003850 <HAL_TIM_Base_Start_IT+0xa0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d111      	bne.n	800382c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b06      	cmp	r3, #6
 8003818:	d010      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0201 	orr.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800382a:	e007      	b.n	800383c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	40012c00 	.word	0x40012c00
 800384c:	40000400 	.word	0x40000400
 8003850:	40000800 	.word	0x40000800

08003854 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e041      	b.n	80038ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fe f942 	bl	8001b04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f000 faba 	bl	8003e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d109      	bne.n	8003918 <HAL_TIM_PWM_Start+0x24>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	bf14      	ite	ne
 8003910:	2301      	movne	r3, #1
 8003912:	2300      	moveq	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	e022      	b.n	800395e <HAL_TIM_PWM_Start+0x6a>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b04      	cmp	r3, #4
 800391c:	d109      	bne.n	8003932 <HAL_TIM_PWM_Start+0x3e>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b01      	cmp	r3, #1
 8003928:	bf14      	ite	ne
 800392a:	2301      	movne	r3, #1
 800392c:	2300      	moveq	r3, #0
 800392e:	b2db      	uxtb	r3, r3
 8003930:	e015      	b.n	800395e <HAL_TIM_PWM_Start+0x6a>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b08      	cmp	r3, #8
 8003936:	d109      	bne.n	800394c <HAL_TIM_PWM_Start+0x58>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b01      	cmp	r3, #1
 8003942:	bf14      	ite	ne
 8003944:	2301      	movne	r3, #1
 8003946:	2300      	moveq	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	e008      	b.n	800395e <HAL_TIM_PWM_Start+0x6a>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b01      	cmp	r3, #1
 8003956:	bf14      	ite	ne
 8003958:	2301      	movne	r3, #1
 800395a:	2300      	moveq	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e05e      	b.n	8003a24 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d104      	bne.n	8003976 <HAL_TIM_PWM_Start+0x82>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003974:	e013      	b.n	800399e <HAL_TIM_PWM_Start+0xaa>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b04      	cmp	r3, #4
 800397a:	d104      	bne.n	8003986 <HAL_TIM_PWM_Start+0x92>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003984:	e00b      	b.n	800399e <HAL_TIM_PWM_Start+0xaa>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d104      	bne.n	8003996 <HAL_TIM_PWM_Start+0xa2>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003994:	e003      	b.n	800399e <HAL_TIM_PWM_Start+0xaa>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2202      	movs	r2, #2
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2201      	movs	r2, #1
 80039a4:	6839      	ldr	r1, [r7, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fc1a 	bl	80041e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1e      	ldr	r2, [pc, #120]	; (8003a2c <HAL_TIM_PWM_Start+0x138>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d107      	bne.n	80039c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a18      	ldr	r2, [pc, #96]	; (8003a2c <HAL_TIM_PWM_Start+0x138>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d00e      	beq.n	80039ee <HAL_TIM_PWM_Start+0xfa>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d8:	d009      	beq.n	80039ee <HAL_TIM_PWM_Start+0xfa>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a14      	ldr	r2, [pc, #80]	; (8003a30 <HAL_TIM_PWM_Start+0x13c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d004      	beq.n	80039ee <HAL_TIM_PWM_Start+0xfa>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a12      	ldr	r2, [pc, #72]	; (8003a34 <HAL_TIM_PWM_Start+0x140>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d111      	bne.n	8003a12 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b06      	cmp	r3, #6
 80039fe:	d010      	beq.n	8003a22 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a10:	e007      	b.n	8003a22 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f042 0201 	orr.w	r2, r2, #1
 8003a20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40012c00 	.word	0x40012c00
 8003a30:	40000400 	.word	0x40000400
 8003a34:	40000800 	.word	0x40000800

08003a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d122      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d11b      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0202 	mvn.w	r2, #2
 8003a64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f9ab 	bl	8003dd6 <HAL_TIM_IC_CaptureCallback>
 8003a80:	e005      	b.n	8003a8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f99e 	bl	8003dc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f9ad 	bl	8003de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d122      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d11b      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0204 	mvn.w	r2, #4
 8003ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2202      	movs	r2, #2
 8003abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f981 	bl	8003dd6 <HAL_TIM_IC_CaptureCallback>
 8003ad4:	e005      	b.n	8003ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f974 	bl	8003dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f983 	bl	8003de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d122      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d11b      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0208 	mvn.w	r2, #8
 8003b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2204      	movs	r2, #4
 8003b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f957 	bl	8003dd6 <HAL_TIM_IC_CaptureCallback>
 8003b28:	e005      	b.n	8003b36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f94a 	bl	8003dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f959 	bl	8003de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f003 0310 	and.w	r3, r3, #16
 8003b46:	2b10      	cmp	r3, #16
 8003b48:	d122      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	2b10      	cmp	r3, #16
 8003b56:	d11b      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f06f 0210 	mvn.w	r2, #16
 8003b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2208      	movs	r2, #8
 8003b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f92d 	bl	8003dd6 <HAL_TIM_IC_CaptureCallback>
 8003b7c:	e005      	b.n	8003b8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f920 	bl	8003dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f92f 	bl	8003de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d10e      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d107      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0201 	mvn.w	r2, #1
 8003bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fd ff1a 	bl	80019f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc6:	2b80      	cmp	r3, #128	; 0x80
 8003bc8:	d10e      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd4:	2b80      	cmp	r3, #128	; 0x80
 8003bd6:	d107      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fbd8 	bl	8004398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf2:	2b40      	cmp	r3, #64	; 0x40
 8003bf4:	d10e      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c00:	2b40      	cmp	r3, #64	; 0x40
 8003c02:	d107      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f8f3 	bl	8003dfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	d10e      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d107      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0220 	mvn.w	r2, #32
 8003c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fba3 	bl	8004386 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c40:	bf00      	nop
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d101      	bne.n	8003c62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e0ac      	b.n	8003dbc <HAL_TIM_PWM_ConfigChannel+0x174>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b0c      	cmp	r3, #12
 8003c6e:	f200 809f 	bhi.w	8003db0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003c72:	a201      	add	r2, pc, #4	; (adr r2, 8003c78 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c78:	08003cad 	.word	0x08003cad
 8003c7c:	08003db1 	.word	0x08003db1
 8003c80:	08003db1 	.word	0x08003db1
 8003c84:	08003db1 	.word	0x08003db1
 8003c88:	08003ced 	.word	0x08003ced
 8003c8c:	08003db1 	.word	0x08003db1
 8003c90:	08003db1 	.word	0x08003db1
 8003c94:	08003db1 	.word	0x08003db1
 8003c98:	08003d2f 	.word	0x08003d2f
 8003c9c:	08003db1 	.word	0x08003db1
 8003ca0:	08003db1 	.word	0x08003db1
 8003ca4:	08003db1 	.word	0x08003db1
 8003ca8:	08003d6f 	.word	0x08003d6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 f90c 	bl	8003ed0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0208 	orr.w	r2, r2, #8
 8003cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699a      	ldr	r2, [r3, #24]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0204 	bic.w	r2, r2, #4
 8003cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6999      	ldr	r1, [r3, #24]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	691a      	ldr	r2, [r3, #16]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	619a      	str	r2, [r3, #24]
      break;
 8003cea:	e062      	b.n	8003db2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 f952 	bl	8003f9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6999      	ldr	r1, [r3, #24]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	021a      	lsls	r2, r3, #8
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	619a      	str	r2, [r3, #24]
      break;
 8003d2c:	e041      	b.n	8003db2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 f99b 	bl	8004070 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69da      	ldr	r2, [r3, #28]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0208 	orr.w	r2, r2, #8
 8003d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69da      	ldr	r2, [r3, #28]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0204 	bic.w	r2, r2, #4
 8003d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69d9      	ldr	r1, [r3, #28]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	61da      	str	r2, [r3, #28]
      break;
 8003d6c:	e021      	b.n	8003db2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 f9e5 	bl	8004144 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69da      	ldr	r2, [r3, #28]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69d9      	ldr	r1, [r3, #28]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	021a      	lsls	r2, r3, #8
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	61da      	str	r2, [r3, #28]
      break;
 8003dae:	e000      	b.n	8003db2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003db0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr

08003de8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bc80      	pop	{r7}
 8003df8:	4770      	bx	lr

08003dfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bc80      	pop	{r7}
 8003e0a:	4770      	bx	lr

08003e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a29      	ldr	r2, [pc, #164]	; (8003ec4 <TIM_Base_SetConfig+0xb8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00b      	beq.n	8003e3c <TIM_Base_SetConfig+0x30>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2a:	d007      	beq.n	8003e3c <TIM_Base_SetConfig+0x30>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a26      	ldr	r2, [pc, #152]	; (8003ec8 <TIM_Base_SetConfig+0xbc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d003      	beq.n	8003e3c <TIM_Base_SetConfig+0x30>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a25      	ldr	r2, [pc, #148]	; (8003ecc <TIM_Base_SetConfig+0xc0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d108      	bne.n	8003e4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a1c      	ldr	r2, [pc, #112]	; (8003ec4 <TIM_Base_SetConfig+0xb8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00b      	beq.n	8003e6e <TIM_Base_SetConfig+0x62>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5c:	d007      	beq.n	8003e6e <TIM_Base_SetConfig+0x62>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a19      	ldr	r2, [pc, #100]	; (8003ec8 <TIM_Base_SetConfig+0xbc>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d003      	beq.n	8003e6e <TIM_Base_SetConfig+0x62>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a18      	ldr	r2, [pc, #96]	; (8003ecc <TIM_Base_SetConfig+0xc0>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d108      	bne.n	8003e80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a07      	ldr	r2, [pc, #28]	; (8003ec4 <TIM_Base_SetConfig+0xb8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d103      	bne.n	8003eb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	615a      	str	r2, [r3, #20]
}
 8003eba:	bf00      	nop
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr
 8003ec4:	40012c00 	.word	0x40012c00
 8003ec8:	40000400 	.word	0x40000400
 8003ecc:	40000800 	.word	0x40000800

08003ed0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f023 0201 	bic.w	r2, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0303 	bic.w	r3, r3, #3
 8003f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f023 0302 	bic.w	r3, r3, #2
 8003f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a1c      	ldr	r2, [pc, #112]	; (8003f98 <TIM_OC1_SetConfig+0xc8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d10c      	bne.n	8003f46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f023 0308 	bic.w	r3, r3, #8
 8003f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f023 0304 	bic.w	r3, r3, #4
 8003f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a13      	ldr	r2, [pc, #76]	; (8003f98 <TIM_OC1_SetConfig+0xc8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d111      	bne.n	8003f72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	621a      	str	r2, [r3, #32]
}
 8003f8c:	bf00      	nop
 8003f8e:	371c      	adds	r7, #28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40012c00 	.word	0x40012c00

08003f9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f023 0210 	bic.w	r2, r3, #16
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	021b      	lsls	r3, r3, #8
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f023 0320 	bic.w	r3, r3, #32
 8003fe6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a1d      	ldr	r2, [pc, #116]	; (800406c <TIM_OC2_SetConfig+0xd0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d10d      	bne.n	8004018 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004016:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a14      	ldr	r2, [pc, #80]	; (800406c <TIM_OC2_SetConfig+0xd0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d113      	bne.n	8004048 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004026:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800402e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	621a      	str	r2, [r3, #32]
}
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr
 800406c:	40012c00 	.word	0x40012c00

08004070 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 0303 	bic.w	r3, r3, #3
 80040a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a1d      	ldr	r2, [pc, #116]	; (8004140 <TIM_OC3_SetConfig+0xd0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d10d      	bne.n	80040ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	021b      	lsls	r3, r3, #8
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4313      	orrs	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a14      	ldr	r2, [pc, #80]	; (8004140 <TIM_OC3_SetConfig+0xd0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d113      	bne.n	800411a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	621a      	str	r2, [r3, #32]
}
 8004134:	bf00      	nop
 8004136:	371c      	adds	r7, #28
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40012c00 	.word	0x40012c00

08004144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800418e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	031b      	lsls	r3, r3, #12
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a0f      	ldr	r2, [pc, #60]	; (80041dc <TIM_OC4_SetConfig+0x98>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d109      	bne.n	80041b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	019b      	lsls	r3, r3, #6
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	621a      	str	r2, [r3, #32]
}
 80041d2:	bf00      	nop
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr
 80041dc:	40012c00 	.word	0x40012c00

080041e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f003 031f 	and.w	r3, r3, #31
 80041f2:	2201      	movs	r2, #1
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a1a      	ldr	r2, [r3, #32]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	43db      	mvns	r3, r3
 8004202:	401a      	ands	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a1a      	ldr	r2, [r3, #32]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f003 031f 	and.w	r3, r3, #31
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	fa01 f303 	lsl.w	r3, r1, r3
 8004218:	431a      	orrs	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	621a      	str	r2, [r3, #32]
}
 800421e:	bf00      	nop
 8004220:	371c      	adds	r7, #28
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr

08004228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800423c:	2302      	movs	r3, #2
 800423e:	e046      	b.n	80042ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004266:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a16      	ldr	r2, [pc, #88]	; (80042d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00e      	beq.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428c:	d009      	beq.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a12      	ldr	r2, [pc, #72]	; (80042dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d004      	beq.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a10      	ldr	r2, [pc, #64]	; (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d10c      	bne.n	80042bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr
 80042d8:	40012c00 	.word	0x40012c00
 80042dc:	40000400 	.word	0x40000400
 80042e0:	40000800 	.word	0x40000800

080042e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042fc:	2302      	movs	r3, #2
 80042fe:	e03d      	b.n	800437c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4313      	orrs	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr

08004386 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr

08004398 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr

080043aa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b082      	sub	sp, #8
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e03f      	b.n	800443c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7fd fbe9 	bl	8001ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2224      	movs	r2, #36	; 0x24
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f904 	bl	80045fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004402:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695a      	ldr	r2, [r3, #20]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004412:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004422:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08a      	sub	sp, #40	; 0x28
 8004448:	af02      	add	r7, sp, #8
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b20      	cmp	r3, #32
 8004462:	d17c      	bne.n	800455e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <HAL_UART_Transmit+0x2c>
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e075      	b.n	8004560 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_UART_Transmit+0x3e>
 800447e:	2302      	movs	r3, #2
 8004480:	e06e      	b.n	8004560 <HAL_UART_Transmit+0x11c>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2221      	movs	r2, #33	; 0x21
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004498:	f7fd fcd4 	bl	8001e44 <HAL_GetTick>
 800449c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	88fa      	ldrh	r2, [r7, #6]
 80044a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	88fa      	ldrh	r2, [r7, #6]
 80044a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b2:	d108      	bne.n	80044c6 <HAL_UART_Transmit+0x82>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d104      	bne.n	80044c6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80044bc:	2300      	movs	r3, #0
 80044be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	61bb      	str	r3, [r7, #24]
 80044c4:	e003      	b.n	80044ce <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80044d6:	e02a      	b.n	800452e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2200      	movs	r2, #0
 80044e0:	2180      	movs	r1, #128	; 0x80
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 f840 	bl	8004568 <UART_WaitOnFlagUntilTimeout>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e036      	b.n	8004560 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10b      	bne.n	8004510 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004506:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	3302      	adds	r3, #2
 800450c:	61bb      	str	r3, [r7, #24]
 800450e:	e007      	b.n	8004520 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	781a      	ldrb	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	3301      	adds	r3, #1
 800451e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1cf      	bne.n	80044d8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2200      	movs	r2, #0
 8004540:	2140      	movs	r1, #64	; 0x40
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f810 	bl	8004568 <UART_WaitOnFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e006      	b.n	8004560 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2220      	movs	r2, #32
 8004556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	e000      	b.n	8004560 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800455e:	2302      	movs	r3, #2
  }
}
 8004560:	4618      	mov	r0, r3
 8004562:	3720      	adds	r7, #32
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	4613      	mov	r3, r2
 8004576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004578:	e02c      	b.n	80045d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004580:	d028      	beq.n	80045d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d007      	beq.n	8004598 <UART_WaitOnFlagUntilTimeout+0x30>
 8004588:	f7fd fc5c 	bl	8001e44 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	429a      	cmp	r2, r3
 8004596:	d21d      	bcs.n	80045d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695a      	ldr	r2, [r3, #20]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0201 	bic.w	r2, r2, #1
 80045b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e00f      	b.n	80045f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	4013      	ands	r3, r2
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	bf0c      	ite	eq
 80045e4:	2301      	moveq	r3, #1
 80045e6:	2300      	movne	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	461a      	mov	r2, r3
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d0c3      	beq.n	800457a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004636:	f023 030c 	bic.w	r3, r3, #12
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6812      	ldr	r2, [r2, #0]
 800463e:	68b9      	ldr	r1, [r7, #8]
 8004640:	430b      	orrs	r3, r1
 8004642:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699a      	ldr	r2, [r3, #24]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a2c      	ldr	r2, [pc, #176]	; (8004710 <UART_SetConfig+0x114>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d103      	bne.n	800466c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004664:	f7fe fe78 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	e002      	b.n	8004672 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800466c:	f7fe fe60 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8004670:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	009a      	lsls	r2, r3, #2
 800467c:	441a      	add	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	fbb2 f3f3 	udiv	r3, r2, r3
 8004688:	4a22      	ldr	r2, [pc, #136]	; (8004714 <UART_SetConfig+0x118>)
 800468a:	fba2 2303 	umull	r2, r3, r2, r3
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	0119      	lsls	r1, r3, #4
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	009a      	lsls	r2, r3, #2
 800469c:	441a      	add	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046a8:	4b1a      	ldr	r3, [pc, #104]	; (8004714 <UART_SetConfig+0x118>)
 80046aa:	fba3 0302 	umull	r0, r3, r3, r2
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	2064      	movs	r0, #100	; 0x64
 80046b2:	fb00 f303 	mul.w	r3, r0, r3
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	3332      	adds	r3, #50	; 0x32
 80046bc:	4a15      	ldr	r2, [pc, #84]	; (8004714 <UART_SetConfig+0x118>)
 80046be:	fba2 2303 	umull	r2, r3, r2, r3
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046c8:	4419      	add	r1, r3
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4613      	mov	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	009a      	lsls	r2, r3, #2
 80046d4:	441a      	add	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80046e0:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <UART_SetConfig+0x118>)
 80046e2:	fba3 0302 	umull	r0, r3, r3, r2
 80046e6:	095b      	lsrs	r3, r3, #5
 80046e8:	2064      	movs	r0, #100	; 0x64
 80046ea:	fb00 f303 	mul.w	r3, r0, r3
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	3332      	adds	r3, #50	; 0x32
 80046f4:	4a07      	ldr	r2, [pc, #28]	; (8004714 <UART_SetConfig+0x118>)
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	095b      	lsrs	r3, r3, #5
 80046fc:	f003 020f 	and.w	r2, r3, #15
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	440a      	add	r2, r1
 8004706:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004708:	bf00      	nop
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40013800 	.word	0x40013800
 8004714:	51eb851f 	.word	0x51eb851f

08004718 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f103 0208 	add.w	r2, r3, #8
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f04f 32ff 	mov.w	r2, #4294967295
 8004730:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f103 0208 	add.w	r2, r3, #8
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f103 0208 	add.w	r2, r3, #8
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr

08004756 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr

0800476e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800476e:	b480      	push	{r7}
 8004770:	b085      	sub	sp, #20
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	601a      	str	r2, [r3, #0]
}
 80047aa:	bf00      	nop
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr

080047b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ca:	d103      	bne.n	80047d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	e00c      	b.n	80047ee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3308      	adds	r3, #8
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	e002      	b.n	80047e2 <vListInsert+0x2e>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d2f6      	bcs.n	80047dc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	601a      	str	r2, [r3, #0]
}
 800481a:	bf00      	nop
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	bc80      	pop	{r7}
 8004822:	4770      	bx	lr

08004824 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6892      	ldr	r2, [r2, #8]
 800483a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6852      	ldr	r2, [r2, #4]
 8004844:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	429a      	cmp	r2, r3
 800484e:	d103      	bne.n	8004858 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	1e5a      	subs	r2, r3, #1
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr
	...

08004878 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d109      	bne.n	80048a0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800488c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	60bb      	str	r3, [r7, #8]
 800489e:	e7fe      	b.n	800489e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80048a0:	f001 fb3a 	bl	8005f18 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ac:	68f9      	ldr	r1, [r7, #12]
 80048ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048b0:	fb01 f303 	mul.w	r3, r1, r3
 80048b4:	441a      	add	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d0:	3b01      	subs	r3, #1
 80048d2:	68f9      	ldr	r1, [r7, #12]
 80048d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048d6:	fb01 f303 	mul.w	r3, r1, r3
 80048da:	441a      	add	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	22ff      	movs	r2, #255	; 0xff
 80048e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	22ff      	movs	r2, #255	; 0xff
 80048ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d114      	bne.n	8004920 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d01a      	beq.n	8004934 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3310      	adds	r3, #16
 8004902:	4618      	mov	r0, r3
 8004904:	f000 ff5e 	bl	80057c4 <xTaskRemoveFromEventList>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d012      	beq.n	8004934 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800490e:	4b0d      	ldr	r3, [pc, #52]	; (8004944 <xQueueGenericReset+0xcc>)
 8004910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	e009      	b.n	8004934 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	3310      	adds	r3, #16
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff fef7 	bl	8004718 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3324      	adds	r3, #36	; 0x24
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff fef2 	bl	8004718 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004934:	f001 fb1e 	bl	8005f74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004938:	2301      	movs	r3, #1
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	e000ed04 	.word	0xe000ed04

08004948 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	; 0x28
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	4613      	mov	r3, r2
 8004954:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d109      	bne.n	8004970 <xQueueGenericCreate+0x28>
 800495c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	e7fe      	b.n	800496e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d102      	bne.n	800497c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004976:	2300      	movs	r3, #0
 8004978:	61fb      	str	r3, [r7, #28]
 800497a:	e004      	b.n	8004986 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	fb02 f303 	mul.w	r3, r2, r3
 8004984:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	3348      	adds	r3, #72	; 0x48
 800498a:	4618      	mov	r0, r3
 800498c:	f001 fb7e 	bl	800608c <pvPortMalloc>
 8004990:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00f      	beq.n	80049b8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	3348      	adds	r3, #72	; 0x48
 800499c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049a6:	79fa      	ldrb	r2, [r7, #7]
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 f805 	bl	80049c2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80049b8:	69bb      	ldr	r3, [r7, #24]
	}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3720      	adds	r7, #32
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b084      	sub	sp, #16
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	607a      	str	r2, [r7, #4]
 80049ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d103      	bne.n	80049de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	e002      	b.n	80049e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049f0:	2101      	movs	r1, #1
 80049f2:	69b8      	ldr	r0, [r7, #24]
 80049f4:	f7ff ff40 	bl	8004878 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049f8:	bf00      	nop
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08e      	sub	sp, #56	; 0x38
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d109      	bne.n	8004a30 <xQueueGenericSend+0x30>
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a2e:	e7fe      	b.n	8004a2e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d103      	bne.n	8004a3e <xQueueGenericSend+0x3e>
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <xQueueGenericSend+0x42>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e000      	b.n	8004a44 <xQueueGenericSend+0x44>
 8004a42:	2300      	movs	r3, #0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d109      	bne.n	8004a5c <xQueueGenericSend+0x5c>
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
 8004a5a:	e7fe      	b.n	8004a5a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d103      	bne.n	8004a6a <xQueueGenericSend+0x6a>
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <xQueueGenericSend+0x6e>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <xQueueGenericSend+0x70>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d109      	bne.n	8004a88 <xQueueGenericSend+0x88>
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	623b      	str	r3, [r7, #32]
 8004a86:	e7fe      	b.n	8004a86 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a88:	f001 f856 	bl	8005b38 <xTaskGetSchedulerState>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d102      	bne.n	8004a98 <xQueueGenericSend+0x98>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <xQueueGenericSend+0x9c>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <xQueueGenericSend+0x9e>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d109      	bne.n	8004ab6 <xQueueGenericSend+0xb6>
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	61fb      	str	r3, [r7, #28]
 8004ab4:	e7fe      	b.n	8004ab4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ab6:	f001 fa2f 	bl	8005f18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d302      	bcc.n	8004acc <xQueueGenericSend+0xcc>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d129      	bne.n	8004b20 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ad2:	f000 f96b 	bl	8004dac <prvCopyDataToQueue>
 8004ad6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d010      	beq.n	8004b02 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	3324      	adds	r3, #36	; 0x24
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fe6d 	bl	80057c4 <xTaskRemoveFromEventList>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d013      	beq.n	8004b18 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004af0:	4b3f      	ldr	r3, [pc, #252]	; (8004bf0 <xQueueGenericSend+0x1f0>)
 8004af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	e00a      	b.n	8004b18 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d007      	beq.n	8004b18 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b08:	4b39      	ldr	r3, [pc, #228]	; (8004bf0 <xQueueGenericSend+0x1f0>)
 8004b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b18:	f001 fa2c 	bl	8005f74 <vPortExitCritical>
				return pdPASS;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e063      	b.n	8004be8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d103      	bne.n	8004b2e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b26:	f001 fa25 	bl	8005f74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e05c      	b.n	8004be8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d106      	bne.n	8004b42 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b34:	f107 0314 	add.w	r3, r7, #20
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fea5 	bl	8005888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b42:	f001 fa17 	bl	8005f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b46:	f000 fc59 	bl	80053fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b4a:	f001 f9e5 	bl	8005f18 <vPortEnterCritical>
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b54:	b25b      	sxtb	r3, r3
 8004b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5a:	d103      	bne.n	8004b64 <xQueueGenericSend+0x164>
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b6a:	b25b      	sxtb	r3, r3
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b70:	d103      	bne.n	8004b7a <xQueueGenericSend+0x17a>
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b7a:	f001 f9fb 	bl	8005f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b7e:	1d3a      	adds	r2, r7, #4
 8004b80:	f107 0314 	add.w	r3, r7, #20
 8004b84:	4611      	mov	r1, r2
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fe94 	bl	80058b4 <xTaskCheckForTimeOut>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d124      	bne.n	8004bdc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b94:	f000 fa02 	bl	8004f9c <prvIsQueueFull>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d018      	beq.n	8004bd0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba0:	3310      	adds	r3, #16
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fde8 	bl	800577c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bae:	f000 f98d 	bl	8004ecc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004bb2:	f000 fc31 	bl	8005418 <xTaskResumeAll>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f47f af7c 	bne.w	8004ab6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004bbe:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <xQueueGenericSend+0x1f0>)
 8004bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	e772      	b.n	8004ab6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bd2:	f000 f97b 	bl	8004ecc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bd6:	f000 fc1f 	bl	8005418 <xTaskResumeAll>
 8004bda:	e76c      	b.n	8004ab6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bde:	f000 f975 	bl	8004ecc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004be2:	f000 fc19 	bl	8005418 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004be6:	2300      	movs	r3, #0
		}
	}
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3738      	adds	r7, #56	; 0x38
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	e000ed04 	.word	0xe000ed04

08004bf4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08c      	sub	sp, #48	; 0x30
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c00:	2300      	movs	r3, #0
 8004c02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d109      	bne.n	8004c22 <xQueueReceive+0x2e>
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	623b      	str	r3, [r7, #32]
 8004c20:	e7fe      	b.n	8004c20 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d103      	bne.n	8004c30 <xQueueReceive+0x3c>
 8004c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <xQueueReceive+0x40>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <xQueueReceive+0x42>
 8004c34:	2300      	movs	r3, #0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d109      	bne.n	8004c4e <xQueueReceive+0x5a>
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	61fb      	str	r3, [r7, #28]
 8004c4c:	e7fe      	b.n	8004c4c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c4e:	f000 ff73 	bl	8005b38 <xTaskGetSchedulerState>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d102      	bne.n	8004c5e <xQueueReceive+0x6a>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <xQueueReceive+0x6e>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <xQueueReceive+0x70>
 8004c62:	2300      	movs	r3, #0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d109      	bne.n	8004c7c <xQueueReceive+0x88>
 8004c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	61bb      	str	r3, [r7, #24]
 8004c7a:	e7fe      	b.n	8004c7a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c7c:	f001 f94c 	bl	8005f18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01f      	beq.n	8004ccc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c8c:	68b9      	ldr	r1, [r7, #8]
 8004c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c90:	f000 f8f6 	bl	8004e80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	1e5a      	subs	r2, r3, #1
 8004c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00f      	beq.n	8004cc4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	3310      	adds	r3, #16
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fd8b 	bl	80057c4 <xTaskRemoveFromEventList>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d007      	beq.n	8004cc4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004cb4:	4b3c      	ldr	r3, [pc, #240]	; (8004da8 <xQueueReceive+0x1b4>)
 8004cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004cc4:	f001 f956 	bl	8005f74 <vPortExitCritical>
				return pdPASS;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e069      	b.n	8004da0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d103      	bne.n	8004cda <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cd2:	f001 f94f 	bl	8005f74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	e062      	b.n	8004da0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d106      	bne.n	8004cee <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ce0:	f107 0310 	add.w	r3, r7, #16
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fdcf 	bl	8005888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cea:	2301      	movs	r3, #1
 8004cec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cee:	f001 f941 	bl	8005f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cf2:	f000 fb83 	bl	80053fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cf6:	f001 f90f 	bl	8005f18 <vPortEnterCritical>
 8004cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d00:	b25b      	sxtb	r3, r3
 8004d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d06:	d103      	bne.n	8004d10 <xQueueReceive+0x11c>
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d16:	b25b      	sxtb	r3, r3
 8004d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1c:	d103      	bne.n	8004d26 <xQueueReceive+0x132>
 8004d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d26:	f001 f925 	bl	8005f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d2a:	1d3a      	adds	r2, r7, #4
 8004d2c:	f107 0310 	add.w	r3, r7, #16
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fdbe 	bl	80058b4 <xTaskCheckForTimeOut>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d123      	bne.n	8004d86 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d40:	f000 f916 	bl	8004f70 <prvIsQueueEmpty>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d017      	beq.n	8004d7a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	3324      	adds	r3, #36	; 0x24
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	4611      	mov	r1, r2
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fd12 	bl	800577c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d5a:	f000 f8b7 	bl	8004ecc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d5e:	f000 fb5b 	bl	8005418 <xTaskResumeAll>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d189      	bne.n	8004c7c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004d68:	4b0f      	ldr	r3, [pc, #60]	; (8004da8 <xQueueReceive+0x1b4>)
 8004d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	e780      	b.n	8004c7c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d7c:	f000 f8a6 	bl	8004ecc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d80:	f000 fb4a 	bl	8005418 <xTaskResumeAll>
 8004d84:	e77a      	b.n	8004c7c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d88:	f000 f8a0 	bl	8004ecc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d8c:	f000 fb44 	bl	8005418 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d92:	f000 f8ed 	bl	8004f70 <prvIsQueueEmpty>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f43f af6f 	beq.w	8004c7c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d9e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3730      	adds	r7, #48	; 0x30
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	e000ed04 	.word	0xe000ed04

08004dac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10d      	bne.n	8004de6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d14d      	bne.n	8004e6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fecc 	bl	8005b74 <xTaskPriorityDisinherit>
 8004ddc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	605a      	str	r2, [r3, #4]
 8004de4:	e043      	b.n	8004e6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d119      	bne.n	8004e20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6898      	ldr	r0, [r3, #8]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	461a      	mov	r2, r3
 8004df6:	68b9      	ldr	r1, [r7, #8]
 8004df8:	f001 fb46 	bl	8006488 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	441a      	add	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d32b      	bcc.n	8004e6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	609a      	str	r2, [r3, #8]
 8004e1e:	e026      	b.n	8004e6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68d8      	ldr	r0, [r3, #12]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	461a      	mov	r2, r3
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	f001 fb2c 	bl	8006488 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e38:	425b      	negs	r3, r3
 8004e3a:	441a      	add	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d207      	bcs.n	8004e5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e54:	425b      	negs	r3, r3
 8004e56:	441a      	add	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d105      	bne.n	8004e6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e76:	697b      	ldr	r3, [r7, #20]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d018      	beq.n	8004ec4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	441a      	add	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d303      	bcc.n	8004eb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68d9      	ldr	r1, [r3, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	6838      	ldr	r0, [r7, #0]
 8004ec0:	f001 fae2 	bl	8006488 <memcpy>
	}
}
 8004ec4:	bf00      	nop
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ed4:	f001 f820 	bl	8005f18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ede:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ee0:	e011      	b.n	8004f06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d012      	beq.n	8004f10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3324      	adds	r3, #36	; 0x24
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fc68 	bl	80057c4 <xTaskRemoveFromEventList>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004efa:	f000 fd3b 	bl	8005974 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	dce9      	bgt.n	8004ee2 <prvUnlockQueue+0x16>
 8004f0e:	e000      	b.n	8004f12 <prvUnlockQueue+0x46>
					break;
 8004f10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	22ff      	movs	r2, #255	; 0xff
 8004f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f1a:	f001 f82b 	bl	8005f74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f1e:	f000 fffb 	bl	8005f18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f2a:	e011      	b.n	8004f50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d012      	beq.n	8004f5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3310      	adds	r3, #16
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fc43 	bl	80057c4 <xTaskRemoveFromEventList>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f44:	f000 fd16 	bl	8005974 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f48:	7bbb      	ldrb	r3, [r7, #14]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	dce9      	bgt.n	8004f2c <prvUnlockQueue+0x60>
 8004f58:	e000      	b.n	8004f5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	22ff      	movs	r2, #255	; 0xff
 8004f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f64:	f001 f806 	bl	8005f74 <vPortExitCritical>
}
 8004f68:	bf00      	nop
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f78:	f000 ffce 	bl	8005f18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d102      	bne.n	8004f8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f84:	2301      	movs	r3, #1
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	e001      	b.n	8004f8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f8e:	f000 fff1 	bl	8005f74 <vPortExitCritical>

	return xReturn;
 8004f92:	68fb      	ldr	r3, [r7, #12]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fa4:	f000 ffb8 	bl	8005f18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d102      	bne.n	8004fba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	e001      	b.n	8004fbe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fbe:	f000 ffd9 	bl	8005f74 <vPortExitCritical>

	return xReturn;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08e      	sub	sp, #56	; 0x38
 8004fd0:	af04      	add	r7, sp, #16
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d109      	bne.n	8004ff4 <xTaskCreateStatic+0x28>
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	623b      	str	r3, [r7, #32]
 8004ff2:	e7fe      	b.n	8004ff2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d109      	bne.n	800500e <xTaskCreateStatic+0x42>
 8004ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	61fb      	str	r3, [r7, #28]
 800500c:	e7fe      	b.n	800500c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800500e:	2354      	movs	r3, #84	; 0x54
 8005010:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b54      	cmp	r3, #84	; 0x54
 8005016:	d009      	beq.n	800502c <xTaskCreateStatic+0x60>
 8005018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	61bb      	str	r3, [r7, #24]
 800502a:	e7fe      	b.n	800502a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502e:	2b00      	cmp	r3, #0
 8005030:	d01e      	beq.n	8005070 <xTaskCreateStatic+0xa4>
 8005032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01b      	beq.n	8005070 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005040:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	2202      	movs	r2, #2
 8005046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800504a:	2300      	movs	r3, #0
 800504c:	9303      	str	r3, [sp, #12]
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	9302      	str	r3, [sp, #8]
 8005052:	f107 0314 	add.w	r3, r7, #20
 8005056:	9301      	str	r3, [sp, #4]
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	68b9      	ldr	r1, [r7, #8]
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 f850 	bl	8005108 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005068:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800506a:	f000 f8cb 	bl	8005204 <prvAddNewTaskToReadyList>
 800506e:	e001      	b.n	8005074 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005074:	697b      	ldr	r3, [r7, #20]
	}
 8005076:	4618      	mov	r0, r3
 8005078:	3728      	adds	r7, #40	; 0x28
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800507e:	b580      	push	{r7, lr}
 8005080:	b08c      	sub	sp, #48	; 0x30
 8005082:	af04      	add	r7, sp, #16
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	603b      	str	r3, [r7, #0]
 800508a:	4613      	mov	r3, r2
 800508c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800508e:	88fb      	ldrh	r3, [r7, #6]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fffa 	bl	800608c <pvPortMalloc>
 8005098:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00e      	beq.n	80050be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80050a0:	2054      	movs	r0, #84	; 0x54
 80050a2:	f000 fff3 	bl	800608c <pvPortMalloc>
 80050a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	631a      	str	r2, [r3, #48]	; 0x30
 80050b4:	e005      	b.n	80050c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050b6:	6978      	ldr	r0, [r7, #20]
 80050b8:	f001 f8aa 	bl	8006210 <vPortFree>
 80050bc:	e001      	b.n	80050c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d017      	beq.n	80050f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050d0:	88fa      	ldrh	r2, [r7, #6]
 80050d2:	2300      	movs	r3, #0
 80050d4:	9303      	str	r3, [sp, #12]
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	9302      	str	r3, [sp, #8]
 80050da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050dc:	9301      	str	r3, [sp, #4]
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 f80e 	bl	8005108 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050ec:	69f8      	ldr	r0, [r7, #28]
 80050ee:	f000 f889 	bl	8005204 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050f2:	2301      	movs	r3, #1
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	e002      	b.n	80050fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050f8:	f04f 33ff 	mov.w	r3, #4294967295
 80050fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050fe:	69bb      	ldr	r3, [r7, #24]
	}
 8005100:	4618      	mov	r0, r3
 8005102:	3720      	adds	r7, #32
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005120:	3b01      	subs	r3, #1
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	f023 0307 	bic.w	r3, r3, #7
 800512e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	2b00      	cmp	r3, #0
 8005138:	d009      	beq.n	800514e <prvInitialiseNewTask+0x46>
 800513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	e7fe      	b.n	800514c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800514e:	2300      	movs	r3, #0
 8005150:	61fb      	str	r3, [r7, #28]
 8005152:	e012      	b.n	800517a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	4413      	add	r3, r2
 800515a:	7819      	ldrb	r1, [r3, #0]
 800515c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	4413      	add	r3, r2
 8005162:	3334      	adds	r3, #52	; 0x34
 8005164:	460a      	mov	r2, r1
 8005166:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	4413      	add	r3, r2
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d006      	beq.n	8005182 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	3301      	adds	r3, #1
 8005178:	61fb      	str	r3, [r7, #28]
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	2b0f      	cmp	r3, #15
 800517e:	d9e9      	bls.n	8005154 <prvInitialiseNewTask+0x4c>
 8005180:	e000      	b.n	8005184 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005182:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800518c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518e:	2b06      	cmp	r3, #6
 8005190:	d901      	bls.n	8005196 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005192:	2306      	movs	r3, #6
 8005194:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800519a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051a0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	2200      	movs	r2, #0
 80051a6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051aa:	3304      	adds	r3, #4
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff fad2 	bl	8004756 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b4:	3318      	adds	r3, #24
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7ff facd 	bl	8004756 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c4:	f1c3 0207 	rsb	r2, r3, #7
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	2200      	movs	r2, #0
 80051d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	68f9      	ldr	r1, [r7, #12]
 80051e4:	69b8      	ldr	r0, [r7, #24]
 80051e6:	f000 fdaf 	bl	8005d48 <pxPortInitialiseStack>
 80051ea:	4602      	mov	r2, r0
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80051f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051fc:	bf00      	nop
 80051fe:	3720      	adds	r7, #32
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800520c:	f000 fe84 	bl	8005f18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005210:	4b2a      	ldr	r3, [pc, #168]	; (80052bc <prvAddNewTaskToReadyList+0xb8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3301      	adds	r3, #1
 8005216:	4a29      	ldr	r2, [pc, #164]	; (80052bc <prvAddNewTaskToReadyList+0xb8>)
 8005218:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800521a:	4b29      	ldr	r3, [pc, #164]	; (80052c0 <prvAddNewTaskToReadyList+0xbc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d109      	bne.n	8005236 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005222:	4a27      	ldr	r2, [pc, #156]	; (80052c0 <prvAddNewTaskToReadyList+0xbc>)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005228:	4b24      	ldr	r3, [pc, #144]	; (80052bc <prvAddNewTaskToReadyList+0xb8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d110      	bne.n	8005252 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005230:	f000 fbc4 	bl	80059bc <prvInitialiseTaskLists>
 8005234:	e00d      	b.n	8005252 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005236:	4b23      	ldr	r3, [pc, #140]	; (80052c4 <prvAddNewTaskToReadyList+0xc0>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d109      	bne.n	8005252 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800523e:	4b20      	ldr	r3, [pc, #128]	; (80052c0 <prvAddNewTaskToReadyList+0xbc>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005248:	429a      	cmp	r2, r3
 800524a:	d802      	bhi.n	8005252 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800524c:	4a1c      	ldr	r2, [pc, #112]	; (80052c0 <prvAddNewTaskToReadyList+0xbc>)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005252:	4b1d      	ldr	r3, [pc, #116]	; (80052c8 <prvAddNewTaskToReadyList+0xc4>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3301      	adds	r3, #1
 8005258:	4a1b      	ldr	r2, [pc, #108]	; (80052c8 <prvAddNewTaskToReadyList+0xc4>)
 800525a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	2201      	movs	r2, #1
 8005262:	409a      	lsls	r2, r3
 8005264:	4b19      	ldr	r3, [pc, #100]	; (80052cc <prvAddNewTaskToReadyList+0xc8>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4313      	orrs	r3, r2
 800526a:	4a18      	ldr	r2, [pc, #96]	; (80052cc <prvAddNewTaskToReadyList+0xc8>)
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005272:	4613      	mov	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <prvAddNewTaskToReadyList+0xcc>)
 800527c:	441a      	add	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	3304      	adds	r3, #4
 8005282:	4619      	mov	r1, r3
 8005284:	4610      	mov	r0, r2
 8005286:	f7ff fa72 	bl	800476e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800528a:	f000 fe73 	bl	8005f74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800528e:	4b0d      	ldr	r3, [pc, #52]	; (80052c4 <prvAddNewTaskToReadyList+0xc0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00e      	beq.n	80052b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005296:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <prvAddNewTaskToReadyList+0xbc>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d207      	bcs.n	80052b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052a4:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <prvAddNewTaskToReadyList+0xd0>)
 80052a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052b4:	bf00      	nop
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	2000060c 	.word	0x2000060c
 80052c0:	2000050c 	.word	0x2000050c
 80052c4:	20000618 	.word	0x20000618
 80052c8:	20000628 	.word	0x20000628
 80052cc:	20000614 	.word	0x20000614
 80052d0:	20000510 	.word	0x20000510
 80052d4:	e000ed04 	.word	0xe000ed04

080052d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d016      	beq.n	8005318 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052ea:	4b13      	ldr	r3, [pc, #76]	; (8005338 <vTaskDelay+0x60>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d009      	beq.n	8005306 <vTaskDelay+0x2e>
 80052f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	60bb      	str	r3, [r7, #8]
 8005304:	e7fe      	b.n	8005304 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005306:	f000 f879 	bl	80053fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800530a:	2100      	movs	r1, #0
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fcb5 	bl	8005c7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005312:	f000 f881 	bl	8005418 <xTaskResumeAll>
 8005316:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d107      	bne.n	800532e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800531e:	4b07      	ldr	r3, [pc, #28]	; (800533c <vTaskDelay+0x64>)
 8005320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800532e:	bf00      	nop
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20000634 	.word	0x20000634
 800533c:	e000ed04 	.word	0xe000ed04

08005340 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08a      	sub	sp, #40	; 0x28
 8005344:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005346:	2300      	movs	r3, #0
 8005348:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800534a:	2300      	movs	r3, #0
 800534c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800534e:	463a      	mov	r2, r7
 8005350:	1d39      	adds	r1, r7, #4
 8005352:	f107 0308 	add.w	r3, r7, #8
 8005356:	4618      	mov	r0, r3
 8005358:	f7fb feaa 	bl	80010b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800535c:	6839      	ldr	r1, [r7, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	9202      	str	r2, [sp, #8]
 8005364:	9301      	str	r3, [sp, #4]
 8005366:	2300      	movs	r3, #0
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	2300      	movs	r3, #0
 800536c:	460a      	mov	r2, r1
 800536e:	491d      	ldr	r1, [pc, #116]	; (80053e4 <vTaskStartScheduler+0xa4>)
 8005370:	481d      	ldr	r0, [pc, #116]	; (80053e8 <vTaskStartScheduler+0xa8>)
 8005372:	f7ff fe2b 	bl	8004fcc <xTaskCreateStatic>
 8005376:	4602      	mov	r2, r0
 8005378:	4b1c      	ldr	r3, [pc, #112]	; (80053ec <vTaskStartScheduler+0xac>)
 800537a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800537c:	4b1b      	ldr	r3, [pc, #108]	; (80053ec <vTaskStartScheduler+0xac>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005384:	2301      	movs	r3, #1
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	e001      	b.n	800538e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d115      	bne.n	80053c0 <vTaskStartScheduler+0x80>
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053a6:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <vTaskStartScheduler+0xb0>)
 80053a8:	f04f 32ff 	mov.w	r2, #4294967295
 80053ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053ae:	4b11      	ldr	r3, [pc, #68]	; (80053f4 <vTaskStartScheduler+0xb4>)
 80053b0:	2201      	movs	r2, #1
 80053b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80053b4:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <vTaskStartScheduler+0xb8>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80053ba:	f000 fd3d 	bl	8005e38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80053be:	e00d      	b.n	80053dc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c6:	d109      	bne.n	80053dc <vTaskStartScheduler+0x9c>
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	e7fe      	b.n	80053da <vTaskStartScheduler+0x9a>
}
 80053dc:	bf00      	nop
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	08006db4 	.word	0x08006db4
 80053e8:	0800598d 	.word	0x0800598d
 80053ec:	20000630 	.word	0x20000630
 80053f0:	2000062c 	.word	0x2000062c
 80053f4:	20000618 	.word	0x20000618
 80053f8:	20000610 	.word	0x20000610

080053fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005400:	4b04      	ldr	r3, [pc, #16]	; (8005414 <vTaskSuspendAll+0x18>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3301      	adds	r3, #1
 8005406:	4a03      	ldr	r2, [pc, #12]	; (8005414 <vTaskSuspendAll+0x18>)
 8005408:	6013      	str	r3, [r2, #0]
}
 800540a:	bf00      	nop
 800540c:	46bd      	mov	sp, r7
 800540e:	bc80      	pop	{r7}
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	20000634 	.word	0x20000634

08005418 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005422:	2300      	movs	r3, #0
 8005424:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005426:	4b41      	ldr	r3, [pc, #260]	; (800552c <xTaskResumeAll+0x114>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d109      	bne.n	8005442 <xTaskResumeAll+0x2a>
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	e7fe      	b.n	8005440 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005442:	f000 fd69 	bl	8005f18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005446:	4b39      	ldr	r3, [pc, #228]	; (800552c <xTaskResumeAll+0x114>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3b01      	subs	r3, #1
 800544c:	4a37      	ldr	r2, [pc, #220]	; (800552c <xTaskResumeAll+0x114>)
 800544e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005450:	4b36      	ldr	r3, [pc, #216]	; (800552c <xTaskResumeAll+0x114>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d161      	bne.n	800551c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005458:	4b35      	ldr	r3, [pc, #212]	; (8005530 <xTaskResumeAll+0x118>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d05d      	beq.n	800551c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005460:	e02e      	b.n	80054c0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005462:	4b34      	ldr	r3, [pc, #208]	; (8005534 <xTaskResumeAll+0x11c>)
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3318      	adds	r3, #24
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff f9d8 	bl	8004824 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3304      	adds	r3, #4
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff f9d3 	bl	8004824 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005482:	2201      	movs	r2, #1
 8005484:	409a      	lsls	r2, r3
 8005486:	4b2c      	ldr	r3, [pc, #176]	; (8005538 <xTaskResumeAll+0x120>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4313      	orrs	r3, r2
 800548c:	4a2a      	ldr	r2, [pc, #168]	; (8005538 <xTaskResumeAll+0x120>)
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005494:	4613      	mov	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4a27      	ldr	r2, [pc, #156]	; (800553c <xTaskResumeAll+0x124>)
 800549e:	441a      	add	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3304      	adds	r3, #4
 80054a4:	4619      	mov	r1, r3
 80054a6:	4610      	mov	r0, r2
 80054a8:	f7ff f961 	bl	800476e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b0:	4b23      	ldr	r3, [pc, #140]	; (8005540 <xTaskResumeAll+0x128>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d302      	bcc.n	80054c0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80054ba:	4b22      	ldr	r3, [pc, #136]	; (8005544 <xTaskResumeAll+0x12c>)
 80054bc:	2201      	movs	r2, #1
 80054be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054c0:	4b1c      	ldr	r3, [pc, #112]	; (8005534 <xTaskResumeAll+0x11c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1cc      	bne.n	8005462 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80054ce:	f000 fb0f 	bl	8005af0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80054d2:	4b1d      	ldr	r3, [pc, #116]	; (8005548 <xTaskResumeAll+0x130>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d010      	beq.n	8005500 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80054de:	f000 f837 	bl	8005550 <xTaskIncrementTick>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80054e8:	4b16      	ldr	r3, [pc, #88]	; (8005544 <xTaskResumeAll+0x12c>)
 80054ea:	2201      	movs	r2, #1
 80054ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1f1      	bne.n	80054de <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80054fa:	4b13      	ldr	r3, [pc, #76]	; (8005548 <xTaskResumeAll+0x130>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005500:	4b10      	ldr	r3, [pc, #64]	; (8005544 <xTaskResumeAll+0x12c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d009      	beq.n	800551c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005508:	2301      	movs	r3, #1
 800550a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800550c:	4b0f      	ldr	r3, [pc, #60]	; (800554c <xTaskResumeAll+0x134>)
 800550e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800551c:	f000 fd2a 	bl	8005f74 <vPortExitCritical>

	return xAlreadyYielded;
 8005520:	68bb      	ldr	r3, [r7, #8]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000634 	.word	0x20000634
 8005530:	2000060c 	.word	0x2000060c
 8005534:	200005cc 	.word	0x200005cc
 8005538:	20000614 	.word	0x20000614
 800553c:	20000510 	.word	0x20000510
 8005540:	2000050c 	.word	0x2000050c
 8005544:	20000620 	.word	0x20000620
 8005548:	2000061c 	.word	0x2000061c
 800554c:	e000ed04 	.word	0xe000ed04

08005550 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800555a:	4b50      	ldr	r3, [pc, #320]	; (800569c <xTaskIncrementTick+0x14c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	f040 808c 	bne.w	800567c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005564:	4b4e      	ldr	r3, [pc, #312]	; (80056a0 <xTaskIncrementTick+0x150>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3301      	adds	r3, #1
 800556a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800556c:	4a4c      	ldr	r2, [pc, #304]	; (80056a0 <xTaskIncrementTick+0x150>)
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d11f      	bne.n	80055b8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005578:	4b4a      	ldr	r3, [pc, #296]	; (80056a4 <xTaskIncrementTick+0x154>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <xTaskIncrementTick+0x46>
 8005582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	e7fe      	b.n	8005594 <xTaskIncrementTick+0x44>
 8005596:	4b43      	ldr	r3, [pc, #268]	; (80056a4 <xTaskIncrementTick+0x154>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	4b42      	ldr	r3, [pc, #264]	; (80056a8 <xTaskIncrementTick+0x158>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a40      	ldr	r2, [pc, #256]	; (80056a4 <xTaskIncrementTick+0x154>)
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	4a40      	ldr	r2, [pc, #256]	; (80056a8 <xTaskIncrementTick+0x158>)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	4b40      	ldr	r3, [pc, #256]	; (80056ac <xTaskIncrementTick+0x15c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	3301      	adds	r3, #1
 80055b0:	4a3e      	ldr	r2, [pc, #248]	; (80056ac <xTaskIncrementTick+0x15c>)
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	f000 fa9c 	bl	8005af0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055b8:	4b3d      	ldr	r3, [pc, #244]	; (80056b0 <xTaskIncrementTick+0x160>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d34d      	bcc.n	800565e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055c2:	4b38      	ldr	r3, [pc, #224]	; (80056a4 <xTaskIncrementTick+0x154>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <xTaskIncrementTick+0x80>
 80055cc:	2301      	movs	r3, #1
 80055ce:	e000      	b.n	80055d2 <xTaskIncrementTick+0x82>
 80055d0:	2300      	movs	r3, #0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d004      	beq.n	80055e0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055d6:	4b36      	ldr	r3, [pc, #216]	; (80056b0 <xTaskIncrementTick+0x160>)
 80055d8:	f04f 32ff 	mov.w	r2, #4294967295
 80055dc:	601a      	str	r2, [r3, #0]
					break;
 80055de:	e03e      	b.n	800565e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80055e0:	4b30      	ldr	r3, [pc, #192]	; (80056a4 <xTaskIncrementTick+0x154>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d203      	bcs.n	8005600 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055f8:	4a2d      	ldr	r2, [pc, #180]	; (80056b0 <xTaskIncrementTick+0x160>)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6013      	str	r3, [r2, #0]
						break;
 80055fe:	e02e      	b.n	800565e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	3304      	adds	r3, #4
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff f90d 	bl	8004824 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	2b00      	cmp	r3, #0
 8005610:	d004      	beq.n	800561c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	3318      	adds	r3, #24
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff f904 	bl	8004824 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005620:	2201      	movs	r2, #1
 8005622:	409a      	lsls	r2, r3
 8005624:	4b23      	ldr	r3, [pc, #140]	; (80056b4 <xTaskIncrementTick+0x164>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4313      	orrs	r3, r2
 800562a:	4a22      	ldr	r2, [pc, #136]	; (80056b4 <xTaskIncrementTick+0x164>)
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005632:	4613      	mov	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4a1f      	ldr	r2, [pc, #124]	; (80056b8 <xTaskIncrementTick+0x168>)
 800563c:	441a      	add	r2, r3
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	3304      	adds	r3, #4
 8005642:	4619      	mov	r1, r3
 8005644:	4610      	mov	r0, r2
 8005646:	f7ff f892 	bl	800476e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564e:	4b1b      	ldr	r3, [pc, #108]	; (80056bc <xTaskIncrementTick+0x16c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	429a      	cmp	r2, r3
 8005656:	d3b4      	bcc.n	80055c2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005658:	2301      	movs	r3, #1
 800565a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800565c:	e7b1      	b.n	80055c2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800565e:	4b17      	ldr	r3, [pc, #92]	; (80056bc <xTaskIncrementTick+0x16c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005664:	4914      	ldr	r1, [pc, #80]	; (80056b8 <xTaskIncrementTick+0x168>)
 8005666:	4613      	mov	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	440b      	add	r3, r1
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d907      	bls.n	8005686 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005676:	2301      	movs	r3, #1
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	e004      	b.n	8005686 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800567c:	4b10      	ldr	r3, [pc, #64]	; (80056c0 <xTaskIncrementTick+0x170>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3301      	adds	r3, #1
 8005682:	4a0f      	ldr	r2, [pc, #60]	; (80056c0 <xTaskIncrementTick+0x170>)
 8005684:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005686:	4b0f      	ldr	r3, [pc, #60]	; (80056c4 <xTaskIncrementTick+0x174>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800568e:	2301      	movs	r3, #1
 8005690:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005692:	697b      	ldr	r3, [r7, #20]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	20000634 	.word	0x20000634
 80056a0:	20000610 	.word	0x20000610
 80056a4:	200005c4 	.word	0x200005c4
 80056a8:	200005c8 	.word	0x200005c8
 80056ac:	20000624 	.word	0x20000624
 80056b0:	2000062c 	.word	0x2000062c
 80056b4:	20000614 	.word	0x20000614
 80056b8:	20000510 	.word	0x20000510
 80056bc:	2000050c 	.word	0x2000050c
 80056c0:	2000061c 	.word	0x2000061c
 80056c4:	20000620 	.word	0x20000620

080056c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056ce:	4b26      	ldr	r3, [pc, #152]	; (8005768 <vTaskSwitchContext+0xa0>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056d6:	4b25      	ldr	r3, [pc, #148]	; (800576c <vTaskSwitchContext+0xa4>)
 80056d8:	2201      	movs	r2, #1
 80056da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056dc:	e03e      	b.n	800575c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80056de:	4b23      	ldr	r3, [pc, #140]	; (800576c <vTaskSwitchContext+0xa4>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80056e4:	4b22      	ldr	r3, [pc, #136]	; (8005770 <vTaskSwitchContext+0xa8>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	fab3 f383 	clz	r3, r3
 80056f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80056f2:	7afb      	ldrb	r3, [r7, #11]
 80056f4:	f1c3 031f 	rsb	r3, r3, #31
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	491e      	ldr	r1, [pc, #120]	; (8005774 <vTaskSwitchContext+0xac>)
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4613      	mov	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	440b      	add	r3, r1
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d109      	bne.n	8005722 <vTaskSwitchContext+0x5a>
	__asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	607b      	str	r3, [r7, #4]
 8005720:	e7fe      	b.n	8005720 <vTaskSwitchContext+0x58>
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4613      	mov	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4a11      	ldr	r2, [pc, #68]	; (8005774 <vTaskSwitchContext+0xac>)
 800572e:	4413      	add	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	605a      	str	r2, [r3, #4]
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	3308      	adds	r3, #8
 8005744:	429a      	cmp	r2, r3
 8005746:	d104      	bne.n	8005752 <vTaskSwitchContext+0x8a>
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	605a      	str	r2, [r3, #4]
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	4a07      	ldr	r2, [pc, #28]	; (8005778 <vTaskSwitchContext+0xb0>)
 800575a:	6013      	str	r3, [r2, #0]
}
 800575c:	bf00      	nop
 800575e:	371c      	adds	r7, #28
 8005760:	46bd      	mov	sp, r7
 8005762:	bc80      	pop	{r7}
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	20000634 	.word	0x20000634
 800576c:	20000620 	.word	0x20000620
 8005770:	20000614 	.word	0x20000614
 8005774:	20000510 	.word	0x20000510
 8005778:	2000050c 	.word	0x2000050c

0800577c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d109      	bne.n	80057a0 <vTaskPlaceOnEventList+0x24>
 800578c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	e7fe      	b.n	800579e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057a0:	4b07      	ldr	r3, [pc, #28]	; (80057c0 <vTaskPlaceOnEventList+0x44>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3318      	adds	r3, #24
 80057a6:	4619      	mov	r1, r3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff f803 	bl	80047b4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057ae:	2101      	movs	r1, #1
 80057b0:	6838      	ldr	r0, [r7, #0]
 80057b2:	f000 fa63 	bl	8005c7c <prvAddCurrentTaskToDelayedList>
}
 80057b6:	bf00      	nop
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	2000050c 	.word	0x2000050c

080057c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d109      	bne.n	80057ee <xTaskRemoveFromEventList+0x2a>
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	e7fe      	b.n	80057ec <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	3318      	adds	r3, #24
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff f816 	bl	8004824 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057f8:	4b1d      	ldr	r3, [pc, #116]	; (8005870 <xTaskRemoveFromEventList+0xac>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d11c      	bne.n	800583a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	3304      	adds	r3, #4
 8005804:	4618      	mov	r0, r3
 8005806:	f7ff f80d 	bl	8004824 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580e:	2201      	movs	r2, #1
 8005810:	409a      	lsls	r2, r3
 8005812:	4b18      	ldr	r3, [pc, #96]	; (8005874 <xTaskRemoveFromEventList+0xb0>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4313      	orrs	r3, r2
 8005818:	4a16      	ldr	r2, [pc, #88]	; (8005874 <xTaskRemoveFromEventList+0xb0>)
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4a13      	ldr	r2, [pc, #76]	; (8005878 <xTaskRemoveFromEventList+0xb4>)
 800582a:	441a      	add	r2, r3
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	3304      	adds	r3, #4
 8005830:	4619      	mov	r1, r3
 8005832:	4610      	mov	r0, r2
 8005834:	f7fe ff9b 	bl	800476e <vListInsertEnd>
 8005838:	e005      	b.n	8005846 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	3318      	adds	r3, #24
 800583e:	4619      	mov	r1, r3
 8005840:	480e      	ldr	r0, [pc, #56]	; (800587c <xTaskRemoveFromEventList+0xb8>)
 8005842:	f7fe ff94 	bl	800476e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584a:	4b0d      	ldr	r3, [pc, #52]	; (8005880 <xTaskRemoveFromEventList+0xbc>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005850:	429a      	cmp	r2, r3
 8005852:	d905      	bls.n	8005860 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005854:	2301      	movs	r3, #1
 8005856:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005858:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <xTaskRemoveFromEventList+0xc0>)
 800585a:	2201      	movs	r2, #1
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	e001      	b.n	8005864 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005860:	2300      	movs	r3, #0
 8005862:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005864:	697b      	ldr	r3, [r7, #20]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000634 	.word	0x20000634
 8005874:	20000614 	.word	0x20000614
 8005878:	20000510 	.word	0x20000510
 800587c:	200005cc 	.word	0x200005cc
 8005880:	2000050c 	.word	0x2000050c
 8005884:	20000620 	.word	0x20000620

08005888 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005890:	4b06      	ldr	r3, [pc, #24]	; (80058ac <vTaskInternalSetTimeOutState+0x24>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005898:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <vTaskInternalSetTimeOutState+0x28>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	605a      	str	r2, [r3, #4]
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bc80      	pop	{r7}
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	20000624 	.word	0x20000624
 80058b0:	20000610 	.word	0x20000610

080058b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d109      	bne.n	80058d8 <xTaskCheckForTimeOut+0x24>
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	613b      	str	r3, [r7, #16]
 80058d6:	e7fe      	b.n	80058d6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d109      	bne.n	80058f2 <xTaskCheckForTimeOut+0x3e>
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	e7fe      	b.n	80058f0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80058f2:	f000 fb11 	bl	8005f18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058f6:	4b1d      	ldr	r3, [pc, #116]	; (800596c <xTaskCheckForTimeOut+0xb8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590e:	d102      	bne.n	8005916 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005910:	2300      	movs	r3, #0
 8005912:	61fb      	str	r3, [r7, #28]
 8005914:	e023      	b.n	800595e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	4b15      	ldr	r3, [pc, #84]	; (8005970 <xTaskCheckForTimeOut+0xbc>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	429a      	cmp	r2, r3
 8005920:	d007      	beq.n	8005932 <xTaskCheckForTimeOut+0x7e>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	429a      	cmp	r2, r3
 800592a:	d302      	bcc.n	8005932 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800592c:	2301      	movs	r3, #1
 800592e:	61fb      	str	r3, [r7, #28]
 8005930:	e015      	b.n	800595e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	429a      	cmp	r2, r3
 800593a:	d20b      	bcs.n	8005954 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	1ad2      	subs	r2, r2, r3
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7ff ff9d 	bl	8005888 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800594e:	2300      	movs	r3, #0
 8005950:	61fb      	str	r3, [r7, #28]
 8005952:	e004      	b.n	800595e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800595a:	2301      	movs	r3, #1
 800595c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800595e:	f000 fb09 	bl	8005f74 <vPortExitCritical>

	return xReturn;
 8005962:	69fb      	ldr	r3, [r7, #28]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3720      	adds	r7, #32
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	20000610 	.word	0x20000610
 8005970:	20000624 	.word	0x20000624

08005974 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005978:	4b03      	ldr	r3, [pc, #12]	; (8005988 <vTaskMissedYield+0x14>)
 800597a:	2201      	movs	r2, #1
 800597c:	601a      	str	r2, [r3, #0]
}
 800597e:	bf00      	nop
 8005980:	46bd      	mov	sp, r7
 8005982:	bc80      	pop	{r7}
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	20000620 	.word	0x20000620

0800598c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005994:	f000 f852 	bl	8005a3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005998:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <prvIdleTask+0x28>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d9f9      	bls.n	8005994 <prvIdleTask+0x8>
			{
				taskYIELD();
 80059a0:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <prvIdleTask+0x2c>)
 80059a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059b0:	e7f0      	b.n	8005994 <prvIdleTask+0x8>
 80059b2:	bf00      	nop
 80059b4:	20000510 	.word	0x20000510
 80059b8:	e000ed04 	.word	0xe000ed04

080059bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059c2:	2300      	movs	r3, #0
 80059c4:	607b      	str	r3, [r7, #4]
 80059c6:	e00c      	b.n	80059e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4a12      	ldr	r2, [pc, #72]	; (8005a1c <prvInitialiseTaskLists+0x60>)
 80059d4:	4413      	add	r3, r2
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fe fe9e 	bl	8004718 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3301      	adds	r3, #1
 80059e0:	607b      	str	r3, [r7, #4]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b06      	cmp	r3, #6
 80059e6:	d9ef      	bls.n	80059c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059e8:	480d      	ldr	r0, [pc, #52]	; (8005a20 <prvInitialiseTaskLists+0x64>)
 80059ea:	f7fe fe95 	bl	8004718 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059ee:	480d      	ldr	r0, [pc, #52]	; (8005a24 <prvInitialiseTaskLists+0x68>)
 80059f0:	f7fe fe92 	bl	8004718 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059f4:	480c      	ldr	r0, [pc, #48]	; (8005a28 <prvInitialiseTaskLists+0x6c>)
 80059f6:	f7fe fe8f 	bl	8004718 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059fa:	480c      	ldr	r0, [pc, #48]	; (8005a2c <prvInitialiseTaskLists+0x70>)
 80059fc:	f7fe fe8c 	bl	8004718 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a00:	480b      	ldr	r0, [pc, #44]	; (8005a30 <prvInitialiseTaskLists+0x74>)
 8005a02:	f7fe fe89 	bl	8004718 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a06:	4b0b      	ldr	r3, [pc, #44]	; (8005a34 <prvInitialiseTaskLists+0x78>)
 8005a08:	4a05      	ldr	r2, [pc, #20]	; (8005a20 <prvInitialiseTaskLists+0x64>)
 8005a0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a0c:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <prvInitialiseTaskLists+0x7c>)
 8005a0e:	4a05      	ldr	r2, [pc, #20]	; (8005a24 <prvInitialiseTaskLists+0x68>)
 8005a10:	601a      	str	r2, [r3, #0]
}
 8005a12:	bf00      	nop
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	20000510 	.word	0x20000510
 8005a20:	2000059c 	.word	0x2000059c
 8005a24:	200005b0 	.word	0x200005b0
 8005a28:	200005cc 	.word	0x200005cc
 8005a2c:	200005e0 	.word	0x200005e0
 8005a30:	200005f8 	.word	0x200005f8
 8005a34:	200005c4 	.word	0x200005c4
 8005a38:	200005c8 	.word	0x200005c8

08005a3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a42:	e019      	b.n	8005a78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a44:	f000 fa68 	bl	8005f18 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005a48:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <prvCheckTasksWaitingTermination+0x4c>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3304      	adds	r3, #4
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7fe fee5 	bl	8004824 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a5a:	4b0c      	ldr	r3, [pc, #48]	; (8005a8c <prvCheckTasksWaitingTermination+0x50>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	4a0a      	ldr	r2, [pc, #40]	; (8005a8c <prvCheckTasksWaitingTermination+0x50>)
 8005a62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a64:	4b0a      	ldr	r3, [pc, #40]	; (8005a90 <prvCheckTasksWaitingTermination+0x54>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	4a09      	ldr	r2, [pc, #36]	; (8005a90 <prvCheckTasksWaitingTermination+0x54>)
 8005a6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a6e:	f000 fa81 	bl	8005f74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f80e 	bl	8005a94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a78:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <prvCheckTasksWaitingTermination+0x54>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1e1      	bne.n	8005a44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a80:	bf00      	nop
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	200005e0 	.word	0x200005e0
 8005a8c:	2000060c 	.word	0x2000060c
 8005a90:	200005f4 	.word	0x200005f4

08005a94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d108      	bne.n	8005ab8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fbb0 	bl	8006210 <vPortFree>
				vPortFree( pxTCB );
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fbad 	bl	8006210 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ab6:	e017      	b.n	8005ae8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d103      	bne.n	8005aca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fba4 	bl	8006210 <vPortFree>
	}
 8005ac8:	e00e      	b.n	8005ae8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d009      	beq.n	8005ae8 <prvDeleteTCB+0x54>
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	e7fe      	b.n	8005ae6 <prvDeleteTCB+0x52>
	}
 8005ae8:	bf00      	nop
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005af6:	4b0e      	ldr	r3, [pc, #56]	; (8005b30 <prvResetNextTaskUnblockTime+0x40>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <prvResetNextTaskUnblockTime+0x14>
 8005b00:	2301      	movs	r3, #1
 8005b02:	e000      	b.n	8005b06 <prvResetNextTaskUnblockTime+0x16>
 8005b04:	2300      	movs	r3, #0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d004      	beq.n	8005b14 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b0a:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <prvResetNextTaskUnblockTime+0x44>)
 8005b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b10:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b12:	e008      	b.n	8005b26 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b14:	4b06      	ldr	r3, [pc, #24]	; (8005b30 <prvResetNextTaskUnblockTime+0x40>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	4a04      	ldr	r2, [pc, #16]	; (8005b34 <prvResetNextTaskUnblockTime+0x44>)
 8005b24:	6013      	str	r3, [r2, #0]
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bc80      	pop	{r7}
 8005b2e:	4770      	bx	lr
 8005b30:	200005c4 	.word	0x200005c4
 8005b34:	2000062c 	.word	0x2000062c

08005b38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b3e:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <xTaskGetSchedulerState+0x34>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d102      	bne.n	8005b4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b46:	2301      	movs	r3, #1
 8005b48:	607b      	str	r3, [r7, #4]
 8005b4a:	e008      	b.n	8005b5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b4c:	4b08      	ldr	r3, [pc, #32]	; (8005b70 <xTaskGetSchedulerState+0x38>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d102      	bne.n	8005b5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b54:	2302      	movs	r3, #2
 8005b56:	607b      	str	r3, [r7, #4]
 8005b58:	e001      	b.n	8005b5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b5e:	687b      	ldr	r3, [r7, #4]
	}
 8005b60:	4618      	mov	r0, r3
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bc80      	pop	{r7}
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	20000618 	.word	0x20000618
 8005b70:	20000634 	.word	0x20000634

08005b74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d06c      	beq.n	8005c64 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b8a:	4b39      	ldr	r3, [pc, #228]	; (8005c70 <xTaskPriorityDisinherit+0xfc>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d009      	beq.n	8005ba8 <xTaskPriorityDisinherit+0x34>
 8005b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	e7fe      	b.n	8005ba6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d109      	bne.n	8005bc4 <xTaskPriorityDisinherit+0x50>
 8005bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	60bb      	str	r3, [r7, #8]
 8005bc2:	e7fe      	b.n	8005bc2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bc8:	1e5a      	subs	r2, r3, #1
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d044      	beq.n	8005c64 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d140      	bne.n	8005c64 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	3304      	adds	r3, #4
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fe fe1c 	bl	8004824 <uxListRemove>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d115      	bne.n	8005c1e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf6:	491f      	ldr	r1, [pc, #124]	; (8005c74 <xTaskPriorityDisinherit+0x100>)
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	440b      	add	r3, r1
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10a      	bne.n	8005c1e <xTaskPriorityDisinherit+0xaa>
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c12:	43da      	mvns	r2, r3
 8005c14:	4b18      	ldr	r3, [pc, #96]	; (8005c78 <xTaskPriorityDisinherit+0x104>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	4a17      	ldr	r2, [pc, #92]	; (8005c78 <xTaskPriorityDisinherit+0x104>)
 8005c1c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2a:	f1c3 0207 	rsb	r2, r3, #7
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c36:	2201      	movs	r2, #1
 8005c38:	409a      	lsls	r2, r3
 8005c3a:	4b0f      	ldr	r3, [pc, #60]	; (8005c78 <xTaskPriorityDisinherit+0x104>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	4a0d      	ldr	r2, [pc, #52]	; (8005c78 <xTaskPriorityDisinherit+0x104>)
 8005c42:	6013      	str	r3, [r2, #0]
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c48:	4613      	mov	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4a08      	ldr	r2, [pc, #32]	; (8005c74 <xTaskPriorityDisinherit+0x100>)
 8005c52:	441a      	add	r2, r3
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	3304      	adds	r3, #4
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	f7fe fd87 	bl	800476e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c60:	2301      	movs	r3, #1
 8005c62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c64:	697b      	ldr	r3, [r7, #20]
	}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	2000050c 	.word	0x2000050c
 8005c74:	20000510 	.word	0x20000510
 8005c78:	20000614 	.word	0x20000614

08005c7c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c86:	4b29      	ldr	r3, [pc, #164]	; (8005d2c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c8c:	4b28      	ldr	r3, [pc, #160]	; (8005d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fe fdc6 	bl	8004824 <uxListRemove>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10b      	bne.n	8005cb6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005c9e:	4b24      	ldr	r3, [pc, #144]	; (8005d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	43da      	mvns	r2, r3
 8005cac:	4b21      	ldr	r3, [pc, #132]	; (8005d34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	4a20      	ldr	r2, [pc, #128]	; (8005d34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cb4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbc:	d10a      	bne.n	8005cd4 <prvAddCurrentTaskToDelayedList+0x58>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d007      	beq.n	8005cd4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cc4:	4b1a      	ldr	r3, [pc, #104]	; (8005d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	4619      	mov	r1, r3
 8005ccc:	481a      	ldr	r0, [pc, #104]	; (8005d38 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005cce:	f7fe fd4e 	bl	800476e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cd2:	e026      	b.n	8005d22 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4413      	add	r3, r2
 8005cda:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cdc:	4b14      	ldr	r3, [pc, #80]	; (8005d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d209      	bcs.n	8005d00 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cec:	4b13      	ldr	r3, [pc, #76]	; (8005d3c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	4b0f      	ldr	r3, [pc, #60]	; (8005d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	f7fe fd5b 	bl	80047b4 <vListInsert>
}
 8005cfe:	e010      	b.n	8005d22 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d00:	4b0f      	ldr	r3, [pc, #60]	; (8005d40 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	f7fe fd51 	bl	80047b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d12:	4b0c      	ldr	r3, [pc, #48]	; (8005d44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d202      	bcs.n	8005d22 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005d1c:	4a09      	ldr	r2, [pc, #36]	; (8005d44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6013      	str	r3, [r2, #0]
}
 8005d22:	bf00      	nop
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000610 	.word	0x20000610
 8005d30:	2000050c 	.word	0x2000050c
 8005d34:	20000614 	.word	0x20000614
 8005d38:	200005f8 	.word	0x200005f8
 8005d3c:	200005c8 	.word	0x200005c8
 8005d40:	200005c4 	.word	0x200005c4
 8005d44:	2000062c 	.word	0x2000062c

08005d48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3b04      	subs	r3, #4
 8005d58:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3b04      	subs	r3, #4
 8005d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f023 0201 	bic.w	r2, r3, #1
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3b04      	subs	r3, #4
 8005d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d78:	4a08      	ldr	r2, [pc, #32]	; (8005d9c <pxPortInitialiseStack+0x54>)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3b14      	subs	r3, #20
 8005d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3b20      	subs	r3, #32
 8005d8e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d90:	68fb      	ldr	r3, [r7, #12]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bc80      	pop	{r7}
 8005d9a:	4770      	bx	lr
 8005d9c:	08005da1 	.word	0x08005da1

08005da0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005da6:	2300      	movs	r3, #0
 8005da8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005daa:	4b10      	ldr	r3, [pc, #64]	; (8005dec <prvTaskExitError+0x4c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db2:	d009      	beq.n	8005dc8 <prvTaskExitError+0x28>
 8005db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	e7fe      	b.n	8005dc6 <prvTaskExitError+0x26>
 8005dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005dda:	bf00      	nop
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0fc      	beq.n	8005ddc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005de2:	bf00      	nop
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bc80      	pop	{r7}
 8005dea:	4770      	bx	lr
 8005dec:	20000020 	.word	0x20000020

08005df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005df0:	4b07      	ldr	r3, [pc, #28]	; (8005e10 <pxCurrentTCBConst2>)
 8005df2:	6819      	ldr	r1, [r3, #0]
 8005df4:	6808      	ldr	r0, [r1, #0]
 8005df6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005dfa:	f380 8809 	msr	PSP, r0
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f04f 0000 	mov.w	r0, #0
 8005e06:	f380 8811 	msr	BASEPRI, r0
 8005e0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005e0e:	4770      	bx	lr

08005e10 <pxCurrentTCBConst2>:
 8005e10:	2000050c 	.word	0x2000050c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e14:	bf00      	nop
 8005e16:	bf00      	nop

08005e18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005e18:	4806      	ldr	r0, [pc, #24]	; (8005e34 <prvPortStartFirstTask+0x1c>)
 8005e1a:	6800      	ldr	r0, [r0, #0]
 8005e1c:	6800      	ldr	r0, [r0, #0]
 8005e1e:	f380 8808 	msr	MSP, r0
 8005e22:	b662      	cpsie	i
 8005e24:	b661      	cpsie	f
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	df00      	svc	0
 8005e30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e32:	bf00      	nop
 8005e34:	e000ed08 	.word	0xe000ed08

08005e38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e3e:	4b31      	ldr	r3, [pc, #196]	; (8005f04 <xPortStartScheduler+0xcc>)
 8005e40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	22ff      	movs	r2, #255	; 0xff
 8005e4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	4b29      	ldr	r3, [pc, #164]	; (8005f08 <xPortStartScheduler+0xd0>)
 8005e64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e66:	4b29      	ldr	r3, [pc, #164]	; (8005f0c <xPortStartScheduler+0xd4>)
 8005e68:	2207      	movs	r2, #7
 8005e6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e6c:	e009      	b.n	8005e82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005e6e:	4b27      	ldr	r3, [pc, #156]	; (8005f0c <xPortStartScheduler+0xd4>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	4a25      	ldr	r2, [pc, #148]	; (8005f0c <xPortStartScheduler+0xd4>)
 8005e76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e78:	78fb      	ldrb	r3, [r7, #3]
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e82:	78fb      	ldrb	r3, [r7, #3]
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e8a:	2b80      	cmp	r3, #128	; 0x80
 8005e8c:	d0ef      	beq.n	8005e6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e8e:	4b1f      	ldr	r3, [pc, #124]	; (8005f0c <xPortStartScheduler+0xd4>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f1c3 0307 	rsb	r3, r3, #7
 8005e96:	2b04      	cmp	r3, #4
 8005e98:	d009      	beq.n	8005eae <xPortStartScheduler+0x76>
 8005e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	60bb      	str	r3, [r7, #8]
 8005eac:	e7fe      	b.n	8005eac <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005eae:	4b17      	ldr	r3, [pc, #92]	; (8005f0c <xPortStartScheduler+0xd4>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	021b      	lsls	r3, r3, #8
 8005eb4:	4a15      	ldr	r2, [pc, #84]	; (8005f0c <xPortStartScheduler+0xd4>)
 8005eb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005eb8:	4b14      	ldr	r3, [pc, #80]	; (8005f0c <xPortStartScheduler+0xd4>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ec0:	4a12      	ldr	r2, [pc, #72]	; (8005f0c <xPortStartScheduler+0xd4>)
 8005ec2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ecc:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <xPortStartScheduler+0xd8>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a0f      	ldr	r2, [pc, #60]	; (8005f10 <xPortStartScheduler+0xd8>)
 8005ed2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ed6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ed8:	4b0d      	ldr	r3, [pc, #52]	; (8005f10 <xPortStartScheduler+0xd8>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a0c      	ldr	r2, [pc, #48]	; (8005f10 <xPortStartScheduler+0xd8>)
 8005ede:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ee2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ee4:	f000 f8b0 	bl	8006048 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ee8:	4b0a      	ldr	r3, [pc, #40]	; (8005f14 <xPortStartScheduler+0xdc>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005eee:	f7ff ff93 	bl	8005e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ef2:	f7ff fbe9 	bl	80056c8 <vTaskSwitchContext>
	prvTaskExitError();
 8005ef6:	f7ff ff53 	bl	8005da0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	e000e400 	.word	0xe000e400
 8005f08:	20000638 	.word	0x20000638
 8005f0c:	2000063c 	.word	0x2000063c
 8005f10:	e000ed20 	.word	0xe000ed20
 8005f14:	20000020 	.word	0x20000020

08005f18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f30:	4b0e      	ldr	r3, [pc, #56]	; (8005f6c <vPortEnterCritical+0x54>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3301      	adds	r3, #1
 8005f36:	4a0d      	ldr	r2, [pc, #52]	; (8005f6c <vPortEnterCritical+0x54>)
 8005f38:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <vPortEnterCritical+0x54>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d10e      	bne.n	8005f60 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f42:	4b0b      	ldr	r3, [pc, #44]	; (8005f70 <vPortEnterCritical+0x58>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d009      	beq.n	8005f60 <vPortEnterCritical+0x48>
 8005f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	603b      	str	r3, [r7, #0]
 8005f5e:	e7fe      	b.n	8005f5e <vPortEnterCritical+0x46>
	}
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bc80      	pop	{r7}
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	20000020 	.word	0x20000020
 8005f70:	e000ed04 	.word	0xe000ed04

08005f74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f7a:	4b10      	ldr	r3, [pc, #64]	; (8005fbc <vPortExitCritical+0x48>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d109      	bne.n	8005f96 <vPortExitCritical+0x22>
 8005f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	607b      	str	r3, [r7, #4]
 8005f94:	e7fe      	b.n	8005f94 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005f96:	4b09      	ldr	r3, [pc, #36]	; (8005fbc <vPortExitCritical+0x48>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	4a07      	ldr	r2, [pc, #28]	; (8005fbc <vPortExitCritical+0x48>)
 8005f9e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fa0:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <vPortExitCritical+0x48>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d104      	bne.n	8005fb2 <vPortExitCritical+0x3e>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bc80      	pop	{r7}
 8005fba:	4770      	bx	lr
 8005fbc:	20000020 	.word	0x20000020

08005fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fc0:	f3ef 8009 	mrs	r0, PSP
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	4b0d      	ldr	r3, [pc, #52]	; (8006000 <pxCurrentTCBConst>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005fd0:	6010      	str	r0, [r2, #0]
 8005fd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005fd6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005fda:	f380 8811 	msr	BASEPRI, r0
 8005fde:	f7ff fb73 	bl	80056c8 <vTaskSwitchContext>
 8005fe2:	f04f 0000 	mov.w	r0, #0
 8005fe6:	f380 8811 	msr	BASEPRI, r0
 8005fea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005fee:	6819      	ldr	r1, [r3, #0]
 8005ff0:	6808      	ldr	r0, [r1, #0]
 8005ff2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ff6:	f380 8809 	msr	PSP, r0
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	4770      	bx	lr

08006000 <pxCurrentTCBConst>:
 8006000:	2000050c 	.word	0x2000050c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop

08006008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006020:	f7ff fa96 	bl	8005550 <xTaskIncrementTick>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800602a:	4b06      	ldr	r3, [pc, #24]	; (8006044 <SysTick_Handler+0x3c>)
 800602c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	2300      	movs	r3, #0
 8006034:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800603c:	bf00      	nop
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	e000ed04 	.word	0xe000ed04

08006048 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800604c:	4b0a      	ldr	r3, [pc, #40]	; (8006078 <vPortSetupTimerInterrupt+0x30>)
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006052:	4b0a      	ldr	r3, [pc, #40]	; (800607c <vPortSetupTimerInterrupt+0x34>)
 8006054:	2200      	movs	r2, #0
 8006056:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006058:	4b09      	ldr	r3, [pc, #36]	; (8006080 <vPortSetupTimerInterrupt+0x38>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a09      	ldr	r2, [pc, #36]	; (8006084 <vPortSetupTimerInterrupt+0x3c>)
 800605e:	fba2 2303 	umull	r2, r3, r2, r3
 8006062:	099b      	lsrs	r3, r3, #6
 8006064:	4a08      	ldr	r2, [pc, #32]	; (8006088 <vPortSetupTimerInterrupt+0x40>)
 8006066:	3b01      	subs	r3, #1
 8006068:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800606a:	4b03      	ldr	r3, [pc, #12]	; (8006078 <vPortSetupTimerInterrupt+0x30>)
 800606c:	2207      	movs	r2, #7
 800606e:	601a      	str	r2, [r3, #0]
}
 8006070:	bf00      	nop
 8006072:	46bd      	mov	sp, r7
 8006074:	bc80      	pop	{r7}
 8006076:	4770      	bx	lr
 8006078:	e000e010 	.word	0xe000e010
 800607c:	e000e018 	.word	0xe000e018
 8006080:	20000014 	.word	0x20000014
 8006084:	10624dd3 	.word	0x10624dd3
 8006088:	e000e014 	.word	0xe000e014

0800608c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08a      	sub	sp, #40	; 0x28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006094:	2300      	movs	r3, #0
 8006096:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006098:	f7ff f9b0 	bl	80053fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800609c:	4b57      	ldr	r3, [pc, #348]	; (80061fc <pvPortMalloc+0x170>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80060a4:	f000 f90c 	bl	80062c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060a8:	4b55      	ldr	r3, [pc, #340]	; (8006200 <pvPortMalloc+0x174>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4013      	ands	r3, r2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f040 808c 	bne.w	80061ce <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d01c      	beq.n	80060f6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80060bc:	2208      	movs	r2, #8
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4413      	add	r3, r2
 80060c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f003 0307 	and.w	r3, r3, #7
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d013      	beq.n	80060f6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f023 0307 	bic.w	r3, r3, #7
 80060d4:	3308      	adds	r3, #8
 80060d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d009      	beq.n	80060f6 <pvPortMalloc+0x6a>
	__asm volatile
 80060e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e6:	f383 8811 	msr	BASEPRI, r3
 80060ea:	f3bf 8f6f 	isb	sy
 80060ee:	f3bf 8f4f 	dsb	sy
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	e7fe      	b.n	80060f4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d068      	beq.n	80061ce <pvPortMalloc+0x142>
 80060fc:	4b41      	ldr	r3, [pc, #260]	; (8006204 <pvPortMalloc+0x178>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	429a      	cmp	r2, r3
 8006104:	d863      	bhi.n	80061ce <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006106:	4b40      	ldr	r3, [pc, #256]	; (8006208 <pvPortMalloc+0x17c>)
 8006108:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800610a:	4b3f      	ldr	r3, [pc, #252]	; (8006208 <pvPortMalloc+0x17c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006110:	e004      	b.n	800611c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	429a      	cmp	r2, r3
 8006124:	d903      	bls.n	800612e <pvPortMalloc+0xa2>
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1f1      	bne.n	8006112 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800612e:	4b33      	ldr	r3, [pc, #204]	; (80061fc <pvPortMalloc+0x170>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006134:	429a      	cmp	r2, r3
 8006136:	d04a      	beq.n	80061ce <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2208      	movs	r2, #8
 800613e:	4413      	add	r3, r2
 8006140:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	1ad2      	subs	r2, r2, r3
 8006152:	2308      	movs	r3, #8
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	429a      	cmp	r2, r3
 8006158:	d91e      	bls.n	8006198 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800615a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4413      	add	r3, r2
 8006160:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	2b00      	cmp	r3, #0
 800616a:	d009      	beq.n	8006180 <pvPortMalloc+0xf4>
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	613b      	str	r3, [r7, #16]
 800617e:	e7fe      	b.n	800617e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	1ad2      	subs	r2, r2, r3
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006192:	69b8      	ldr	r0, [r7, #24]
 8006194:	f000 f8f6 	bl	8006384 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006198:	4b1a      	ldr	r3, [pc, #104]	; (8006204 <pvPortMalloc+0x178>)
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	4a18      	ldr	r2, [pc, #96]	; (8006204 <pvPortMalloc+0x178>)
 80061a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80061a6:	4b17      	ldr	r3, [pc, #92]	; (8006204 <pvPortMalloc+0x178>)
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	4b18      	ldr	r3, [pc, #96]	; (800620c <pvPortMalloc+0x180>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d203      	bcs.n	80061ba <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80061b2:	4b14      	ldr	r3, [pc, #80]	; (8006204 <pvPortMalloc+0x178>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a15      	ldr	r2, [pc, #84]	; (800620c <pvPortMalloc+0x180>)
 80061b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	4b10      	ldr	r3, [pc, #64]	; (8006200 <pvPortMalloc+0x174>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80061ce:	f7ff f923 	bl	8005418 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d009      	beq.n	80061f0 <pvPortMalloc+0x164>
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	60fb      	str	r3, [r7, #12]
 80061ee:	e7fe      	b.n	80061ee <pvPortMalloc+0x162>
	return pvReturn;
 80061f0:	69fb      	ldr	r3, [r7, #28]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3728      	adds	r7, #40	; 0x28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20002e48 	.word	0x20002e48
 8006200:	20002e54 	.word	0x20002e54
 8006204:	20002e4c 	.word	0x20002e4c
 8006208:	20002e40 	.word	0x20002e40
 800620c:	20002e50 	.word	0x20002e50

08006210 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d046      	beq.n	80062b0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006222:	2308      	movs	r3, #8
 8006224:	425b      	negs	r3, r3
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	4413      	add	r3, r2
 800622a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	4b20      	ldr	r3, [pc, #128]	; (80062b8 <vPortFree+0xa8>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4013      	ands	r3, r2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d109      	bne.n	8006252 <vPortFree+0x42>
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	e7fe      	b.n	8006250 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d009      	beq.n	800626e <vPortFree+0x5e>
 800625a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	60bb      	str	r3, [r7, #8]
 800626c:	e7fe      	b.n	800626c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	4b11      	ldr	r3, [pc, #68]	; (80062b8 <vPortFree+0xa8>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4013      	ands	r3, r2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d019      	beq.n	80062b0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d115      	bne.n	80062b0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	4b0b      	ldr	r3, [pc, #44]	; (80062b8 <vPortFree+0xa8>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	43db      	mvns	r3, r3
 800628e:	401a      	ands	r2, r3
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006294:	f7ff f8b2 	bl	80053fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	4b07      	ldr	r3, [pc, #28]	; (80062bc <vPortFree+0xac>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4413      	add	r3, r2
 80062a2:	4a06      	ldr	r2, [pc, #24]	; (80062bc <vPortFree+0xac>)
 80062a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80062a6:	6938      	ldr	r0, [r7, #16]
 80062a8:	f000 f86c 	bl	8006384 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80062ac:	f7ff f8b4 	bl	8005418 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80062b0:	bf00      	nop
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	20002e54 	.word	0x20002e54
 80062bc:	20002e4c 	.word	0x20002e4c

080062c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80062ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80062cc:	4b27      	ldr	r3, [pc, #156]	; (800636c <prvHeapInit+0xac>)
 80062ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00c      	beq.n	80062f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3307      	adds	r3, #7
 80062de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0307 	bic.w	r3, r3, #7
 80062e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	4a1f      	ldr	r2, [pc, #124]	; (800636c <prvHeapInit+0xac>)
 80062f0:	4413      	add	r3, r2
 80062f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062f8:	4a1d      	ldr	r2, [pc, #116]	; (8006370 <prvHeapInit+0xb0>)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80062fe:	4b1c      	ldr	r3, [pc, #112]	; (8006370 <prvHeapInit+0xb0>)
 8006300:	2200      	movs	r2, #0
 8006302:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	4413      	add	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800630c:	2208      	movs	r2, #8
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	1a9b      	subs	r3, r3, r2
 8006312:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f023 0307 	bic.w	r3, r3, #7
 800631a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4a15      	ldr	r2, [pc, #84]	; (8006374 <prvHeapInit+0xb4>)
 8006320:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006322:	4b14      	ldr	r3, [pc, #80]	; (8006374 <prvHeapInit+0xb4>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2200      	movs	r2, #0
 8006328:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800632a:	4b12      	ldr	r3, [pc, #72]	; (8006374 <prvHeapInit+0xb4>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2200      	movs	r2, #0
 8006330:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	1ad2      	subs	r2, r2, r3
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006340:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <prvHeapInit+0xb4>)
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	4a0a      	ldr	r2, [pc, #40]	; (8006378 <prvHeapInit+0xb8>)
 800634e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	4a09      	ldr	r2, [pc, #36]	; (800637c <prvHeapInit+0xbc>)
 8006356:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006358:	4b09      	ldr	r3, [pc, #36]	; (8006380 <prvHeapInit+0xc0>)
 800635a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800635e:	601a      	str	r2, [r3, #0]
}
 8006360:	bf00      	nop
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	bc80      	pop	{r7}
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	20000640 	.word	0x20000640
 8006370:	20002e40 	.word	0x20002e40
 8006374:	20002e48 	.word	0x20002e48
 8006378:	20002e50 	.word	0x20002e50
 800637c:	20002e4c 	.word	0x20002e4c
 8006380:	20002e54 	.word	0x20002e54

08006384 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800638c:	4b27      	ldr	r3, [pc, #156]	; (800642c <prvInsertBlockIntoFreeList+0xa8>)
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	e002      	b.n	8006398 <prvInsertBlockIntoFreeList+0x14>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d8f7      	bhi.n	8006392 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	4413      	add	r3, r2
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d108      	bne.n	80063c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	441a      	add	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	441a      	add	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d118      	bne.n	800640c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	4b14      	ldr	r3, [pc, #80]	; (8006430 <prvInsertBlockIntoFreeList+0xac>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d00d      	beq.n	8006402 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	441a      	add	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	e008      	b.n	8006414 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006402:	4b0b      	ldr	r3, [pc, #44]	; (8006430 <prvInsertBlockIntoFreeList+0xac>)
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	e003      	b.n	8006414 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	429a      	cmp	r2, r3
 800641a:	d002      	beq.n	8006422 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006422:	bf00      	nop
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	bc80      	pop	{r7}
 800642a:	4770      	bx	lr
 800642c:	20002e40 	.word	0x20002e40
 8006430:	20002e48 	.word	0x20002e48

08006434 <__errno>:
 8006434:	4b01      	ldr	r3, [pc, #4]	; (800643c <__errno+0x8>)
 8006436:	6818      	ldr	r0, [r3, #0]
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	20000024 	.word	0x20000024

08006440 <__libc_init_array>:
 8006440:	b570      	push	{r4, r5, r6, lr}
 8006442:	2500      	movs	r5, #0
 8006444:	4e0c      	ldr	r6, [pc, #48]	; (8006478 <__libc_init_array+0x38>)
 8006446:	4c0d      	ldr	r4, [pc, #52]	; (800647c <__libc_init_array+0x3c>)
 8006448:	1ba4      	subs	r4, r4, r6
 800644a:	10a4      	asrs	r4, r4, #2
 800644c:	42a5      	cmp	r5, r4
 800644e:	d109      	bne.n	8006464 <__libc_init_array+0x24>
 8006450:	f000 fc36 	bl	8006cc0 <_init>
 8006454:	2500      	movs	r5, #0
 8006456:	4e0a      	ldr	r6, [pc, #40]	; (8006480 <__libc_init_array+0x40>)
 8006458:	4c0a      	ldr	r4, [pc, #40]	; (8006484 <__libc_init_array+0x44>)
 800645a:	1ba4      	subs	r4, r4, r6
 800645c:	10a4      	asrs	r4, r4, #2
 800645e:	42a5      	cmp	r5, r4
 8006460:	d105      	bne.n	800646e <__libc_init_array+0x2e>
 8006462:	bd70      	pop	{r4, r5, r6, pc}
 8006464:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006468:	4798      	blx	r3
 800646a:	3501      	adds	r5, #1
 800646c:	e7ee      	b.n	800644c <__libc_init_array+0xc>
 800646e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006472:	4798      	blx	r3
 8006474:	3501      	adds	r5, #1
 8006476:	e7f2      	b.n	800645e <__libc_init_array+0x1e>
 8006478:	08006e08 	.word	0x08006e08
 800647c:	08006e08 	.word	0x08006e08
 8006480:	08006e08 	.word	0x08006e08
 8006484:	08006e0c 	.word	0x08006e0c

08006488 <memcpy>:
 8006488:	b510      	push	{r4, lr}
 800648a:	1e43      	subs	r3, r0, #1
 800648c:	440a      	add	r2, r1
 800648e:	4291      	cmp	r1, r2
 8006490:	d100      	bne.n	8006494 <memcpy+0xc>
 8006492:	bd10      	pop	{r4, pc}
 8006494:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006498:	f803 4f01 	strb.w	r4, [r3, #1]!
 800649c:	e7f7      	b.n	800648e <memcpy+0x6>

0800649e <memset>:
 800649e:	4603      	mov	r3, r0
 80064a0:	4402      	add	r2, r0
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d100      	bne.n	80064a8 <memset+0xa>
 80064a6:	4770      	bx	lr
 80064a8:	f803 1b01 	strb.w	r1, [r3], #1
 80064ac:	e7f9      	b.n	80064a2 <memset+0x4>
	...

080064b0 <siprintf>:
 80064b0:	b40e      	push	{r1, r2, r3}
 80064b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064b6:	b500      	push	{lr}
 80064b8:	b09c      	sub	sp, #112	; 0x70
 80064ba:	ab1d      	add	r3, sp, #116	; 0x74
 80064bc:	9002      	str	r0, [sp, #8]
 80064be:	9006      	str	r0, [sp, #24]
 80064c0:	9107      	str	r1, [sp, #28]
 80064c2:	9104      	str	r1, [sp, #16]
 80064c4:	4808      	ldr	r0, [pc, #32]	; (80064e8 <siprintf+0x38>)
 80064c6:	4909      	ldr	r1, [pc, #36]	; (80064ec <siprintf+0x3c>)
 80064c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80064cc:	9105      	str	r1, [sp, #20]
 80064ce:	6800      	ldr	r0, [r0, #0]
 80064d0:	a902      	add	r1, sp, #8
 80064d2:	9301      	str	r3, [sp, #4]
 80064d4:	f000 f866 	bl	80065a4 <_svfiprintf_r>
 80064d8:	2200      	movs	r2, #0
 80064da:	9b02      	ldr	r3, [sp, #8]
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	b01c      	add	sp, #112	; 0x70
 80064e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80064e4:	b003      	add	sp, #12
 80064e6:	4770      	bx	lr
 80064e8:	20000024 	.word	0x20000024
 80064ec:	ffff0208 	.word	0xffff0208

080064f0 <__ssputs_r>:
 80064f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064f4:	688e      	ldr	r6, [r1, #8]
 80064f6:	4682      	mov	sl, r0
 80064f8:	429e      	cmp	r6, r3
 80064fa:	460c      	mov	r4, r1
 80064fc:	4690      	mov	r8, r2
 80064fe:	4699      	mov	r9, r3
 8006500:	d837      	bhi.n	8006572 <__ssputs_r+0x82>
 8006502:	898a      	ldrh	r2, [r1, #12]
 8006504:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006508:	d031      	beq.n	800656e <__ssputs_r+0x7e>
 800650a:	2302      	movs	r3, #2
 800650c:	6825      	ldr	r5, [r4, #0]
 800650e:	6909      	ldr	r1, [r1, #16]
 8006510:	1a6f      	subs	r7, r5, r1
 8006512:	6965      	ldr	r5, [r4, #20]
 8006514:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006518:	fb95 f5f3 	sdiv	r5, r5, r3
 800651c:	f109 0301 	add.w	r3, r9, #1
 8006520:	443b      	add	r3, r7
 8006522:	429d      	cmp	r5, r3
 8006524:	bf38      	it	cc
 8006526:	461d      	movcc	r5, r3
 8006528:	0553      	lsls	r3, r2, #21
 800652a:	d530      	bpl.n	800658e <__ssputs_r+0x9e>
 800652c:	4629      	mov	r1, r5
 800652e:	f000 fb2d 	bl	8006b8c <_malloc_r>
 8006532:	4606      	mov	r6, r0
 8006534:	b950      	cbnz	r0, 800654c <__ssputs_r+0x5c>
 8006536:	230c      	movs	r3, #12
 8006538:	f04f 30ff 	mov.w	r0, #4294967295
 800653c:	f8ca 3000 	str.w	r3, [sl]
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006546:	81a3      	strh	r3, [r4, #12]
 8006548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654c:	463a      	mov	r2, r7
 800654e:	6921      	ldr	r1, [r4, #16]
 8006550:	f7ff ff9a 	bl	8006488 <memcpy>
 8006554:	89a3      	ldrh	r3, [r4, #12]
 8006556:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800655a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800655e:	81a3      	strh	r3, [r4, #12]
 8006560:	6126      	str	r6, [r4, #16]
 8006562:	443e      	add	r6, r7
 8006564:	6026      	str	r6, [r4, #0]
 8006566:	464e      	mov	r6, r9
 8006568:	6165      	str	r5, [r4, #20]
 800656a:	1bed      	subs	r5, r5, r7
 800656c:	60a5      	str	r5, [r4, #8]
 800656e:	454e      	cmp	r6, r9
 8006570:	d900      	bls.n	8006574 <__ssputs_r+0x84>
 8006572:	464e      	mov	r6, r9
 8006574:	4632      	mov	r2, r6
 8006576:	4641      	mov	r1, r8
 8006578:	6820      	ldr	r0, [r4, #0]
 800657a:	f000 faa1 	bl	8006ac0 <memmove>
 800657e:	68a3      	ldr	r3, [r4, #8]
 8006580:	2000      	movs	r0, #0
 8006582:	1b9b      	subs	r3, r3, r6
 8006584:	60a3      	str	r3, [r4, #8]
 8006586:	6823      	ldr	r3, [r4, #0]
 8006588:	441e      	add	r6, r3
 800658a:	6026      	str	r6, [r4, #0]
 800658c:	e7dc      	b.n	8006548 <__ssputs_r+0x58>
 800658e:	462a      	mov	r2, r5
 8006590:	f000 fb56 	bl	8006c40 <_realloc_r>
 8006594:	4606      	mov	r6, r0
 8006596:	2800      	cmp	r0, #0
 8006598:	d1e2      	bne.n	8006560 <__ssputs_r+0x70>
 800659a:	6921      	ldr	r1, [r4, #16]
 800659c:	4650      	mov	r0, sl
 800659e:	f000 faa9 	bl	8006af4 <_free_r>
 80065a2:	e7c8      	b.n	8006536 <__ssputs_r+0x46>

080065a4 <_svfiprintf_r>:
 80065a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a8:	461d      	mov	r5, r3
 80065aa:	898b      	ldrh	r3, [r1, #12]
 80065ac:	b09d      	sub	sp, #116	; 0x74
 80065ae:	061f      	lsls	r7, r3, #24
 80065b0:	4680      	mov	r8, r0
 80065b2:	460c      	mov	r4, r1
 80065b4:	4616      	mov	r6, r2
 80065b6:	d50f      	bpl.n	80065d8 <_svfiprintf_r+0x34>
 80065b8:	690b      	ldr	r3, [r1, #16]
 80065ba:	b96b      	cbnz	r3, 80065d8 <_svfiprintf_r+0x34>
 80065bc:	2140      	movs	r1, #64	; 0x40
 80065be:	f000 fae5 	bl	8006b8c <_malloc_r>
 80065c2:	6020      	str	r0, [r4, #0]
 80065c4:	6120      	str	r0, [r4, #16]
 80065c6:	b928      	cbnz	r0, 80065d4 <_svfiprintf_r+0x30>
 80065c8:	230c      	movs	r3, #12
 80065ca:	f8c8 3000 	str.w	r3, [r8]
 80065ce:	f04f 30ff 	mov.w	r0, #4294967295
 80065d2:	e0c8      	b.n	8006766 <_svfiprintf_r+0x1c2>
 80065d4:	2340      	movs	r3, #64	; 0x40
 80065d6:	6163      	str	r3, [r4, #20]
 80065d8:	2300      	movs	r3, #0
 80065da:	9309      	str	r3, [sp, #36]	; 0x24
 80065dc:	2320      	movs	r3, #32
 80065de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065e2:	2330      	movs	r3, #48	; 0x30
 80065e4:	f04f 0b01 	mov.w	fp, #1
 80065e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065ec:	9503      	str	r5, [sp, #12]
 80065ee:	4637      	mov	r7, r6
 80065f0:	463d      	mov	r5, r7
 80065f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80065f6:	b10b      	cbz	r3, 80065fc <_svfiprintf_r+0x58>
 80065f8:	2b25      	cmp	r3, #37	; 0x25
 80065fa:	d13e      	bne.n	800667a <_svfiprintf_r+0xd6>
 80065fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8006600:	d00b      	beq.n	800661a <_svfiprintf_r+0x76>
 8006602:	4653      	mov	r3, sl
 8006604:	4632      	mov	r2, r6
 8006606:	4621      	mov	r1, r4
 8006608:	4640      	mov	r0, r8
 800660a:	f7ff ff71 	bl	80064f0 <__ssputs_r>
 800660e:	3001      	adds	r0, #1
 8006610:	f000 80a4 	beq.w	800675c <_svfiprintf_r+0x1b8>
 8006614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006616:	4453      	add	r3, sl
 8006618:	9309      	str	r3, [sp, #36]	; 0x24
 800661a:	783b      	ldrb	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 809d 	beq.w	800675c <_svfiprintf_r+0x1b8>
 8006622:	2300      	movs	r3, #0
 8006624:	f04f 32ff 	mov.w	r2, #4294967295
 8006628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800662c:	9304      	str	r3, [sp, #16]
 800662e:	9307      	str	r3, [sp, #28]
 8006630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006634:	931a      	str	r3, [sp, #104]	; 0x68
 8006636:	462f      	mov	r7, r5
 8006638:	2205      	movs	r2, #5
 800663a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800663e:	4850      	ldr	r0, [pc, #320]	; (8006780 <_svfiprintf_r+0x1dc>)
 8006640:	f000 fa30 	bl	8006aa4 <memchr>
 8006644:	9b04      	ldr	r3, [sp, #16]
 8006646:	b9d0      	cbnz	r0, 800667e <_svfiprintf_r+0xda>
 8006648:	06d9      	lsls	r1, r3, #27
 800664a:	bf44      	itt	mi
 800664c:	2220      	movmi	r2, #32
 800664e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006652:	071a      	lsls	r2, r3, #28
 8006654:	bf44      	itt	mi
 8006656:	222b      	movmi	r2, #43	; 0x2b
 8006658:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800665c:	782a      	ldrb	r2, [r5, #0]
 800665e:	2a2a      	cmp	r2, #42	; 0x2a
 8006660:	d015      	beq.n	800668e <_svfiprintf_r+0xea>
 8006662:	462f      	mov	r7, r5
 8006664:	2000      	movs	r0, #0
 8006666:	250a      	movs	r5, #10
 8006668:	9a07      	ldr	r2, [sp, #28]
 800666a:	4639      	mov	r1, r7
 800666c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006670:	3b30      	subs	r3, #48	; 0x30
 8006672:	2b09      	cmp	r3, #9
 8006674:	d94d      	bls.n	8006712 <_svfiprintf_r+0x16e>
 8006676:	b1b8      	cbz	r0, 80066a8 <_svfiprintf_r+0x104>
 8006678:	e00f      	b.n	800669a <_svfiprintf_r+0xf6>
 800667a:	462f      	mov	r7, r5
 800667c:	e7b8      	b.n	80065f0 <_svfiprintf_r+0x4c>
 800667e:	4a40      	ldr	r2, [pc, #256]	; (8006780 <_svfiprintf_r+0x1dc>)
 8006680:	463d      	mov	r5, r7
 8006682:	1a80      	subs	r0, r0, r2
 8006684:	fa0b f000 	lsl.w	r0, fp, r0
 8006688:	4318      	orrs	r0, r3
 800668a:	9004      	str	r0, [sp, #16]
 800668c:	e7d3      	b.n	8006636 <_svfiprintf_r+0x92>
 800668e:	9a03      	ldr	r2, [sp, #12]
 8006690:	1d11      	adds	r1, r2, #4
 8006692:	6812      	ldr	r2, [r2, #0]
 8006694:	9103      	str	r1, [sp, #12]
 8006696:	2a00      	cmp	r2, #0
 8006698:	db01      	blt.n	800669e <_svfiprintf_r+0xfa>
 800669a:	9207      	str	r2, [sp, #28]
 800669c:	e004      	b.n	80066a8 <_svfiprintf_r+0x104>
 800669e:	4252      	negs	r2, r2
 80066a0:	f043 0302 	orr.w	r3, r3, #2
 80066a4:	9207      	str	r2, [sp, #28]
 80066a6:	9304      	str	r3, [sp, #16]
 80066a8:	783b      	ldrb	r3, [r7, #0]
 80066aa:	2b2e      	cmp	r3, #46	; 0x2e
 80066ac:	d10c      	bne.n	80066c8 <_svfiprintf_r+0x124>
 80066ae:	787b      	ldrb	r3, [r7, #1]
 80066b0:	2b2a      	cmp	r3, #42	; 0x2a
 80066b2:	d133      	bne.n	800671c <_svfiprintf_r+0x178>
 80066b4:	9b03      	ldr	r3, [sp, #12]
 80066b6:	3702      	adds	r7, #2
 80066b8:	1d1a      	adds	r2, r3, #4
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	9203      	str	r2, [sp, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	bfb8      	it	lt
 80066c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80066c6:	9305      	str	r3, [sp, #20]
 80066c8:	4d2e      	ldr	r5, [pc, #184]	; (8006784 <_svfiprintf_r+0x1e0>)
 80066ca:	2203      	movs	r2, #3
 80066cc:	7839      	ldrb	r1, [r7, #0]
 80066ce:	4628      	mov	r0, r5
 80066d0:	f000 f9e8 	bl	8006aa4 <memchr>
 80066d4:	b138      	cbz	r0, 80066e6 <_svfiprintf_r+0x142>
 80066d6:	2340      	movs	r3, #64	; 0x40
 80066d8:	1b40      	subs	r0, r0, r5
 80066da:	fa03 f000 	lsl.w	r0, r3, r0
 80066de:	9b04      	ldr	r3, [sp, #16]
 80066e0:	3701      	adds	r7, #1
 80066e2:	4303      	orrs	r3, r0
 80066e4:	9304      	str	r3, [sp, #16]
 80066e6:	7839      	ldrb	r1, [r7, #0]
 80066e8:	2206      	movs	r2, #6
 80066ea:	4827      	ldr	r0, [pc, #156]	; (8006788 <_svfiprintf_r+0x1e4>)
 80066ec:	1c7e      	adds	r6, r7, #1
 80066ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066f2:	f000 f9d7 	bl	8006aa4 <memchr>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d038      	beq.n	800676c <_svfiprintf_r+0x1c8>
 80066fa:	4b24      	ldr	r3, [pc, #144]	; (800678c <_svfiprintf_r+0x1e8>)
 80066fc:	bb13      	cbnz	r3, 8006744 <_svfiprintf_r+0x1a0>
 80066fe:	9b03      	ldr	r3, [sp, #12]
 8006700:	3307      	adds	r3, #7
 8006702:	f023 0307 	bic.w	r3, r3, #7
 8006706:	3308      	adds	r3, #8
 8006708:	9303      	str	r3, [sp, #12]
 800670a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670c:	444b      	add	r3, r9
 800670e:	9309      	str	r3, [sp, #36]	; 0x24
 8006710:	e76d      	b.n	80065ee <_svfiprintf_r+0x4a>
 8006712:	fb05 3202 	mla	r2, r5, r2, r3
 8006716:	2001      	movs	r0, #1
 8006718:	460f      	mov	r7, r1
 800671a:	e7a6      	b.n	800666a <_svfiprintf_r+0xc6>
 800671c:	2300      	movs	r3, #0
 800671e:	250a      	movs	r5, #10
 8006720:	4619      	mov	r1, r3
 8006722:	3701      	adds	r7, #1
 8006724:	9305      	str	r3, [sp, #20]
 8006726:	4638      	mov	r0, r7
 8006728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800672c:	3a30      	subs	r2, #48	; 0x30
 800672e:	2a09      	cmp	r2, #9
 8006730:	d903      	bls.n	800673a <_svfiprintf_r+0x196>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0c8      	beq.n	80066c8 <_svfiprintf_r+0x124>
 8006736:	9105      	str	r1, [sp, #20]
 8006738:	e7c6      	b.n	80066c8 <_svfiprintf_r+0x124>
 800673a:	fb05 2101 	mla	r1, r5, r1, r2
 800673e:	2301      	movs	r3, #1
 8006740:	4607      	mov	r7, r0
 8006742:	e7f0      	b.n	8006726 <_svfiprintf_r+0x182>
 8006744:	ab03      	add	r3, sp, #12
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	4622      	mov	r2, r4
 800674a:	4b11      	ldr	r3, [pc, #68]	; (8006790 <_svfiprintf_r+0x1ec>)
 800674c:	a904      	add	r1, sp, #16
 800674e:	4640      	mov	r0, r8
 8006750:	f3af 8000 	nop.w
 8006754:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006758:	4681      	mov	r9, r0
 800675a:	d1d6      	bne.n	800670a <_svfiprintf_r+0x166>
 800675c:	89a3      	ldrh	r3, [r4, #12]
 800675e:	065b      	lsls	r3, r3, #25
 8006760:	f53f af35 	bmi.w	80065ce <_svfiprintf_r+0x2a>
 8006764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006766:	b01d      	add	sp, #116	; 0x74
 8006768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676c:	ab03      	add	r3, sp, #12
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	4622      	mov	r2, r4
 8006772:	4b07      	ldr	r3, [pc, #28]	; (8006790 <_svfiprintf_r+0x1ec>)
 8006774:	a904      	add	r1, sp, #16
 8006776:	4640      	mov	r0, r8
 8006778:	f000 f882 	bl	8006880 <_printf_i>
 800677c:	e7ea      	b.n	8006754 <_svfiprintf_r+0x1b0>
 800677e:	bf00      	nop
 8006780:	08006dd4 	.word	0x08006dd4
 8006784:	08006dda 	.word	0x08006dda
 8006788:	08006dde 	.word	0x08006dde
 800678c:	00000000 	.word	0x00000000
 8006790:	080064f1 	.word	0x080064f1

08006794 <_printf_common>:
 8006794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006798:	4691      	mov	r9, r2
 800679a:	461f      	mov	r7, r3
 800679c:	688a      	ldr	r2, [r1, #8]
 800679e:	690b      	ldr	r3, [r1, #16]
 80067a0:	4606      	mov	r6, r0
 80067a2:	4293      	cmp	r3, r2
 80067a4:	bfb8      	it	lt
 80067a6:	4613      	movlt	r3, r2
 80067a8:	f8c9 3000 	str.w	r3, [r9]
 80067ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067b0:	460c      	mov	r4, r1
 80067b2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067b6:	b112      	cbz	r2, 80067be <_printf_common+0x2a>
 80067b8:	3301      	adds	r3, #1
 80067ba:	f8c9 3000 	str.w	r3, [r9]
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	0699      	lsls	r1, r3, #26
 80067c2:	bf42      	ittt	mi
 80067c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80067c8:	3302      	addmi	r3, #2
 80067ca:	f8c9 3000 	strmi.w	r3, [r9]
 80067ce:	6825      	ldr	r5, [r4, #0]
 80067d0:	f015 0506 	ands.w	r5, r5, #6
 80067d4:	d107      	bne.n	80067e6 <_printf_common+0x52>
 80067d6:	f104 0a19 	add.w	sl, r4, #25
 80067da:	68e3      	ldr	r3, [r4, #12]
 80067dc:	f8d9 2000 	ldr.w	r2, [r9]
 80067e0:	1a9b      	subs	r3, r3, r2
 80067e2:	42ab      	cmp	r3, r5
 80067e4:	dc29      	bgt.n	800683a <_printf_common+0xa6>
 80067e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80067ea:	6822      	ldr	r2, [r4, #0]
 80067ec:	3300      	adds	r3, #0
 80067ee:	bf18      	it	ne
 80067f0:	2301      	movne	r3, #1
 80067f2:	0692      	lsls	r2, r2, #26
 80067f4:	d42e      	bmi.n	8006854 <_printf_common+0xc0>
 80067f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067fa:	4639      	mov	r1, r7
 80067fc:	4630      	mov	r0, r6
 80067fe:	47c0      	blx	r8
 8006800:	3001      	adds	r0, #1
 8006802:	d021      	beq.n	8006848 <_printf_common+0xb4>
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	68e5      	ldr	r5, [r4, #12]
 8006808:	f003 0306 	and.w	r3, r3, #6
 800680c:	2b04      	cmp	r3, #4
 800680e:	bf18      	it	ne
 8006810:	2500      	movne	r5, #0
 8006812:	f8d9 2000 	ldr.w	r2, [r9]
 8006816:	f04f 0900 	mov.w	r9, #0
 800681a:	bf08      	it	eq
 800681c:	1aad      	subeq	r5, r5, r2
 800681e:	68a3      	ldr	r3, [r4, #8]
 8006820:	6922      	ldr	r2, [r4, #16]
 8006822:	bf08      	it	eq
 8006824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006828:	4293      	cmp	r3, r2
 800682a:	bfc4      	itt	gt
 800682c:	1a9b      	subgt	r3, r3, r2
 800682e:	18ed      	addgt	r5, r5, r3
 8006830:	341a      	adds	r4, #26
 8006832:	454d      	cmp	r5, r9
 8006834:	d11a      	bne.n	800686c <_printf_common+0xd8>
 8006836:	2000      	movs	r0, #0
 8006838:	e008      	b.n	800684c <_printf_common+0xb8>
 800683a:	2301      	movs	r3, #1
 800683c:	4652      	mov	r2, sl
 800683e:	4639      	mov	r1, r7
 8006840:	4630      	mov	r0, r6
 8006842:	47c0      	blx	r8
 8006844:	3001      	adds	r0, #1
 8006846:	d103      	bne.n	8006850 <_printf_common+0xbc>
 8006848:	f04f 30ff 	mov.w	r0, #4294967295
 800684c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006850:	3501      	adds	r5, #1
 8006852:	e7c2      	b.n	80067da <_printf_common+0x46>
 8006854:	2030      	movs	r0, #48	; 0x30
 8006856:	18e1      	adds	r1, r4, r3
 8006858:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006862:	4422      	add	r2, r4
 8006864:	3302      	adds	r3, #2
 8006866:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800686a:	e7c4      	b.n	80067f6 <_printf_common+0x62>
 800686c:	2301      	movs	r3, #1
 800686e:	4622      	mov	r2, r4
 8006870:	4639      	mov	r1, r7
 8006872:	4630      	mov	r0, r6
 8006874:	47c0      	blx	r8
 8006876:	3001      	adds	r0, #1
 8006878:	d0e6      	beq.n	8006848 <_printf_common+0xb4>
 800687a:	f109 0901 	add.w	r9, r9, #1
 800687e:	e7d8      	b.n	8006832 <_printf_common+0x9e>

08006880 <_printf_i>:
 8006880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006884:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006888:	460c      	mov	r4, r1
 800688a:	7e09      	ldrb	r1, [r1, #24]
 800688c:	b085      	sub	sp, #20
 800688e:	296e      	cmp	r1, #110	; 0x6e
 8006890:	4617      	mov	r7, r2
 8006892:	4606      	mov	r6, r0
 8006894:	4698      	mov	r8, r3
 8006896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006898:	f000 80b3 	beq.w	8006a02 <_printf_i+0x182>
 800689c:	d822      	bhi.n	80068e4 <_printf_i+0x64>
 800689e:	2963      	cmp	r1, #99	; 0x63
 80068a0:	d036      	beq.n	8006910 <_printf_i+0x90>
 80068a2:	d80a      	bhi.n	80068ba <_printf_i+0x3a>
 80068a4:	2900      	cmp	r1, #0
 80068a6:	f000 80b9 	beq.w	8006a1c <_printf_i+0x19c>
 80068aa:	2958      	cmp	r1, #88	; 0x58
 80068ac:	f000 8083 	beq.w	80069b6 <_printf_i+0x136>
 80068b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80068b8:	e032      	b.n	8006920 <_printf_i+0xa0>
 80068ba:	2964      	cmp	r1, #100	; 0x64
 80068bc:	d001      	beq.n	80068c2 <_printf_i+0x42>
 80068be:	2969      	cmp	r1, #105	; 0x69
 80068c0:	d1f6      	bne.n	80068b0 <_printf_i+0x30>
 80068c2:	6820      	ldr	r0, [r4, #0]
 80068c4:	6813      	ldr	r3, [r2, #0]
 80068c6:	0605      	lsls	r5, r0, #24
 80068c8:	f103 0104 	add.w	r1, r3, #4
 80068cc:	d52a      	bpl.n	8006924 <_printf_i+0xa4>
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6011      	str	r1, [r2, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	da03      	bge.n	80068de <_printf_i+0x5e>
 80068d6:	222d      	movs	r2, #45	; 0x2d
 80068d8:	425b      	negs	r3, r3
 80068da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80068de:	486f      	ldr	r0, [pc, #444]	; (8006a9c <_printf_i+0x21c>)
 80068e0:	220a      	movs	r2, #10
 80068e2:	e039      	b.n	8006958 <_printf_i+0xd8>
 80068e4:	2973      	cmp	r1, #115	; 0x73
 80068e6:	f000 809d 	beq.w	8006a24 <_printf_i+0x1a4>
 80068ea:	d808      	bhi.n	80068fe <_printf_i+0x7e>
 80068ec:	296f      	cmp	r1, #111	; 0x6f
 80068ee:	d020      	beq.n	8006932 <_printf_i+0xb2>
 80068f0:	2970      	cmp	r1, #112	; 0x70
 80068f2:	d1dd      	bne.n	80068b0 <_printf_i+0x30>
 80068f4:	6823      	ldr	r3, [r4, #0]
 80068f6:	f043 0320 	orr.w	r3, r3, #32
 80068fa:	6023      	str	r3, [r4, #0]
 80068fc:	e003      	b.n	8006906 <_printf_i+0x86>
 80068fe:	2975      	cmp	r1, #117	; 0x75
 8006900:	d017      	beq.n	8006932 <_printf_i+0xb2>
 8006902:	2978      	cmp	r1, #120	; 0x78
 8006904:	d1d4      	bne.n	80068b0 <_printf_i+0x30>
 8006906:	2378      	movs	r3, #120	; 0x78
 8006908:	4865      	ldr	r0, [pc, #404]	; (8006aa0 <_printf_i+0x220>)
 800690a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800690e:	e055      	b.n	80069bc <_printf_i+0x13c>
 8006910:	6813      	ldr	r3, [r2, #0]
 8006912:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006916:	1d19      	adds	r1, r3, #4
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6011      	str	r1, [r2, #0]
 800691c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006920:	2301      	movs	r3, #1
 8006922:	e08c      	b.n	8006a3e <_printf_i+0x1be>
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f010 0f40 	tst.w	r0, #64	; 0x40
 800692a:	6011      	str	r1, [r2, #0]
 800692c:	bf18      	it	ne
 800692e:	b21b      	sxthne	r3, r3
 8006930:	e7cf      	b.n	80068d2 <_printf_i+0x52>
 8006932:	6813      	ldr	r3, [r2, #0]
 8006934:	6825      	ldr	r5, [r4, #0]
 8006936:	1d18      	adds	r0, r3, #4
 8006938:	6010      	str	r0, [r2, #0]
 800693a:	0628      	lsls	r0, r5, #24
 800693c:	d501      	bpl.n	8006942 <_printf_i+0xc2>
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	e002      	b.n	8006948 <_printf_i+0xc8>
 8006942:	0668      	lsls	r0, r5, #25
 8006944:	d5fb      	bpl.n	800693e <_printf_i+0xbe>
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	296f      	cmp	r1, #111	; 0x6f
 800694a:	bf14      	ite	ne
 800694c:	220a      	movne	r2, #10
 800694e:	2208      	moveq	r2, #8
 8006950:	4852      	ldr	r0, [pc, #328]	; (8006a9c <_printf_i+0x21c>)
 8006952:	2100      	movs	r1, #0
 8006954:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006958:	6865      	ldr	r5, [r4, #4]
 800695a:	2d00      	cmp	r5, #0
 800695c:	60a5      	str	r5, [r4, #8]
 800695e:	f2c0 8095 	blt.w	8006a8c <_printf_i+0x20c>
 8006962:	6821      	ldr	r1, [r4, #0]
 8006964:	f021 0104 	bic.w	r1, r1, #4
 8006968:	6021      	str	r1, [r4, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d13d      	bne.n	80069ea <_printf_i+0x16a>
 800696e:	2d00      	cmp	r5, #0
 8006970:	f040 808e 	bne.w	8006a90 <_printf_i+0x210>
 8006974:	4665      	mov	r5, ip
 8006976:	2a08      	cmp	r2, #8
 8006978:	d10b      	bne.n	8006992 <_printf_i+0x112>
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	07db      	lsls	r3, r3, #31
 800697e:	d508      	bpl.n	8006992 <_printf_i+0x112>
 8006980:	6923      	ldr	r3, [r4, #16]
 8006982:	6862      	ldr	r2, [r4, #4]
 8006984:	429a      	cmp	r2, r3
 8006986:	bfde      	ittt	le
 8006988:	2330      	movle	r3, #48	; 0x30
 800698a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800698e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006992:	ebac 0305 	sub.w	r3, ip, r5
 8006996:	6123      	str	r3, [r4, #16]
 8006998:	f8cd 8000 	str.w	r8, [sp]
 800699c:	463b      	mov	r3, r7
 800699e:	aa03      	add	r2, sp, #12
 80069a0:	4621      	mov	r1, r4
 80069a2:	4630      	mov	r0, r6
 80069a4:	f7ff fef6 	bl	8006794 <_printf_common>
 80069a8:	3001      	adds	r0, #1
 80069aa:	d14d      	bne.n	8006a48 <_printf_i+0x1c8>
 80069ac:	f04f 30ff 	mov.w	r0, #4294967295
 80069b0:	b005      	add	sp, #20
 80069b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069b6:	4839      	ldr	r0, [pc, #228]	; (8006a9c <_printf_i+0x21c>)
 80069b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80069bc:	6813      	ldr	r3, [r2, #0]
 80069be:	6821      	ldr	r1, [r4, #0]
 80069c0:	1d1d      	adds	r5, r3, #4
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6015      	str	r5, [r2, #0]
 80069c6:	060a      	lsls	r2, r1, #24
 80069c8:	d50b      	bpl.n	80069e2 <_printf_i+0x162>
 80069ca:	07ca      	lsls	r2, r1, #31
 80069cc:	bf44      	itt	mi
 80069ce:	f041 0120 	orrmi.w	r1, r1, #32
 80069d2:	6021      	strmi	r1, [r4, #0]
 80069d4:	b91b      	cbnz	r3, 80069de <_printf_i+0x15e>
 80069d6:	6822      	ldr	r2, [r4, #0]
 80069d8:	f022 0220 	bic.w	r2, r2, #32
 80069dc:	6022      	str	r2, [r4, #0]
 80069de:	2210      	movs	r2, #16
 80069e0:	e7b7      	b.n	8006952 <_printf_i+0xd2>
 80069e2:	064d      	lsls	r5, r1, #25
 80069e4:	bf48      	it	mi
 80069e6:	b29b      	uxthmi	r3, r3
 80069e8:	e7ef      	b.n	80069ca <_printf_i+0x14a>
 80069ea:	4665      	mov	r5, ip
 80069ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80069f0:	fb02 3311 	mls	r3, r2, r1, r3
 80069f4:	5cc3      	ldrb	r3, [r0, r3]
 80069f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80069fa:	460b      	mov	r3, r1
 80069fc:	2900      	cmp	r1, #0
 80069fe:	d1f5      	bne.n	80069ec <_printf_i+0x16c>
 8006a00:	e7b9      	b.n	8006976 <_printf_i+0xf6>
 8006a02:	6813      	ldr	r3, [r2, #0]
 8006a04:	6825      	ldr	r5, [r4, #0]
 8006a06:	1d18      	adds	r0, r3, #4
 8006a08:	6961      	ldr	r1, [r4, #20]
 8006a0a:	6010      	str	r0, [r2, #0]
 8006a0c:	0628      	lsls	r0, r5, #24
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	d501      	bpl.n	8006a16 <_printf_i+0x196>
 8006a12:	6019      	str	r1, [r3, #0]
 8006a14:	e002      	b.n	8006a1c <_printf_i+0x19c>
 8006a16:	066a      	lsls	r2, r5, #25
 8006a18:	d5fb      	bpl.n	8006a12 <_printf_i+0x192>
 8006a1a:	8019      	strh	r1, [r3, #0]
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	4665      	mov	r5, ip
 8006a20:	6123      	str	r3, [r4, #16]
 8006a22:	e7b9      	b.n	8006998 <_printf_i+0x118>
 8006a24:	6813      	ldr	r3, [r2, #0]
 8006a26:	1d19      	adds	r1, r3, #4
 8006a28:	6011      	str	r1, [r2, #0]
 8006a2a:	681d      	ldr	r5, [r3, #0]
 8006a2c:	6862      	ldr	r2, [r4, #4]
 8006a2e:	2100      	movs	r1, #0
 8006a30:	4628      	mov	r0, r5
 8006a32:	f000 f837 	bl	8006aa4 <memchr>
 8006a36:	b108      	cbz	r0, 8006a3c <_printf_i+0x1bc>
 8006a38:	1b40      	subs	r0, r0, r5
 8006a3a:	6060      	str	r0, [r4, #4]
 8006a3c:	6863      	ldr	r3, [r4, #4]
 8006a3e:	6123      	str	r3, [r4, #16]
 8006a40:	2300      	movs	r3, #0
 8006a42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a46:	e7a7      	b.n	8006998 <_printf_i+0x118>
 8006a48:	6923      	ldr	r3, [r4, #16]
 8006a4a:	462a      	mov	r2, r5
 8006a4c:	4639      	mov	r1, r7
 8006a4e:	4630      	mov	r0, r6
 8006a50:	47c0      	blx	r8
 8006a52:	3001      	adds	r0, #1
 8006a54:	d0aa      	beq.n	80069ac <_printf_i+0x12c>
 8006a56:	6823      	ldr	r3, [r4, #0]
 8006a58:	079b      	lsls	r3, r3, #30
 8006a5a:	d413      	bmi.n	8006a84 <_printf_i+0x204>
 8006a5c:	68e0      	ldr	r0, [r4, #12]
 8006a5e:	9b03      	ldr	r3, [sp, #12]
 8006a60:	4298      	cmp	r0, r3
 8006a62:	bfb8      	it	lt
 8006a64:	4618      	movlt	r0, r3
 8006a66:	e7a3      	b.n	80069b0 <_printf_i+0x130>
 8006a68:	2301      	movs	r3, #1
 8006a6a:	464a      	mov	r2, r9
 8006a6c:	4639      	mov	r1, r7
 8006a6e:	4630      	mov	r0, r6
 8006a70:	47c0      	blx	r8
 8006a72:	3001      	adds	r0, #1
 8006a74:	d09a      	beq.n	80069ac <_printf_i+0x12c>
 8006a76:	3501      	adds	r5, #1
 8006a78:	68e3      	ldr	r3, [r4, #12]
 8006a7a:	9a03      	ldr	r2, [sp, #12]
 8006a7c:	1a9b      	subs	r3, r3, r2
 8006a7e:	42ab      	cmp	r3, r5
 8006a80:	dcf2      	bgt.n	8006a68 <_printf_i+0x1e8>
 8006a82:	e7eb      	b.n	8006a5c <_printf_i+0x1dc>
 8006a84:	2500      	movs	r5, #0
 8006a86:	f104 0919 	add.w	r9, r4, #25
 8006a8a:	e7f5      	b.n	8006a78 <_printf_i+0x1f8>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1ac      	bne.n	80069ea <_printf_i+0x16a>
 8006a90:	7803      	ldrb	r3, [r0, #0]
 8006a92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a9a:	e76c      	b.n	8006976 <_printf_i+0xf6>
 8006a9c:	08006de5 	.word	0x08006de5
 8006aa0:	08006df6 	.word	0x08006df6

08006aa4 <memchr>:
 8006aa4:	b510      	push	{r4, lr}
 8006aa6:	b2c9      	uxtb	r1, r1
 8006aa8:	4402      	add	r2, r0
 8006aaa:	4290      	cmp	r0, r2
 8006aac:	4603      	mov	r3, r0
 8006aae:	d101      	bne.n	8006ab4 <memchr+0x10>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	e003      	b.n	8006abc <memchr+0x18>
 8006ab4:	781c      	ldrb	r4, [r3, #0]
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	428c      	cmp	r4, r1
 8006aba:	d1f6      	bne.n	8006aaa <memchr+0x6>
 8006abc:	4618      	mov	r0, r3
 8006abe:	bd10      	pop	{r4, pc}

08006ac0 <memmove>:
 8006ac0:	4288      	cmp	r0, r1
 8006ac2:	b510      	push	{r4, lr}
 8006ac4:	eb01 0302 	add.w	r3, r1, r2
 8006ac8:	d807      	bhi.n	8006ada <memmove+0x1a>
 8006aca:	1e42      	subs	r2, r0, #1
 8006acc:	4299      	cmp	r1, r3
 8006ace:	d00a      	beq.n	8006ae6 <memmove+0x26>
 8006ad0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ad4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006ad8:	e7f8      	b.n	8006acc <memmove+0xc>
 8006ada:	4283      	cmp	r3, r0
 8006adc:	d9f5      	bls.n	8006aca <memmove+0xa>
 8006ade:	1881      	adds	r1, r0, r2
 8006ae0:	1ad2      	subs	r2, r2, r3
 8006ae2:	42d3      	cmn	r3, r2
 8006ae4:	d100      	bne.n	8006ae8 <memmove+0x28>
 8006ae6:	bd10      	pop	{r4, pc}
 8006ae8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006aec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006af0:	e7f7      	b.n	8006ae2 <memmove+0x22>
	...

08006af4 <_free_r>:
 8006af4:	b538      	push	{r3, r4, r5, lr}
 8006af6:	4605      	mov	r5, r0
 8006af8:	2900      	cmp	r1, #0
 8006afa:	d043      	beq.n	8006b84 <_free_r+0x90>
 8006afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b00:	1f0c      	subs	r4, r1, #4
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	bfb8      	it	lt
 8006b06:	18e4      	addlt	r4, r4, r3
 8006b08:	f000 f8d0 	bl	8006cac <__malloc_lock>
 8006b0c:	4a1e      	ldr	r2, [pc, #120]	; (8006b88 <_free_r+0x94>)
 8006b0e:	6813      	ldr	r3, [r2, #0]
 8006b10:	4610      	mov	r0, r2
 8006b12:	b933      	cbnz	r3, 8006b22 <_free_r+0x2e>
 8006b14:	6063      	str	r3, [r4, #4]
 8006b16:	6014      	str	r4, [r2, #0]
 8006b18:	4628      	mov	r0, r5
 8006b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b1e:	f000 b8c6 	b.w	8006cae <__malloc_unlock>
 8006b22:	42a3      	cmp	r3, r4
 8006b24:	d90b      	bls.n	8006b3e <_free_r+0x4a>
 8006b26:	6821      	ldr	r1, [r4, #0]
 8006b28:	1862      	adds	r2, r4, r1
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	bf01      	itttt	eq
 8006b2e:	681a      	ldreq	r2, [r3, #0]
 8006b30:	685b      	ldreq	r3, [r3, #4]
 8006b32:	1852      	addeq	r2, r2, r1
 8006b34:	6022      	streq	r2, [r4, #0]
 8006b36:	6063      	str	r3, [r4, #4]
 8006b38:	6004      	str	r4, [r0, #0]
 8006b3a:	e7ed      	b.n	8006b18 <_free_r+0x24>
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	b10a      	cbz	r2, 8006b46 <_free_r+0x52>
 8006b42:	42a2      	cmp	r2, r4
 8006b44:	d9fa      	bls.n	8006b3c <_free_r+0x48>
 8006b46:	6819      	ldr	r1, [r3, #0]
 8006b48:	1858      	adds	r0, r3, r1
 8006b4a:	42a0      	cmp	r0, r4
 8006b4c:	d10b      	bne.n	8006b66 <_free_r+0x72>
 8006b4e:	6820      	ldr	r0, [r4, #0]
 8006b50:	4401      	add	r1, r0
 8006b52:	1858      	adds	r0, r3, r1
 8006b54:	4282      	cmp	r2, r0
 8006b56:	6019      	str	r1, [r3, #0]
 8006b58:	d1de      	bne.n	8006b18 <_free_r+0x24>
 8006b5a:	6810      	ldr	r0, [r2, #0]
 8006b5c:	6852      	ldr	r2, [r2, #4]
 8006b5e:	4401      	add	r1, r0
 8006b60:	6019      	str	r1, [r3, #0]
 8006b62:	605a      	str	r2, [r3, #4]
 8006b64:	e7d8      	b.n	8006b18 <_free_r+0x24>
 8006b66:	d902      	bls.n	8006b6e <_free_r+0x7a>
 8006b68:	230c      	movs	r3, #12
 8006b6a:	602b      	str	r3, [r5, #0]
 8006b6c:	e7d4      	b.n	8006b18 <_free_r+0x24>
 8006b6e:	6820      	ldr	r0, [r4, #0]
 8006b70:	1821      	adds	r1, r4, r0
 8006b72:	428a      	cmp	r2, r1
 8006b74:	bf01      	itttt	eq
 8006b76:	6811      	ldreq	r1, [r2, #0]
 8006b78:	6852      	ldreq	r2, [r2, #4]
 8006b7a:	1809      	addeq	r1, r1, r0
 8006b7c:	6021      	streq	r1, [r4, #0]
 8006b7e:	6062      	str	r2, [r4, #4]
 8006b80:	605c      	str	r4, [r3, #4]
 8006b82:	e7c9      	b.n	8006b18 <_free_r+0x24>
 8006b84:	bd38      	pop	{r3, r4, r5, pc}
 8006b86:	bf00      	nop
 8006b88:	20002e58 	.word	0x20002e58

08006b8c <_malloc_r>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	1ccd      	adds	r5, r1, #3
 8006b90:	f025 0503 	bic.w	r5, r5, #3
 8006b94:	3508      	adds	r5, #8
 8006b96:	2d0c      	cmp	r5, #12
 8006b98:	bf38      	it	cc
 8006b9a:	250c      	movcc	r5, #12
 8006b9c:	2d00      	cmp	r5, #0
 8006b9e:	4606      	mov	r6, r0
 8006ba0:	db01      	blt.n	8006ba6 <_malloc_r+0x1a>
 8006ba2:	42a9      	cmp	r1, r5
 8006ba4:	d903      	bls.n	8006bae <_malloc_r+0x22>
 8006ba6:	230c      	movs	r3, #12
 8006ba8:	6033      	str	r3, [r6, #0]
 8006baa:	2000      	movs	r0, #0
 8006bac:	bd70      	pop	{r4, r5, r6, pc}
 8006bae:	f000 f87d 	bl	8006cac <__malloc_lock>
 8006bb2:	4a21      	ldr	r2, [pc, #132]	; (8006c38 <_malloc_r+0xac>)
 8006bb4:	6814      	ldr	r4, [r2, #0]
 8006bb6:	4621      	mov	r1, r4
 8006bb8:	b991      	cbnz	r1, 8006be0 <_malloc_r+0x54>
 8006bba:	4c20      	ldr	r4, [pc, #128]	; (8006c3c <_malloc_r+0xb0>)
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	b91b      	cbnz	r3, 8006bc8 <_malloc_r+0x3c>
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	f000 f863 	bl	8006c8c <_sbrk_r>
 8006bc6:	6020      	str	r0, [r4, #0]
 8006bc8:	4629      	mov	r1, r5
 8006bca:	4630      	mov	r0, r6
 8006bcc:	f000 f85e 	bl	8006c8c <_sbrk_r>
 8006bd0:	1c43      	adds	r3, r0, #1
 8006bd2:	d124      	bne.n	8006c1e <_malloc_r+0x92>
 8006bd4:	230c      	movs	r3, #12
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	6033      	str	r3, [r6, #0]
 8006bda:	f000 f868 	bl	8006cae <__malloc_unlock>
 8006bde:	e7e4      	b.n	8006baa <_malloc_r+0x1e>
 8006be0:	680b      	ldr	r3, [r1, #0]
 8006be2:	1b5b      	subs	r3, r3, r5
 8006be4:	d418      	bmi.n	8006c18 <_malloc_r+0x8c>
 8006be6:	2b0b      	cmp	r3, #11
 8006be8:	d90f      	bls.n	8006c0a <_malloc_r+0x7e>
 8006bea:	600b      	str	r3, [r1, #0]
 8006bec:	18cc      	adds	r4, r1, r3
 8006bee:	50cd      	str	r5, [r1, r3]
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f000 f85c 	bl	8006cae <__malloc_unlock>
 8006bf6:	f104 000b 	add.w	r0, r4, #11
 8006bfa:	1d23      	adds	r3, r4, #4
 8006bfc:	f020 0007 	bic.w	r0, r0, #7
 8006c00:	1ac3      	subs	r3, r0, r3
 8006c02:	d0d3      	beq.n	8006bac <_malloc_r+0x20>
 8006c04:	425a      	negs	r2, r3
 8006c06:	50e2      	str	r2, [r4, r3]
 8006c08:	e7d0      	b.n	8006bac <_malloc_r+0x20>
 8006c0a:	684b      	ldr	r3, [r1, #4]
 8006c0c:	428c      	cmp	r4, r1
 8006c0e:	bf16      	itet	ne
 8006c10:	6063      	strne	r3, [r4, #4]
 8006c12:	6013      	streq	r3, [r2, #0]
 8006c14:	460c      	movne	r4, r1
 8006c16:	e7eb      	b.n	8006bf0 <_malloc_r+0x64>
 8006c18:	460c      	mov	r4, r1
 8006c1a:	6849      	ldr	r1, [r1, #4]
 8006c1c:	e7cc      	b.n	8006bb8 <_malloc_r+0x2c>
 8006c1e:	1cc4      	adds	r4, r0, #3
 8006c20:	f024 0403 	bic.w	r4, r4, #3
 8006c24:	42a0      	cmp	r0, r4
 8006c26:	d005      	beq.n	8006c34 <_malloc_r+0xa8>
 8006c28:	1a21      	subs	r1, r4, r0
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	f000 f82e 	bl	8006c8c <_sbrk_r>
 8006c30:	3001      	adds	r0, #1
 8006c32:	d0cf      	beq.n	8006bd4 <_malloc_r+0x48>
 8006c34:	6025      	str	r5, [r4, #0]
 8006c36:	e7db      	b.n	8006bf0 <_malloc_r+0x64>
 8006c38:	20002e58 	.word	0x20002e58
 8006c3c:	20002e5c 	.word	0x20002e5c

08006c40 <_realloc_r>:
 8006c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c42:	4607      	mov	r7, r0
 8006c44:	4614      	mov	r4, r2
 8006c46:	460e      	mov	r6, r1
 8006c48:	b921      	cbnz	r1, 8006c54 <_realloc_r+0x14>
 8006c4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006c4e:	4611      	mov	r1, r2
 8006c50:	f7ff bf9c 	b.w	8006b8c <_malloc_r>
 8006c54:	b922      	cbnz	r2, 8006c60 <_realloc_r+0x20>
 8006c56:	f7ff ff4d 	bl	8006af4 <_free_r>
 8006c5a:	4625      	mov	r5, r4
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c60:	f000 f826 	bl	8006cb0 <_malloc_usable_size_r>
 8006c64:	42a0      	cmp	r0, r4
 8006c66:	d20f      	bcs.n	8006c88 <_realloc_r+0x48>
 8006c68:	4621      	mov	r1, r4
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	f7ff ff8e 	bl	8006b8c <_malloc_r>
 8006c70:	4605      	mov	r5, r0
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d0f2      	beq.n	8006c5c <_realloc_r+0x1c>
 8006c76:	4631      	mov	r1, r6
 8006c78:	4622      	mov	r2, r4
 8006c7a:	f7ff fc05 	bl	8006488 <memcpy>
 8006c7e:	4631      	mov	r1, r6
 8006c80:	4638      	mov	r0, r7
 8006c82:	f7ff ff37 	bl	8006af4 <_free_r>
 8006c86:	e7e9      	b.n	8006c5c <_realloc_r+0x1c>
 8006c88:	4635      	mov	r5, r6
 8006c8a:	e7e7      	b.n	8006c5c <_realloc_r+0x1c>

08006c8c <_sbrk_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	2300      	movs	r3, #0
 8006c90:	4c05      	ldr	r4, [pc, #20]	; (8006ca8 <_sbrk_r+0x1c>)
 8006c92:	4605      	mov	r5, r0
 8006c94:	4608      	mov	r0, r1
 8006c96:	6023      	str	r3, [r4, #0]
 8006c98:	f7fb f84a 	bl	8001d30 <_sbrk>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d102      	bne.n	8006ca6 <_sbrk_r+0x1a>
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	b103      	cbz	r3, 8006ca6 <_sbrk_r+0x1a>
 8006ca4:	602b      	str	r3, [r5, #0]
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	20002f9c 	.word	0x20002f9c

08006cac <__malloc_lock>:
 8006cac:	4770      	bx	lr

08006cae <__malloc_unlock>:
 8006cae:	4770      	bx	lr

08006cb0 <_malloc_usable_size_r>:
 8006cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cb4:	1f18      	subs	r0, r3, #4
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	bfbc      	itt	lt
 8006cba:	580b      	ldrlt	r3, [r1, r0]
 8006cbc:	18c0      	addlt	r0, r0, r3
 8006cbe:	4770      	bx	lr

08006cc0 <_init>:
 8006cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc2:	bf00      	nop
 8006cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cc6:	bc08      	pop	{r3}
 8006cc8:	469e      	mov	lr, r3
 8006cca:	4770      	bx	lr

08006ccc <_fini>:
 8006ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cce:	bf00      	nop
 8006cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cd2:	bc08      	pop	{r3}
 8006cd4:	469e      	mov	lr, r3
 8006cd6:	4770      	bx	lr
